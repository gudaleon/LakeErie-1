<?xml version="1.0"?>
<doc>
<assembly>
<name>
EwEPlugin
</name>
</assembly>
<members>
<member name="P:EwEPlugin.Data.IPluginData.AssemblyName">
 -----------------------------------------------------------------------
 <summary>
 Name of the <see cref="T:EwEPlugin.cPluginAssembly">plugin assembly</see> that 
 exposed this data.
 </summary>
 -----------------------------------------------------------------------

</member><member name="P:EwEPlugin.Data.IPluginData.PluginName">
 -----------------------------------------------------------------------
 <summary>
 Name of the <see cref="T:EwEPlugin.IPlugin">plugin</see> that exposed this data.
 </summary>
 -----------------------------------------------------------------------

</member><member name="P:EwEPlugin.Data.IPluginData.RunType">
 -----------------------------------------------------------------------
 <summary>
 The <see cref="T:EwEUtils.Core.IRunType">run type</see> that this data was produced with.
 </summary>
 -----------------------------------------------------------------------

</member><member name="T:EwEPlugin.Data.IPluginData">
 ---------------------------------------------------------------------------
 <summary>
 Base type for data shared by plugins.
 </summary>
 ---------------------------------------------------------------------------

</member><member name="T:EwEPlugin.IEcopathRunCompletedPostPlugin">
 ---------------------------------------------------------------------------
 <summary>
 Interface for implementing a plugin point that is automatically invoked when
 Ecopath has ran succesfully - after all IEcopathRunCompletedPlugin instances
 have been called.
 </summary>
 ---------------------------------------------------------------------------

</member><member name="M:EwEPlugin.IEcopathMassBalancePlugin.EcopathMassBalance(System.Object,System.Int32,System.Int32@)">
 -----------------------------------------------------------------------
 <summary>
 Execute a Mass balance calculation.
 </summary>
	<param name="EcoPathDataStructures">A reference to the Ecopath data 
 structures as defined in the EwE project.</param>
	<param name="eEstimateFor">Enumerated value, stating the purpose of the mass 
 balance calculation.</param>
	<param name="iResult">The result of the mass balance calculation. For 
 possible values refer to the eStatusFlags enumerated type in the EwE project.
 </param>
	<returns>True if a MassBalance calculation has been performed succesfully.
 This plug-in point is exclusive, meaning that only one IEcopathMassBalancePlugin 
 plug-in is allowed to successdully perform this calculation.</returns>
 -----------------------------------------------------------------------

</member><member name="T:EwEPlugin.IEcopathMassBalancePlugin">
 ---------------------------------------------------------------------------
 <summary>
 Interface for implementing a plugin point that performs a custom Ecopath 
 Mass Balance calculation. If provided, this plug-in point will replace
 the native Mass Balance calculation provided with EwE6.
 </summary>
 ---------------------------------------------------------------------------

</member><member name="M:EwEPlugin.IEcosimDataInitializedPlugin.EcosimPreDataInitialized(System.Object)">
	<summary>
 Ecosim has loaded a scenario and is about to call cEcosimModel.Init() to initialize its data.
 </summary>
	<param name="EcosimDatastructures">Ecosim datastructures instance.</param>
	<remarks>This can be used prior to the initialization of Ecosim data to set variables that are used by Ecosim to set derived variables. </remarks>
</member><member name="M:EwEPlugin.IEcosimDataInitializedPlugin.EcosimPreRunInitialized(System.Object)">
	<summary>
 Ecosim is about to initailize for a run
 </summary>
	<param name="EcosimDatastructures">cEcosimDataStructures instance.</param>
	<remarks>Call prior to initialization of run data.</remarks>
</member><member name="T:EwEPlugin.IEcosimDataInitializedPlugin">
 ===========================================================================
 <summary>
 Plugin points for the initialization of Ecosim data cEcosimDataStructures 
 </summary>
 ===========================================================================

</member><member name="T:EwEPlugin.IEcospaceEndTimestepPostPlugin">
 ---------------------------------------------------------------------------
 <summary>
 Interface for extending the Ecospace end time step logic. Plug-ins of this
 type are invoked as soon as the EwE Core has finished its calculatios
 of an Ecospace time step, and after all IEcospaceEndTimestepPlugin points
 have been called.
 </summary>
 ---------------------------------------------------------------------------

</member><member name="P:EwEPlugin.IGUIPlugin.ControlImage">
 -----------------------------------------------------------------------
 <summary>
 Override this to specify an image to show in the control 
 for this plugin.
 </summary>
 -----------------------------------------------------------------------

</member><member name="P:EwEPlugin.IGUIPlugin.ControlText">
 -----------------------------------------------------------------------
 <summary>
 Override this to specify the item text to display in the control 
 for this plugin.
 </summary>
 -----------------------------------------------------------------------

</member><member name="P:EwEPlugin.IGUIPlugin.ControlTooltipText">
 -----------------------------------------------------------------------
 <summary>
 Override this to specify the tooltip text to display for the control
 for this plugin.
 </summary>
 -----------------------------------------------------------------------

</member><member name="M:EwEPlugin.IGUIPlugin.OnControlClick(System.Object,System.EventArgs,System.Windows.Forms.Form@)">
 -----------------------------------------------------------------------
 <summary>
 Event handler that will be called when the control for this plugin
 is clicked or activated.
 </summary>
	<param name="sender">The control that was clicked or activated.</param>
	<param name="e">Event parameters pertaining the control.</param>
	<param name="frmPlugin">A reference to the form that the plugin creates
 or activates in response to this event.</param>
 -----------------------------------------------------------------------

</member><member name="P:EwEPlugin.IGUIPlugin.EnabledState">
 -----------------------------------------------------------------------
 <summary>
 Returns the <see cref="T:EwEUtils.Core.eCoreExecutionState">Core Execution State</see> that the 
 EwE core must meet to allow this plugin to run. All GUI controls attached
 to this plug-in will be enabled and disabled in tune with this state.
 </summary>
	<returns>A eCoreExecutionState value, or 0 if this plugin should be accessible anytime.</returns>
	<remarks>See EwECore/Core/cCoreStateMonitor.eCoreExecutionState for possible values.</remarks>
 -----------------------------------------------------------------------

</member><member name="T:EwEPlugin.IGUIPlugin">
 ---------------------------------------------------------------------------
 <summary>
 IGUIPlugin, interface for implementing <see cref="T:EwEPlugin.IPlugin">plugins</see> that
 must be accessible from a Windows GUI.
 </summary>
 ---------------------------------------------------------------------------

</member><member name="T:EwEPlugin.cPluginNavTreeHandler.NavTreePluginComparer">
 -----------------------------------------------------------------------
 <summary>
 Helper class, sorts INavigationTreeItemPlugin instances by tree node
 name in ascending order.
 </summary>
 -----------------------------------------------------------------------

</member><member name="F:EwEPlugin.cPluginNavTreeHandler.m_tv">
	<summary>The tree view to modify.</summary>
</member><member name="M:EwEPlugin.cPluginNavTreeHandler.#ctor(System.Windows.Forms.TreeView,EwEPlugin.cPluginManager,EwEUtils.Commands.cCommandHandler)">
 -----------------------------------------------------------------------
 <summary>
 Constructor, initializes a new instance of a cPluginManuHandler.
 </summary>
	<param name="tv"><see cref="T:System.Windows.Forms.TreeView">TreeView</see> that contains the 
 navigation structure that must be modified.</param>
	<param name="pm"><see cref="T:EwEPlugin.cPluginManager">Plugin manager</see>
 that holds the plugins to place in the control.</param>
 -----------------------------------------------------------------------

</member><member name="M:EwEPlugin.cPluginNavTreeHandler.SortPlugins(EwEPlugin.IGUIPlugin[])">
 -----------------------------------------------------------------------
 <summary>
 Sort a list of navigation plug-ins by tree node position.
 </summary>
	<param name="aip">The plug-ins to sort.</param>
	<returns>A ham sandwich with a cork in it.</returns>
 -----------------------------------------------------------------------

</member><member name="M:EwEPlugin.cPluginNavTreeHandler.PlacePlugin(EwEPlugin.IGUIPlugin,System.Boolean)">
 -----------------------------------------------------------------------
 <summary>
 Place or remove a plug-in tree item.
 </summary>
	<param name="ip">The <see cref="T:EwEPlugin.INavigationTreeItemPlugin">INavigationTreeItemPlugin</see> to place.</param>
	<param name="bPlace">States whether the tree item should be placed (True)
 or removed (False).</param>
 -----------------------------------------------------------------------

</member><member name="T:EwEPlugin.cPluginNavTreeHandler">
 ---------------------------------------------------------------------------
 <summary>
 GUI utility class, handles the placement of
 <see cref="T:EwEPlugin.INavigationTreeItemPlugin">INavigationTreeItemPlugin</see>-
 derived plugins in a <see cref="T:System.Windows.Forms.TreeView">TreeView</see>.
 </summary>
 ---------------------------------------------------------------------------

</member><member name="T:EwEPlugin.cFishingPolicySearchRunType">
 -----------------------------------------------------------------------
 <summary>
 Class defining Fishing Policy Search run/computation dependencies for exchanging data.
 </summary>
 -----------------------------------------------------------------------

</member><member name="M:EwEPlugin.IEcopathClosedPlugin.CloseModel">
 -----------------------------------------------------------------------
 <summary>
 Execution interface for an Ecopath close model plugin point.
 </summary>
	<returns>True if closed succesful.</returns>
 -----------------------------------------------------------------------

</member><member name="T:EwEPlugin.IEcopathClosedPlugin">
 ---------------------------------------------------------------------------
 <summary>
 Interface for implementing a plugin point that is invoked whenever an EwE
 Ecopath model has been closed.
 </summary>
 ---------------------------------------------------------------------------

</member><member name="M:EwEPlugin.IEcosimInitializedPlugin.EcosimInitialized(System.Object)">
	<summary>
 Plugin Point called when an Ecosim Scenario has loaded
 </summary>
	<param name="EcosimDatastructures">cEcosimDataStructures passed as an object.</param>
	<remarks>Called after an Ecosim scenario has loaded but prior to initialization of data.</remarks>
</member><member name="T:EwEPlugin.IEcosimInitializedPlugin">
	<summary>
 Plugin for initialization of Ecosim Scenarios
 </summary>
	<remarks>Contains plugin points for initialization of Ecosim Scenarios</remarks>
</member><member name="T:EwEPlugin.IEcospacePostFishingEffortModTimestepPlugin">
 ---------------------------------------------------------------------------
 <summary>
 Interface for extending the Ecospace fishing effort logic. Plug-ins of this
 type are invoked as soon as Ecospace fishing effort has been calculated.
 </summary>
 ---------------------------------------------------------------------------

</member><member name="M:EwEPlugin.IAutolaunchPlugin.Autolaunch">
 -----------------------------------------------------------------------
 <summary>
 Plug-in point to state whether auto-launch is active.
 </summary>
	<remarks>True if active.</remarks>
 -----------------------------------------------------------------------

</member><member name="T:EwEPlugin.IAutolaunchPlugin">
 ===========================================================================
 <summary>
 Plug-in that should automatically launch its User Interface when loaded.
 </summary>
 ===========================================================================

</member><member name="M:EwEPlugin.IMSYPlugin.MSYInitialized(System.Object,System.Object)">
	<summary>
 MSY has been initialized
 </summary>
	<param name="MSEDataStructure">MSE data structures</param>
	<param name="EcosimDatastructures">Ecosim data structures</param>
	<remarks></remarks>
</member><member name="M:EwEPlugin.IMSYPlugin.MSYRunStarted(System.Object,System.Object)">
	<summary>
 The MSY variables have been initialized and search is about to start.
 </summary>
	<param name="MSEDataStructure"></param>
	<param name="EcosimDatastructures"></param>
	<remarks></remarks>
</member><member name="M:EwEPlugin.IMSYPlugin.MSYEffortCompleted(System.Single[],System.Single[])">
	<summary>
 MSY search has completed all its iteration and computed effort for all fleets. Interface objects have not been populated at this time.
 </summary>
	<param name="MSYEffortByFleet">MSY effort for all fleets</param>
	<param name="MSYFbyGroup">MSY Fishing mortality for groups</param>
	<remarks></remarks>
</member><member name="M:EwEPlugin.IMSYPlugin.MSYRunCompleted">
	<summary>
 MSY search is completed all iterface object have been populated.
 </summary>
	<remarks></remarks>
</member><member name="T:EwEPlugin.IMSYPlugin">
	<summary>
 Interface for implementing MSY search plugin points that are invoked from the EwE core.
 </summary>
	<remarks></remarks>
</member><member name="M:EwEPlugin.IEcosimModifyTimeseriesPlugin.EcosimModifyTimeseries(System.Object)">
	<summary>
 Ecosim is about to initialize for a run. This point allows plug-ins to 
 adjust loaded reference data prior to a run.
 </summary>
	<param name="TimeSeriesDataStructures">cTimeSeriesDataStructures instance.</param>
	<remarks>Call prior to initialization of run data.</remarks>
</member><member name="T:EwEPlugin.IEcosimModifyTimeseriesPlugin">
 ===========================================================================
 <summary>
 Plugin points for the initialization of Ecosim data cEcosimDataStructures 
 </summary>
 ===========================================================================

</member><member name="M:EwEPlugin.IEcotracerPlugin.LoadEcotracerScenario(System.Object)">
 -----------------------------------------------------------------------
 <summary>
 Datasource load ecotracer scenario plugin point.
 </summary>
	<param name="dataSource">A reference to the EwE data source from which
 data is being loaded.</param>
	<remarks>This plugin point is non-exclusive; each implementation 
 of this plugin point will be called.</remarks>
 -----------------------------------------------------------------------

</member><member name="M:EwEPlugin.IEcotracerPlugin.SaveEcotracerScenario(System.Object)">
 -----------------------------------------------------------------------
 <summary>
 Datasource save ecotracer scenario plugin point.
 </summary>
	<param name="dataSource">A reference to the EwE data source to which
 data is being saved.</param>
	<remarks>This plugin point is non-exclusive; each implementation 
 of this plugin point will be called.</remarks>
 -----------------------------------------------------------------------

</member><member name="T:EwEPlugin.IEcotracerPlugin">
 ---------------------------------------------------------------------------
 <summary>
 Interface for implementing plugin points that are invoked from the EwE
 Ecosim model.
 </summary>
 ---------------------------------------------------------------------------

</member><member name="M:EwEPlugin.cPluginException.#ctor(EwEPlugin.cPluginAssembly,System.String,System.Exception)">
 ---------------------------------------------------------------------------
 <summary>
 Constructor, initializes a new instance of a cPluginException.
 </summary>
	<param name="strMessage"></param>
	<param name="exception"></param>
	<param name="assembly"></param>
 ---------------------------------------------------------------------------

</member><member name="M:EwEPlugin.cPluginException.#ctor(EwEPlugin.cPluginAssembly,System.String)">
 ---------------------------------------------------------------------------
 <summary>
 Constructor, initializes a new instance of a cPluginException.
 </summary>
	<param name="strMessage"></param>
	<param name="assembly"></param>
 ---------------------------------------------------------------------------

</member><member name="M:EwEPlugin.cPluginException.#ctor(EwEPlugin.cPluginAssembly,System.Exception)">
 ---------------------------------------------------------------------------
 <summary>
 Constructor, initializes a new instance of a cPluginException.
 </summary>
	<param name="exception"></param>
	<param name="assembly"></param>
 ---------------------------------------------------------------------------

</member><member name="P:EwEPlugin.cPluginException.Assembly">
 ---------------------------------------------------------------------------
 <summary>
 Get the assembly that caused the exception.
 </summary>
 ---------------------------------------------------------------------------

</member><member name="T:EwEPlugin.cPluginException">
 ---------------------------------------------------------------------------
 <summary>
 Plugin exception
 </summary>
 ---------------------------------------------------------------------------

</member><member name="F:EwEPlugin.cAutoUpdate.m_service">
	<summary>The update service.</summary>
</member><member name="F:EwEPlugin.cAutoUpdate.m_cookiejar">
	<summary>Update session cookies.</summary>
</member><member name="F:EwEPlugin.cAutoUpdate.m_strFile">
	<summary>Attached file name.</summary>
</member><member name="F:EwEPlugin.cAutoUpdate.m_verCore">
	<summary>Attached core version.</summary>
</member><member name="F:EwEPlugin.cAutoUpdate.m_verPlugin">
	<summary>Attached plug-in version.</summary>
</member><member name="F:EwEPlugin.cAutoUpdate.m_strPluginName">
	<summary>Attached plug-in short file name.</summary>
</member><member name="F:EwEPlugin.cAutoUpdate.m_strPluginToken">
	<summary>Attached plug-in public hash key token.</summary>
	<remarks>For strong-named assemblies only.</remarks>
</member><member name="M:EwEPlugin.cAutoUpdate.#ctor(System.Object)">
 -----------------------------------------------------------------------
 <summary>
 Constructor, initializes a new cAutoUpdate instance.
 </summary>
	<param name="core">The core assembly to download updates for.</param>
 -----------------------------------------------------------------------

</member><member name="M:EwEPlugin.cAutoUpdate.AttachAssembly(System.String)">
 -----------------------------------------------------------------------
 <summary>
 Attach a file to the updater.
 </summary>
	<param name="strFile"></param>
	<returns>True if this is a valid assembly.</returns>
 -----------------------------------------------------------------------

</member><member name="M:EwEPlugin.cAutoUpdate.CheckForUpdate">
 -----------------------------------------------------------------------
 <summary>
 Check for updates on the attached assembly.
 </summary>
	<para>An <see cref="T:EwEUtils.Core.eAutoUpdateResultTypes">update status</see>flag, which 
 is to be interpreted as follows:</para>
	<list type="table">
		<listheader><term>Flag</term><description>Description</description></listheader>
		<item>
			<term><see cref="F:EwEUtils.Core.eAutoUpdateResultTypes.Success_NoActionRequired"/></term>
			<description>Server was contacted successfully and no action is required.</description>
		</item>
		<item>
			<term><see cref="F:EwEUtils.Core.eAutoUpdateResultTypes.Success_Updated"/></term>
			<description>Server was contacted successfully and no action is required.</description>
		</item>
		<item>
			<term><see cref="F:EwEUtils.Core.eAutoUpdateResultTypes.Info_CanMigrate"/></term>
			<description>A migration from a weak-named to a strong-named assembly is available.</description>
		</item>
		<item>
			<term><see cref="F:EwEUtils.Core.eAutoUpdateResultTypes.Info_CanUpdate"/></term>
			<description>An update is available.</description>
		</item>
		<item>
			<term><see cref="F:EwEUtils.Core.eAutoUpdateResultTypes.Error_Connection"/></term>
			<description>Connection to update server could not be established.</description>
		</item>
		<item>
			<term><see cref="F:EwEUtils.Core.eAutoUpdateResultTypes.Error_Generic"/></term>
			<description>Something else went wrong.</description>
		</item>
	</list>
 -----------------------------------------------------------------------

</member><member name="M:EwEPlugin.cAutoUpdate.DownloadUpdate">
 -----------------------------------------------------------------------
 <summary>
 Download an update for a file.
 </summary>
	<returns>
		<para>An <see cref="T:EwEUtils.Core.eAutoUpdateResultTypes">update result indicator</see>,
 which are to be interpreted as follows:</para>
		<list type="table">
			<listheader><term>Flag</term><description>Description</description></listheader>
			<item>
				<term><see cref="F:EwEUtils.Core.eAutoUpdateResultTypes.Success_Updated"/></term>
				<description>Update was downloaded and copied succesfully.</description>
			</item>
			<item>
				<term><see cref="F:EwEUtils.Core.eAutoUpdateResultTypes.Error_Download"/></term>
				<description>Failed to correctly download the update.</description>
			</item>
			<item>
				<term><see cref="F:EwEUtils.Core.eAutoUpdateResultTypes.Error_Replace"/></term>
				<description>Failed to replace the local plug-in file with the downloaded file.</description>
			</item>
		</list>
	</returns>
 -----------------------------------------------------------------------

</member><member name="P:EwEPlugin.cAutoUpdate.CoreVersion(System.Object)">
 -----------------------------------------------------------------------
 <summary>
 Helper method, get the version of the core assembly.
 </summary>
	<param name="core">The core object to query the assembly for.</param>
 -----------------------------------------------------------------------

</member><member name="M:EwEPlugin.cAutoUpdate.HasMigration">
 -----------------------------------------------------------------------
 <summary>
 Helper method, states whether a migration is available for the attached 
 file.
 </summary>
	<returns>
		<para>This method will return one of the following values:</para>
		<list type="table">
			<item><term><see cref="F:EwEUtils.Core.eAutoUpdateResultTypes.Error_Connection"/></term><description>Server could not be connected.</description></item>
			<item><term><see cref="F:EwEUtils.Core.eAutoUpdateResultTypes.Info_CanUpdate"/></term><description>Server was contacted and a migration is available.</description></item>
			<item><term><see cref="F:EwEUtils.Core.eAutoUpdateResultTypes.Success_NoActionRequired"/></term><description>Server was contacted but no migration is available.</description></item>
		</list>
	</returns>
	<remarks>
 Note that this check should only be performed on weak-named assemblies.
 </remarks>
 -----------------------------------------------------------------------

</member><member name="M:EwEPlugin.cAutoUpdate.HasUpdate">
 -----------------------------------------------------------------------
 <summary>
 Helper method, states if an update is available for a given assembly.
 </summary>
	<returns>
		<para>This method will return one of the following values:</para>
		<list type="table">
			<item><term><see cref="F:EwEUtils.Core.eAutoUpdateResultTypes.Error_Connection"/></term><description>Server could not be connected.</description></item>
			<item><term><see cref="F:EwEUtils.Core.eAutoUpdateResultTypes.Info_CanUpdate"/></term><description>Server was contacted and an update is available.</description></item>
			<item><term><see cref="F:EwEUtils.Core.eAutoUpdateResultTypes.Success_NoActionRequired"/></term><description>Server was contacted but no update is available.</description></item>
		</list>
	</returns>
 -----------------------------------------------------------------------

</member><member name="T:EwEPlugin.cAutoUpdate">
 ===========================================================================
 <summary>
 Helper class to update a plug-in assembly from the EwE web service.
 </summary>
	<remarks>
		<para>The cAutoUpdate class should be used as follows:</para>
		<code>
		</code>
	</remarks>
 ===========================================================================

</member><member name="M:EwEPlugin.IEcosimModifyFGearPlugin.EcosimModifyFGear(System.Single[],System.Single[],System.Object,System.Int32)">
	<summary>
 Method that gets called when a Fishing Policy or MSE search is modifying Fishing Effort.
 </summary>
	<param name="FGear">Array of Relative Fishing Effort dimensioned by fleet for the current timestep.</param>
	<param name="BB">Array of Biomass by group for the current timestep</param>
	<param name="EcosimDataStructures">Reference to the current EcosimDataStructures passed as an object.</param>
	<param name="CurrentTimeStepIndex">Current timestep index.</param>
	<remarks>At this time this only changes effort during a search there is no easy way to change effort during a normal run. </remarks>
</member><member name="T:EwEPlugin.IEcosimModifyFGearPlugin">
	<summary>
 Plugin Point to modify Ecosim Fishing Effort during a MSE or Fishing Policy Search.
 </summary>
	<remarks>This will not modify effort during a normal Ecosim run.</remarks>
</member><member name="M:EwEPlugin.cPluginAutolaunchHandler.#ctor(EwEPlugin.cPluginManager,EwEUtils.Commands.cCommandHandler)">
 -----------------------------------------------------------------------
 <summary>
 Constructor, initializes a new instance of a cPluginAutolaunchHandler.
 </summary>
	<param name="pm"><see cref="T:EwEPlugin.cPluginManager">Plugin manager</see>
 that holds the plugins to launch.</param>
 -----------------------------------------------------------------------

</member><member name="M:EwEPlugin.cPluginAutolaunchHandler.EnablePlugin(EwEPlugin.IGUIPlugin,System.Boolean)">
 -----------------------------------------------------------------------
 <summary>
 Overridden with emtpy method to comply to base class.
 </summary>
 -----------------------------------------------------------------------

</member><member name="M:EwEPlugin.cPluginAutolaunchHandler.PlacePlugin(EwEPlugin.IGUIPlugin,System.Boolean)">
 -----------------------------------------------------------------------
 <summary>
 Overridden with emtpy method to comply to base class.
 </summary>
 -----------------------------------------------------------------------

</member><member name="M:EwEPlugin.cPluginAutolaunchHandler.LaunchPlugins">
 -----------------------------------------------------------------------
 <summary>
 Launch all <see cref="T:EwEPlugin.IAutolaunchPlugin">Auto-launchable plug-ins.</see>
	</summary>
 -----------------------------------------------------------------------

</member><member name="T:EwEPlugin.cPluginAutolaunchHandler">
 ===========================================================================
 <summary>
 Helper class, launches all Auto-launchable plug-ins.
 </summary>
 ===========================================================================

</member><member name="M:EwEPlugin.ICorePlugin.CoreInitialized(System.Object@,System.Object@,System.Object@)">
	<summary>
 The core has loaded a model and initialized its internal data
 </summary>
	<param name="objEcoPath">The Ecopath model</param>
	<param name="objEcoSim">The Ecosim model</param>
	<param name="objEcoSpace">The Ecospace model</param>
</member><member name="T:EwEPlugin.ICorePlugin">
 ===========================================================================
 <summary>
 Interface for a plug-in that is invoked when the EwE Core loads the three main
 models Ecopath, Ecosim and Ecospace. Plug-in points in this interface
 will allow an implementing plug-in to obtain a reference to the three models.
 </summary>
 ===========================================================================

</member><member name="M:EwEPlugin.Data.IDataConsumerPlugin.ReceiveData(System.String,EwEPlugin.Data.IPluginData)">
 -----------------------------------------------------------------------
 <summary>
 Interface to receive data originating from 
 <see cref="M:EwEPlugin.Data.IDataBroadcaster.BroadcastData(System.String,EwEPlugin.Data.IPluginData)">IDataBroadcaster.BroadcastData</see>.
 </summary>
	<param name="strDataName">Name of the data that is being broadcasted.</param>
	<param name="data">The <see cref="T:EwEPlugin.Data.IPluginData">data</see> that is being 
 broadcasted.</param>
 -----------------------------------------------------------------------

</member><member name="T:EwEPlugin.Data.IDataConsumerPlugin">
 ---------------------------------------------------------------------------
 <summary>
 Interface for implementing a plugin point that is able to receive broadcasted
 data.
 </summary>
 ---------------------------------------------------------------------------

</member><member name="P:EwEPlugin.My.Resources.Resources.ResourceManager">
	<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member><member name="P:EwEPlugin.My.Resources.Resources.Culture">
	<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member><member name="P:EwEPlugin.My.Resources.Resources.PLUGIN_ERROR_GENERIC">
	<summary>
  Looks up a localized string similar to Plug-in assembly '{0}' has caused error '{1}'.
</summary>
</member><member name="P:EwEPlugin.My.Resources.Resources.PLUGIN_ERROR_POINT">
	<summary>
  Looks up a localized string similar to Plug-in '{0}', module '{1}', method '{2}' reports the following error: '{3}'.
</summary>
</member><member name="P:EwEPlugin.My.Resources.Resources.PLUGIN_EXCEPTION_DUPLICATE">
	<summary>
  Looks up a localized string similar to Duplicate plug-in name '{1}' encountered in '{0}'; this plug-in should not be used..
</summary>
</member><member name="T:EwEPlugin.My.Resources.Resources">
	<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member><member name="M:EwEPlugin.IEcospaceBeginTimestepPostPlugin.EcospaceBeginTimeStepPost(System.Object,System.Int32)">
	<summary>
 Begin of an Ecospace time step, invoked after all <see cref="M:EwEPlugin.IEcosimBeginTimestepPlugin.EcosimBeginTimeStep(System.Single[]@,System.Object,System.Int32)">IEcosimBeginTimestepPlugin.EcosimBeginTimeStep</see> calls have been made.
 </summary>
	<param name="EcospaceDatastructures">Ecospace data structures.</param>
	<param name="iTime">Cumulative time step.</param>
</member><member name="T:EwEPlugin.IEcospaceBeginTimestepPostPlugin">
 ---------------------------------------------------------------------------
 <summary>
 Interface for extending the Ecospace end time step logic. Plug-ins of this
 type are invoked as soon as the EwE Core has finished its calculatios
 of an Ecospace time step, and after all IEcospaceBeginTimestepPlugin points
 have been called.
 </summary>
 ---------------------------------------------------------------------------

</member><member name="T:EwEPlugin.IDisposedPlugin">
 ---------------------------------------------------------------------------
 <summary>
 Interface for implementing a plug-in that is explicitly de-initialized.
 </summary>
 ---------------------------------------------------------------------------

</member><member name="F:EwEPlugin.cPluginGUIHandler.m_pm">
	<summary>The plugin manager that holds the plugins to manage.</summary>
</member><member name="F:EwEPlugin.cPluginGUIHandler.m_cmdh">
	<summary>The command handler to interact with.</summary>
</member><member name="M:EwEPlugin.cPluginGUIHandler.#ctor(EwEPlugin.cPluginManager,EwEUtils.Commands.cCommandHandler)">
 -----------------------------------------------------------------------
 <summary>
 Construct a new cPluginGUIHandler.
 </summary>
	<param name="pm"></param>
	<param name="cmdh"></param>
 -----------------------------------------------------------------------

</member><member name="M:EwEPlugin.cPluginGUIHandler.Dispose">
 -----------------------------------------------------------------------
 <summary>
 Detach from live objects.
 </summary>
 -----------------------------------------------------------------------

</member><member name="P:EwEPlugin.cPluginGUIHandler.PluginManager">
 -----------------------------------------------------------------------
 <summary>
 Get/set the <see cref="T:EwEPlugin.cPluginManager">plug-in manager</see> for this handler.
 </summary>
 -----------------------------------------------------------------------

</member><member name="P:EwEPlugin.cPluginGUIHandler.CommandHandler">
 -----------------------------------------------------------------------
 <summary>
 Get/set the <see cref="T:EwEUtils.Commands.cCommandHandler">command handler</see> for this 
 handler to use.
 </summary>
 -----------------------------------------------------------------------

</member><member name="M:EwEPlugin.cPluginGUIHandler.OnAssemblyAdded(EwEPlugin.cPluginAssembly)">
 -----------------------------------------------------------------------
 <summary>
 Event handler, called when a <see cref="T:EwEPlugin.cPluginAssembly">plugin assembly</see>
 is added to the <see cref="T:EwEPlugin.cPluginManager">plugin manager</see>.
 </summary>
	<param name="pa">The added plugin assembly.</param>
 -----------------------------------------------------------------------

</member><member name="M:EwEPlugin.cPluginGUIHandler.OnAssemblyRemoved(EwEPlugin.cPluginAssembly)">
 -----------------------------------------------------------------------
 <summary>
 Event handler, called when a <see cref="T:EwEPlugin.cPluginAssembly">plugin assembly</see>
 is removed from the <see cref="T:EwEPlugin.cPluginManager">plugin manager</see>.
 </summary>
	<param name="pa">The removed plugin assembly.</param>
 -----------------------------------------------------------------------

</member><member name="M:EwEPlugin.cPluginGUIHandler.ActivateAssembly(EwEPlugin.cPluginAssembly,System.Boolean)">
 -----------------------------------------------------------------------
 <summary>
 Event handler, responds to a plugin assembly enabled state change.
 </summary>
	<param name="pa">The <see cref="T:EwEPlugin.cPluginAssembly">plugin assembly</see>
 that changed enabled state.</param>
	<param name="bEnabled">The new <see cref="P:EwEPlugin.cPluginAssembly.Enabled">Enabled</see>
 state.</param>
 -----------------------------------------------------------------------

</member><member name="M:EwEPlugin.cPluginGUIHandler.PlacePlugin(EwEPlugin.IGUIPlugin,System.Boolean)">
 -----------------------------------------------------------------------
 <summary>
 Place or remove a GUI plugin item.
 </summary>
	<param name="ip">The <see cref="T:EwEPlugin.IGUIPlugin">IGUIPlugin</see> to place.</param>
	<param name="bPlace">States whether the item for the plugin should be placed (True)
 or removed (False).</param>
 -----------------------------------------------------------------------

</member><member name="M:EwEPlugin.cPluginGUIHandler.EnablePlugin(EwEPlugin.IGUIPlugin,System.Boolean)">
 -----------------------------------------------------------------------
 <summary>
 Set the enabled state of a GUI plugin item.
 </summary>
	<param name="ip">The <see cref="T:EwEPlugin.IGUIPlugin">IGUIPlugin</see> to affect.</param>
	<param name="bEnable">States whether the plugin should be enabled (True) or
 or disabled (False).</param>
 -----------------------------------------------------------------------

</member><member name="M:EwEPlugin.cPluginGUIHandler.SortPlugins(EwEPlugin.IGUIPlugin[])">
 -----------------------------------------------------------------------
 <summary>
 Sort all plug-ins in a plug-in assembly for proper ordering.
 </summary>
	<param name="aip">An array of plug-ins to sort.</param>
	<returns>An array of sorted plug-ins.</returns>
	<remarks>
 This method is useful when adding or removing a series of hierarchical 
 UI plug-ins with a hierarchical structure, such as menu items or navigation
 tree nodes.
 </remarks>
 -----------------------------------------------------------------------

</member><member name="T:EwEPlugin.cPluginGUIHandler">
 -----------------------------------------------------------------------
 <summary>
 GUI utility class, handles the placement of <see cref="T:EwEPlugin.IGUIPlugin">IGUIPlugin</see>-
 derived plugins in the menu structure of a <see cref="T:System.Windows.Forms.Form">Form</see>.
 </summary>
 -----------------------------------------------------------------------

</member><member name="M:EwEPlugin.IEcosimSubTimestepsPlugin.EcosimSubTimeStepBegin(System.Single[]@,System.Single,System.Single,System.Int32,System.Object)">
	<summary>
 Plugin point called at the start of each sub timestep by Ecosim
 </summary>
	<param name="BiomassAtTimestep">Biomass at the start of the sub timestep</param>
	<param name="TimeInYears">Time of the current sub timestep in years</param>
	<param name="DeltaT">Delta t of the timestep</param>
	<param name="SubTimestepIndex">Index of the current sub timestep 1 to cEcosimDatastructures.StepsPerMonth</param>
	<param name="EcosimDatastructures">Ecosim data structures cEcosimDatastructures cast to an object</param>
	<remarks> 
 In Ecosim the number of sub time steps to run per month is set via the cEcosimDatastructures.StepsPerMonth with a default of one.
 EcosimSubTimeStepBegin() is called once at the start of each Ecosim sub timestep. 
 A sub timestep only runs the numeric integration routine (rk4) and does not call the timestep delegate passed to cCore.RunEcosim(EcoSimTimeStepDelegate) 
 or set any of the Core's Ecosim output objects e.g. cCore.EcosimGroupOutputs will not be update to the values of the new sub timestep. 
 Only values used in the calculation of the sub timestep will be updated(the EcosimDatastructures argument).
 </remarks>
</member><member name="M:EwEPlugin.IEcosimSubTimestepsPlugin.EcosimSubTimeStepEnd(System.Single[]@,System.Single,System.Single,System.Int32,System.Object)">
	<summary>
 Plugin point called at the end of each sub timestep by Ecosim
 </summary>
	<param name="BiomassAtTimestep">Biomass at the end of the sub timestep</param>
	<param name="TimeInYears">Time of the current sub timestep in years</param>
	<param name="DeltaT">Delta t of the timestep</param>
	<param name="SubTimestepIndex">Index of the current sub timestep 1 to cEcosimDatastructures.StepsPerMonth</param>
	<param name="EcosimDatastructures">Ecosim data structures cEcosimDatastructures cast to an object</param>
	<remarks> 
 In Ecosim the number of sub time steps to run per month is set via the cEcosimDatastructures.StepsPerMonth with a default of one.
 EcosimSubTimeStepEnd() is called once at the end of each Ecosim sub timestep. 
 A sub timestep only runs the numeric integration routine (rk4) and does not call the timestep delegate passed to cCore.RunEcosim(EcoSimTimeStepDelegate) 
 or set any of the Core's Ecosim output objects e.g. cCore.EcosimGroupOutputs will not be update to the values of the new sub timestep. 
 Only values used in the calculation of the sub timestep will be updated(the EcosimDatastructures argument).
 </remarks>
</member><member name="T:EwEPlugin.IEcosimSubTimestepsPlugin">
	<summary>
 Plugin points for begin and end of Ecosim sub timesteps. 
 </summary>
	<remarks>
 Monthly timesteps in Ecosim can be divided into multiple sub timesteps. The number of sub timesteps in set via the cEcosimDatastructures.StepsPerMonth which has a default of one.  
 This allows a plugin to run Ecosim with more then 12 timesteps per year. Once Ecosim has run it will reset cEcosimDatastructures.StepsPerMonth to its default value of one 
 all subsequent runs of Ecosim will be on a monthly timestep unless cEcosimDatastructures.StepsPerMonth has been set after the run. 
 This funtionality is only available via code and has no user interface. 
 User interface objects e.g. cCore.EcosimGroupOutputs are NOT update for sub timesteps and will not be updated until the end of the monthly timestep.
 </remarks>
</member><member name="F:EwEPlugin.cPluginManager.cPluginContext.m_plugin">
	<summary>Plug-in point.</summary>
</member><member name="F:EwEPlugin.cPluginManager.cPluginContext.m_assembly">
	<summary>Plug-in assembly this point was found in.</summary>
</member><member name="M:EwEPlugin.cPluginManager.cPluginContext.#ctor(EwEPlugin.IPlugin,EwEPlugin.cPluginAssembly)">
 -------------------------------------------------------------------
 <summary>
 Hatch me one, me harties!
 </summary>
	<param name="plugin"></param>
	<param name="assembly"></param>
 -------------------------------------------------------------------

</member><member name="P:EwEPlugin.cPluginManager.cPluginContext.Plugin">
 -------------------------------------------------------------------
 <summary>
 Get the plug-in point.
 </summary>
 -------------------------------------------------------------------

</member><member name="P:EwEPlugin.cPluginManager.cPluginContext.Assembly">
 -------------------------------------------------------------------
 <summary>
 Get the plug-in assembly that contains the <see cref="P:EwEPlugin.cPluginManager.cPluginContext.Plugin">plug-in</see>.
 </summary>
 -------------------------------------------------------------------

</member><member name="T:EwEPlugin.cPluginManager.cPluginContext">
 -----------------------------------------------------------------------
 <summary>
 Helper class, used to report the link between a plug-in and its assambly.
 </summary>
	<remarks>
 Yes, you don't have to say it. You are totally right. This class is 
 utterly obsolete if the reflection library is properly used, but hey.
 </remarks>
 -----------------------------------------------------------------------

</member><member name="T:EwEPlugin.cPluginManager.cInvokeMethodInfo">
 -----------------------------------------------------------------------
 <summary>
 Yet another helper class. This one serves to pass function parameter
 info to InvokeMethod on a different thread.
 </summary>
 -----------------------------------------------------------------------

</member><member name="M:EwEPlugin.cPluginManager.cPluginSettings.DefaultDocument">
 -------------------------------------------------------------------
 <summary>
 Create a default XML document for storing settings.
 </summary>
	<returns>A default XML document for storing settings.</returns>
 -------------------------------------------------------------------

</member><member name="M:EwEPlugin.cPluginManager.cPluginSettings.GetSettings(System.Xml.XmlDocument,EwEPlugin.ISettingsPlugin)">
 -------------------------------------------------------------------
 <summary>
 Returns the settings node for a given IConfigurablePersistPlugin plug-in.
 </summary>
	<param name="pi"></param>
	<returns></returns>
 -------------------------------------------------------------------

</member><member name="M:EwEPlugin.cPluginManager.cPluginSettings.ToValidNodeName(EwEPlugin.ISettingsPlugin)">
 -------------------------------------------------------------------
 <summary>
 Generate a name for a plug-in name.
 </summary>
	<param name="ip">Settings plug-in to return a node name for.</param>
	<returns>A node name</returns>
 -------------------------------------------------------------------

</member><member name="T:EwEPlugin.cPluginManager.cPluginSettings">
 -----------------------------------------------------------------------
 <summary>
 Helper class to create and return XML nodes for any <see cref="T:EwEPlugin.ISettingsPlugin">ISettingsPlugin</see>
 in the framework managed settings XML document.
 </summary>
 -----------------------------------------------------------------------

</member><member name="F:EwEPlugin.cPluginManager.m_core">
	<summary>The one core for this plugin manager.</summary>
</member><member name="F:EwEPlugin.cPluginManager.m_uic">
	<summary>The one UI context for this plug-in manager.</summary>
</member><member name="F:EwEPlugin.cPluginManager.m_dlgtCoreState">
	<summary>Delegate that this class can use to check whether the current 
 core execution state allows a plug-in to run.</summary>
</member><member name="F:EwEPlugin.cPluginManager.m_sync">
	<summary>Sync object to marshall plug-in calls across threads.</summary>
</member><member name="F:EwEPlugin.cPluginManager.m_ThreadID">
	<summary>Id of the thread that create the plugin manager used to decide
 if the sync object should be used to marshall plug-in calls across threads.</summary>
</member><member name="F:EwEPlugin.cPluginManager.m_settingsDoc">
	<summary>Plug-in settings document.</summary>
</member><member name="F:EwEPlugin.cPluginManager.m_bLoaded">
	<summary>Flag stating whether plug-ins have been loaded.</summary>
</member><member name="P:EwEPlugin.cPluginManager.Core">
 ---------------------------------------------------------------------------
 <summary>
 Assign an EwECore to the plugin manager. This core will be used to 
 initialize plugins when they are loaded.
 </summary>
 ---------------------------------------------------------------------------

</member><member name="P:EwEPlugin.cPluginManager.UIContext">
 ---------------------------------------------------------------------------
 <summary>
 Assign an UI Context to the plugin manager. This context will be passed to
 any plug-in that requires this interface at startup.
 </summary>
 ---------------------------------------------------------------------------

</member><member name="P:EwEPlugin.cPluginManager.CoreExecutionStateDelegate">
 ---------------------------------------------------------------------------
 <summary>
 Get/set the delegate that the plug-in can invoke to test whether a plug-in
 is allowed to execute.
 </summary>
 ---------------------------------------------------------------------------

</member><member name="P:EwEPlugin.cPluginManager.SyncObject">
 ---------------------------------------------------------------------------
 <summary>
 Get/set the cross-threading synchronization context.
 </summary>
 ---------------------------------------------------------------------------

</member><member name="P:EwEPlugin.cPluginManager.DisabledPlugins">
 ---------------------------------------------------------------------------
 <summary>
 Get an arraylist with names of all plug-in assemblies that are the user has
 marked as 'disabled'.
 </summary>
 ---------------------------------------------------------------------------

</member><member name="T:EwEPlugin.cPluginManager.OnConfirmOverwrite">
 -----------------------------------------------------------------------
 <summary>
 Delegate to implement plug-in overwrite confirmation handling.
 </summary>
	<param name="strPlugin">The short name of the plug-in to overwrite.</param>
	<returns>True if the plug-in can be overwritten.</returns>
 -----------------------------------------------------------------------

</member><member name="M:EwEPlugin.cPluginManager.UpdatePlugins(EwEPlugin.cPluginManager.OnConfirmOverwrite)">
 -----------------------------------------------------------------------
 <summary>
 Attempt to update all plug-in assemblies.
 </summary>
	<param name="dlgOverwrite"><see cref="T:EwEPlugin.cPluginManager.OnConfirmOverwrite">Delegate</see> 
 for the calling process to implement an overwrite confirmation for possible 
 conflicts.</param>
	<returns>True if successful.</returns>
 -----------------------------------------------------------------------

</member><member name="F:EwEPlugin.cPluginManager.m_dictAssemblies">
	<summary>Dictionary of <see cref="T:EwEPlugin.cPluginAssembly">Plugin assemblies</see>.</summary>
</member><member name="M:EwEPlugin.cPluginManager.LoadPlugins(System.Collections.ArrayList)">
 -----------------------------------------------------------------------
 <summary>
 Load all plug-ins that are not marked as 'disabled'.
 </summary>
	<param name="alDisabledPlugins">Optional ArrayList of file names to 
 plug-ins that should NOT be enabled. These assemblies will still have to 
 be known by the manager in case the user wants to enable the assemblies 
 in the future.</param>
 -----------------------------------------------------------------------

</member><member name="M:EwEPlugin.cPluginManager.LoadPluginAssembly(System.String,System.Boolean)">
 -----------------------------------------------------------------------
 <summary>
 Load EwE plugins from a file.
 </summary>
	<param name="strFileName">The file name to load plugins from.</param>
	<param name="bEnable">Flag stating that the plug-in is allowed to load.</param>
	<returns>True if this assembly was loaded and contained plugins.</returns>
 -----------------------------------------------------------------------

</member><member name="M:EwEPlugin.cPluginManager.UnloadPluginAssembly(System.String)">
 -----------------------------------------------------------------------
 <summary>
 Unload a plugin file.
 </summary>
	<param name="strFileName">The file name to unload.</param>
	<returns>True if unloaded succesfully.</returns>
 -----------------------------------------------------------------------

</member><member name="T:EwEPlugin.cPluginManager.AssemblyUpdatedHandler">
 -----------------------------------------------------------------------
 <summary>
 Assembly update finished delegate.
 </summary>
	<param name="strName">The name of the plugin that was  updated.</param>
	<param name="result">Update <see cref="T:EwEUtils.Core.eAutoUpdateResultTypes">result</see>.</param>
 -----------------------------------------------------------------------

</member><member name="E:EwEPlugin.cPluginManager.AssemblyUpdated">
 -----------------------------------------------------------------------
 <summary>
 Assembly update finished handler.
 </summary>
 -----------------------------------------------------------------------

</member><member name="T:EwEPlugin.cPluginManager.AssemblyUpdatingHandler">
 -----------------------------------------------------------------------
 <summary>
 Assembly update in progress delegate.
 </summary>
	<param name="strName">The name of the plugin that is being updated.</param>
	<param name="sProgress">Update progress.</param>
 -----------------------------------------------------------------------

</member><member name="E:EwEPlugin.cPluginManager.AssemblyUpdating">
 -----------------------------------------------------------------------
 <summary>
 Assembly update in progress handler.
 </summary>
 -----------------------------------------------------------------------

</member><member name="T:EwEPlugin.cPluginManager.AssemblyAddedHandler">
 -----------------------------------------------------------------------
 <summary>
 Assembly added delegate.
 </summary>
	<param name="paAdded">The add plugin assembly.</param>
 -----------------------------------------------------------------------

</member><member name="E:EwEPlugin.cPluginManager.AssemblyAdded">
 -----------------------------------------------------------------------
 <summary>
 Assembly added event.
 </summary>
 -----------------------------------------------------------------------

</member><member name="T:EwEPlugin.cPluginManager.AssemblyRemovedHandler">
 -----------------------------------------------------------------------
 <summary>
 Assembly removed delegate.
 </summary>
	<param name="paRemoved">The add plugin assembly.</param>
 -----------------------------------------------------------------------

</member><member name="E:EwEPlugin.cPluginManager.AssemblyRemoved">
 -----------------------------------------------------------------------
 <summary>
 Assembly removed event.
 </summary>
 -----------------------------------------------------------------------

</member><member name="T:EwEPlugin.cPluginManager.PluginExceptionHandler">
 -----------------------------------------------------------------------
 <summary>
 A plugin has thrown an exception delegate.
 </summary>
 -----------------------------------------------------------------------

</member><member name="E:EwEPlugin.cPluginManager.PluginException">
 -----------------------------------------------------------------------
 <summary>
 A plugin has thrown an exception.
 </summary>
 -----------------------------------------------------------------------

</member><member name="T:EwEPlugin.cPluginManager.PluginEnabledHandler">
 -----------------------------------------------------------------------
 <summary>
 A plugin enabled state change delegate.
 </summary>
 -----------------------------------------------------------------------

</member><member name="E:EwEPlugin.cPluginManager.PluginEnabled">
 -----------------------------------------------------------------------
 <summary>
 A plugin enabled state has changed.
 </summary>
 -----------------------------------------------------------------------

</member><member name="M:EwEPlugin.cPluginManager.CoreInitialized(System.Object,System.Object,System.Object)">
 ---------------------------------------------------------------------------
 <summary>
 Bridge, invokes the Core Initialized plugin point on any available and responsive 
 <see cref="T:EwEPlugin.ICorePlugin">ICorePlugin plug-in</see>.
 </summary>
	<param name="objEcoPath"></param>
	<param name="objEcoSim"></param>
	<param name="objEcoSpace"></param>
	<returns>True if succesful.</returns>
 ---------------------------------------------------------------------------

</member><member name="M:EwEPlugin.cPluginManager.DataValidated(EwEUtils.Core.eVarNameFlags,EwEUtils.Core.eDataTypes)">
 ---------------------------------------------------------------------------
 <summary>
 Bridge, invokes the <see cref="M:EwEPlugin.IDataValidatedPlugin.DataValidated(EwEUtils.Core.eVarNameFlags,EwEUtils.Core.eDataTypes)">DataValidated</see>
 plugin point on any available and responsive <see cref="T:EwEPlugin.IDataValidatedPlugin">IDataValidatedPlugin</see>
 plug-in.
 </summary>
	<param name="varname"></param>
	<param name="datatype"></param>
	<returns>True if succesful.</returns>
 ---------------------------------------------------------------------------

</member><member name="M:EwEPlugin.cPluginManager.LoadModel(System.Object)">
 ---------------------------------------------------------------------------
 <summary>
 Bridge, invokes the Load plug-in point on any available and responsive 
 <see cref="T:EwEPlugin.IEcopathPlugin">Ecopath plug-in</see>.
 </summary>
	<param name="dataSource">The datasource that invoked this plug-in point.</param>
	<remarks>Due to avoid circular references, this project is unable to reference
 the assembly EwECore. As such, links in this help text cannot be resolved.
 Refer to the EwE Datasource documentation for calling conventions and 
 proper parameter usage.</remarks>
 ---------------------------------------------------------------------------

</member><member name="M:EwEPlugin.cPluginManager.SaveModel(System.Object)">
 ---------------------------------------------------------------------------
 <summary>
 Bridge, invokes the Save plug-in point on any available and responsive 
 <see cref="T:EwEPlugin.IEcopathPlugin">Ecopath plug-in</see>.
 </summary>
	<param name="dataSource">The datasource that invoked this plug-in point.</param>
	<remarks>Due to avoid circular references, this project is unable to reference
 the assembly EwECore. As such, links in this help text cannot be resolved.
 Refer to the EwE Datasource documentation for calling conventions and 
 proper parameter usage.</remarks>
 ---------------------------------------------------------------------------

</member><member name="M:EwEPlugin.cPluginManager.CloseModel">
 ---------------------------------------------------------------------------
 <summary>
 Bridge, invokes the Closed plug-in point on any available and responsive 
 <see cref="T:EwEPlugin.IEcopathClosedPlugin">Ecopath closed plug-in</see>.
 </summary>
	<remarks>Due to avoid circular references, this project is unable to reference
 the assembly EwECore. As such, links in this help text cannot be resolved.
 Refer to the EwE Datasource documentation for calling conventions and 
 proper parameter usage.</remarks>
 ---------------------------------------------------------------------------

</member><member name="M:EwEPlugin.cPluginManager.IsDatabaseModified(EwEPlugin.cPluginAssembly)">
 ---------------------------------------------------------------------------
 <summary>
 Bridge, polls all plug-ins for unsaved data modifications.
 </summary>
	<param name="pa">cPluginAssembly to check, if any.</param>
 ---------------------------------------------------------------------------

</member><member name="M:EwEPlugin.cPluginManager.CloseDatabase">
 ---------------------------------------------------------------------------
 <summary>
 Bridge, close a plug-in data link.
 </summary>
 ---------------------------------------------------------------------------

</member><member name="M:EwEPlugin.cPluginManager.MassBalance(System.Object,System.Int32,System.Int32@)">
 ---------------------------------------------------------------------------
 <summary>
 Bridge, invokes the MassBalance plug-in point on any available and responsive 
 <see cref="T:EwEPlugin.IEcopathPlugin">Ecopath plug-in</see>.
 </summary>
	<param name="EcoPathDataStructures">Ecopath data structure, required for the 
 mass balance calculation.</param>
	<param name="EstimateFor">Purpose of invocation, required for the mass
 balance calculation.</param>
	<param name="iResult">Mass Balance calculation result.</param>
	<returns>True if a MassBalance plugin was executed succesfully.</returns>
	<remarks>Due to avoid circular references, this project is unable to reference
 the assembly EwECore. As such, links in this help text cannot be resolved.
 Refer to the EwE Core MassBalance documentation for calling conventions and 
 proper parameter usage.</remarks>
 ---------------------------------------------------------------------------

</member><member name="M:EwEPlugin.cPluginManager.LoadEcosimScenario(System.Object)">
 ---------------------------------------------------------------------------
 <summary>
 Bridge, invokes the LoadEcosimScenario plug-in point on any available and responsive 
 <see cref="T:EwEPlugin.IEcosimPlugin">Ecosim plug-in</see>.
 </summary>
	<param name="dataSource">The datasource that invoked this plug-in point.</param>
	<remarks>Due to avoid circular references, this project is unable to reference
 the assembly EwECore. As such, links in this help text cannot be resolved.
 Refer to the EwE Datasource documentation for calling conventions and 
 proper parameter usage.</remarks>
 ---------------------------------------------------------------------------

</member><member name="M:EwEPlugin.cPluginManager.SaveEcosimScenario(System.Object)">
 ---------------------------------------------------------------------------
 <summary>
 Bridge, invokes the SaveEcosimScenario plug-in point on any available and responsive 
 <see cref="T:EwEPlugin.IEcosimPlugin">Ecosim plug-in</see>.
 </summary>
	<param name="dataSource">The datasource that invoked this plug-in point.</param>
	<remarks>Due to avoid circular references, this project is unable to reference
 the assembly EwECore. As such, links in this help text cannot be resolved.
 Refer to the EwE Datasource documentation for calling conventions and 
 proper parameter usage.</remarks>
 ---------------------------------------------------------------------------

</member><member name="M:EwEPlugin.cPluginManager.LoadEcospaceScenario(System.Object)">
 ---------------------------------------------------------------------------
 <summary>
 Bridge, invokes the LoadEcospaceScenario plug-in point on any available and responsive 
 <see cref="T:EwEPlugin.IEcospacePlugin">Ecospace plug-in</see>.
 </summary>
	<param name="dataSource">The datasource that invoked this plug-in point.</param>
	<remarks>Due to avoid circular references, this project is unable to reference
 the assembly EwECore. As such, links in this help text cannot be resolved.
 Refer to the EwE Datasource documentation for calling conventions and 
 proper parameter usage.</remarks>
 ---------------------------------------------------------------------------

</member><member name="M:EwEPlugin.cPluginManager.EcospaceInitialized(System.Object)">
 ---------------------------------------------------------------------------
 <summary>
 Invokes right after LoadEcospaceScenario
 </summary>
	<param name="EcospaceDatastructures"></param>
	<returns>True if succesful.</returns>
	<remarks>Due to avoid circular references, this project is unable to reference
 the assembly EwECore. As such, links in this help text cannot be resolved.
 Refer to the EwE Datasource documentation for calling conventions and 
 proper parameter usage.</remarks>
 ---------------------------------------------------------------------------

</member><member name="M:EwEPlugin.cPluginManager.SaveEcospaceScenario(System.Object)">
 ---------------------------------------------------------------------------
 <summary>
 Bridge, invokes the SaveEcospaceScenario plug-in point on any available and responsive 
 <see cref="T:EwEPlugin.IEcospacePlugin">Ecospace plug-in</see>.
 </summary>
	<param name="dataSource">The datasource that invoked this plug-in point.</param>
	<remarks>Due to avoid circular references, this project is unable to reference
 the assembly EwECore. As such, links in this help text cannot be resolved.
 Refer to the EwE Datasource documentation for calling conventions and 
 proper parameter usage.</remarks>
 ---------------------------------------------------------------------------

</member><member name="M:EwEPlugin.cPluginManager.LoadEcotracerScenario(System.Object)">
 ---------------------------------------------------------------------------
 <summary>
 Bridge, invokes the LoadEcotracerScenario plug-in point on any available and responsive 
 <see cref="T:EwEPlugin.IEcotracerPlugin">Ecotracer plug-in</see>.
 </summary>
	<param name="dataSource">The datasource that invoked this plug-in point.</param>
	<remarks>Due to avoid circular references, this project is unable to reference
 the assembly EwECore. As such, links in this help text cannot be resolved.
 Refer to the EwE Datasource documentation for calling conventions and 
 proper parameter usage.</remarks>
 ---------------------------------------------------------------------------

</member><member name="M:EwEPlugin.cPluginManager.EcotracerInitialized(System.Object)">
 ---------------------------------------------------------------------------
 <summary>
 Invokes right after LoadEcotracerScenario
 </summary>
	<param name="EcotracerDatastructures"></param>
	<returns></returns>
	<remarks></remarks>
 ---------------------------------------------------------------------------

</member><member name="M:EwEPlugin.cPluginManager.SaveEcotracerScenario(System.Object)">
 ---------------------------------------------------------------------------
 <summary>
 Bridge, invokes the SaveEcotracerScenario plug-in point on any available and responsive 
 <see cref="T:EwEPlugin.IEcotracerPlugin">Ecotracer plug-in</see>.
 </summary>
	<param name="dataSource">The datasource that invoked this plug-in point.</param>
	<remarks>Due to avoid circular references, this project is unable to reference
 the assembly EwECore. As such, links in this help text cannot be resolved.
 Refer to the EwE Datasource documentation for calling conventions and 
 proper parameter usage.</remarks>
 ---------------------------------------------------------------------------

</member><member name="M:EwEPlugin.cPluginManager.BroadcastData(System.String,EwEPlugin.Data.IPluginData)">
 -----------------------------------------------------------------------
 <summary>
 Exchange data from a <see cref="T:EwEPlugin.Data.IDataProducerPlugin">data producer plug-in</see>
 to any interested <see cref="T:EwEPlugin.Data.IDataConsumerPlugin">data consumer plug-in</see>.
 </summary>
	<param name="data">The <see cref="T:EwEPlugin.Data.IPluginData">data</see> to exchange.</param>
	<returns>True if broadcast succeeded.</returns>
 -----------------------------------------------------------------------

</member><member name="M:EwEPlugin.cPluginManager.IsDataAvailable(System.String,EwEUtils.Core.IRunType)">
 -----------------------------------------------------------------------
 <summary>
 Query whether any loaded <see cref="T:EwEPlugin.Data.IDataProducerPlugin">IDataProducerPlugin</see>
 exposes <see cref="T:EwEPlugin.Data.IPluginData">plug-in data</see> under a given name.
 </summary>
	<param name="strDataName">The name of the data to match.</param>
	<param name="runType">Run type that the data is requested for, or
 Null if the run type is irrelevant.</param>
	<returns>True if the requested data is available.</returns>
 -----------------------------------------------------------------------

</member><member name="M:EwEPlugin.cPluginManager.IsDataAvailable(System.Type,EwEUtils.Core.IRunType)">
 -----------------------------------------------------------------------
 <summary>
 Query whether any loaded <see cref="T:EwEPlugin.Data.IDataProducerPlugin">IDataProducerPlugin</see>
 exposes <see cref="T:EwEPlugin.Data.IPluginData">plug-in data</see> of a given type.
 </summary>
	<param name="dataType">The type of the data to match.</param>
	<param name="runType">Run type that the data is requested for, or
 Null if the run type is irrelevant.</param>
	<returns>True if the requested data is available.</returns>
 -----------------------------------------------------------------------

</member><member name="M:EwEPlugin.cPluginManager.GetData(System.Type)">
 -----------------------------------------------------------------------
 <summary>
 Get all <see cref="T:EwEPlugin.Data.IPluginData">plug-in data</see> from loaded
 <see cref="T:EwEPlugin.Data.IDataProducerPlugin">IDataProducerPlugin</see>
 instances that expose data of a given <see cref="T:System.Type">Type</see>.
 </summary>
	<param name="dataType">The type of the data to match.</param>
	<returns>An array of data, or an empty array if an error occurred.</returns>
	<remarks>This method is not thread-safe.</remarks>
 -----------------------------------------------------------------------

</member><member name="P:EwEPlugin.cPluginManager.EnableData(System.Type,EwEUtils.Core.IRunType)">
 -----------------------------------------------------------------------
 <summary>
 Get/set whether remote data is enabled.
 </summary>
	<param name="dataType">The type of the data to match.</param>
	<param name="runType">Run type that the data is requested for, or
 Null if the run type is irrelevant.</param>
	<returns>True if the requested data is available.</returns>
 -----------------------------------------------------------------------

</member><member name="P:EwEPlugin.cPluginManager.EnableDataProducer(System.String,System.Boolean)">
 -----------------------------------------------------------------------
 <summary>
 Enable or disable a specific data producer.
 </summary>
	<param name="strProducer">The name of the producer to enable or disable.</param>
	<param name="bEnable">Enable flag.</param>
	<returns>True if the requested producer is enabled.</returns>
 -----------------------------------------------------------------------

</member><member name="M:EwEPlugin.cPluginManager.PostRunSearchResults(System.Object)">
 -----------------------------------------------------------------------
 <summary>
 Plug-in point, called whenever search objective results have been 
 calculated.
 </summary>
	<param name="SearchDS">Search data structures holding the 
 search results.</param>
	<returns>True if successful.</returns>
 -----------------------------------------------------------------------

</member><member name="P:EwEPlugin.cPluginManager.Settings">
 -----------------------------------------------------------------------
 <summary>
 Provide the plug-in manager with an XML document for <see cref="T:EwEPlugin.ISettingsPlugin">settings plug-ins</see> 
 to store and retrieve persistent settings.
 </summary>
	<remarks>
 Note that XML document should be provided before any plug-ins are loaded.
 The current implementation does NOT cascade a new settings document to
 already loaded plug-ins; such dynamics would make writing plug-ins even
 more daunting.
 </remarks>
 -----------------------------------------------------------------------

</member><member name="M:EwEPlugin.cPluginManager.GetPluginDefs(System.Type,EwEPlugin.cPluginAssembly)">
 ---------------------------------------------------------------------------
 <summary>
 Returns a collection of <see cref="T:EwEPlugin.cPluginManager.cPluginContext">plug-in definitions</see>
 of a given <see cref="T:System.Type">Type</see>.
 </summary>
	<param name="t">The <see cref="T:System.Type">Type</see> of the plugins to retrieve.</param>
	<param name="pa">The <see cref="T:EwEPlugin.cPluginAssembly">plug-in assembly</see> to search.
 If not specified, all plug-in assemblies will be searched.</param>
	<returns>A collection of <see cref="T:EwEPlugin.cPluginManager.cPluginContext">plug-in contexts</see>
 linking to plug-ins of the given type.</returns>
 ---------------------------------------------------------------------------

</member><member name="M:EwEPlugin.cPluginManager.GetPluginDefs(System.String,EwEPlugin.cPluginAssembly)">
 ---------------------------------------------------------------------------
 <summary>
 Returns a collection of <see cref="T:EwEPlugin.cPluginManager.cPluginContext">plug-in definitions</see>
 of a given <see cref="P:EwEPlugin.IPlugin.Name">name</see>.
 </summary>
	<param name="strName">The <see cref="T:System.Type">Type</see> of the plugins to retrieve.</param>
	<param name="pa">The <see cref="T:EwEPlugin.cPluginAssembly">plug-in assembly</see> to search.
 If not specified, all plug-in assemblies will be searched.</param>
	<returns>A collection of <see cref="T:EwEPlugin.cPluginManager.cPluginContext">plug-in contexts</see>
 linking to plug-ins of the given type.</returns>
 ---------------------------------------------------------------------------

</member><member name="M:EwEPlugin.cPluginManager.GetPlugins(System.String,EwEPlugin.cPluginAssembly)">
 -----------------------------------------------------------------------
 <summary>
 Returns all <see cref="T:EwEPlugin.IPlugin">plug-ins</see> with a given name.
 </summary>
	<param name="strName">Name of the plugin to return. Names are
 case insensitive.</param>
	<returns>A collection of <see cref="T:EwEPlugin.IPlugin">plug-ins</see> with the 
 given name.</returns>
 -----------------------------------------------------------------------

</member><member name="M:EwEPlugin.cPluginManager.GetPlugins(System.Type,EwEPlugin.cPluginAssembly)">
 -----------------------------------------------------------------------
 <summary>
 Returns all <see cref="T:EwEPlugin.IPlugin">plug-ins</see> with a given type.
 </summary>
	<param name="t">Type of the plugin to return.</param>
	<returns>A collection of <see cref="T:EwEPlugin.IPlugin">plug-ins</see> with the 
 given name.</returns>
 -----------------------------------------------------------------------

</member><member name="M:EwEPlugin.cPluginManager.DataProducers(System.Type)">
 -----------------------------------------------------------------------
 <summary>
 Returns a list of available producers that produce data of a given
 <paramref name="typeData">type</paramref>.
 </summary>
	<param name="typeData">The <see cref="T:System.Type">type</see> of data to test.</param>
	<returns></returns>
 -----------------------------------------------------------------------

</member><member name="P:EwEPlugin.cPluginManager.PluginAssembly(System.String,System.Version)">
 -----------------------------------------------------------------------
 <summary>
 Returns a plugin assembly by <see cref="P:System.Reflection.AssemblyName.Name">name</see> 
 and (optionally) by <see cref="P:System.Reflection.AssemblyName.Version">version</see> number.
 </summary>
	<param name="strName">Name of the assembly</param>
	<param name="ver"></param>
	<value></value>
	<returns></returns>
 -----------------------------------------------------------------------

</member><member name="P:EwEPlugin.cPluginManager.PluginAssemblies">
 -----------------------------------------------------------------------
 <summary>
 Returns a collection of <see cref="T:EwEPlugin.cPluginAssembly">plug-in assemblies</see>.
 </summary>
 -----------------------------------------------------------------------

</member><member name="P:EwEPlugin.cPluginManager.PluginAssemblyNames">
 -----------------------------------------------------------------------
 <summary>
 Returns a list of <see cref="T:System.Reflection.AssemblyName">AssemblyName</see> instances
 for the loaded plugin assemblies.
 </summary>
 -----------------------------------------------------------------------

</member><member name="M:EwEPlugin.cPluginManager.GetIncompatiblePlugins">
 -----------------------------------------------------------------------
 <summary>
 Returns a list of <see cref="T:System.Reflection.AssemblyName">AssemblyName</see> instances
 for incompatible plug-ins.
 </summary>
 -----------------------------------------------------------------------

</member><member name="T:EwEPlugin.cPluginManager.CanExecutePlugin">
 -----------------------------------------------------------------------
 <summary>
 Callback delegate to be implemented by the class that can tell whether a
 plugin is allowed to run given a specific <see cref="T:EwEUtils.Core.eCoreExecutionState">Core execution state</see>.
 </summary>
	<param name="coreExectionState">The state to verify.</param>
	<returns>True if a plugin can execute for this state, false otherwise.</returns>
 -----------------------------------------------------------------------

</member><member name="M:EwEPlugin.cPluginManager.UpdatePluginEnabledStates(EwEPlugin.IGUIPlugin)">
 -----------------------------------------------------------------------
 <summary>
 Method to call whenever the plugins need to respond to core state changes.
 </summary>
	<param name="ip">A <see cref="T:EwEPlugin.IGUIPlugin">GUI plugin</see> to update the
 enabled state for (optional). If this parameter is omitted, the enabled
 state of all currently loaded IGUIPlugin instances is checked.</param>
 -----------------------------------------------------------------------

</member><member name="F:EwEPlugin.cPluginManager.eInvocationType.All">
	<summary>
 All plug-ins implementing a method will be invoked, and invocation
 results will be combined via the logical AND operator. Effectively,
 this means that all implementations will have to succeed for the 
 plug-in point to succeed.
 </summary>
</member><member name="F:EwEPlugin.cPluginManager.eInvocationType.Any">
	<summary>
 All plug-ins implementing a method will be invoked, and invocation
 results will be combined via the logical OR operator. Effectively,
 this means that any implementation can succeed for the plug-in 
 point to succeed.
 </summary>
</member><member name="F:EwEPlugin.cPluginManager.eInvocationType.Exclusive">
	<summary>
 Only the first encountered plug-in that implements a method will be
 invoked, and the plug-in result will depend on the result of that
 single invocation. Effectively, this means that this type of plug-in
 point is invoked exclusively.
 </summary>
</member><member name="T:EwEPlugin.cPluginManager.eInvocationType">
	<summary>
 Enumerated type, stating how a plug-in calls are handled, and how the plug-in
 manager gathers invocation results.
 </summary>
	<remarks>
 Why is 'invoke' spelled with a 'k', and 'invocation' with a 'c'? Granted,
 'invoce' and 'invokation' look pretty silly, but... why? Shall we propose
 to consistently use a 'q' instead? Or 'ck'? Wow, I think I need a life...
 </remarks>
</member><member name="M:EwEPlugin.cPluginManager.TryInvokeMethod(System.Type,System.String,System.Object[],EwEPlugin.cPluginManager.eInvocationType,System.Collections.Generic.ICollection{EwEPlugin.cPluginManager.cPluginContext})">
 -----------------------------------------------------------------------
 <summary>
 Invoke a generic method on all plugins of a specific type.
 </summary>
	<param name="typePlugin">The <see cref="T:System.Type">Type</see> of the plugin.</param>
	<param name="strMethod">The name of the method to invoke.</param>
	<param name="aArgs">The arguments to pass to the method to invoke.</param>
	<param name="invocation">Flag stating whether the plug-in point is exclusive.
 Exclusive plug-in points are meant to replace core functionality. The first
 plug-in point encountered is invoked in which case True is returned. If no
 suitable plug-in point is found, a return value of False is expected.
 </param>
	<returns>True if the method could be found for the given type.</returns>
	<remarks>
		<para>Note that this method tries to match argument types to the values
 provided in <paramref name="aArgs">aArgs</paramref>. If this array of values 
 happens to contain Null (or Nothing), call <see cref="M:EwEPlugin.cPluginManager.InvokeMethod(System.Type,System.String,System.Object[],EwEPlugin.cPluginManager.eInvocationType,System.Collections.Generic.ICollection{EwEPlugin.cPluginManager.cPluginContext})">InvokeMethod</see>
 instead.</para>
	</remarks>
 -----------------------------------------------------------------------

</member><member name="M:EwEPlugin.cPluginManager.MarshallInvokeMethod(System.Object)">
 -----------------------------------------------------------------------
 <summary>
 Marshall bridge for <see cref="M:EwEPlugin.cPluginManager.InvokeMethod(System.Type,System.String,System.Object[],EwEPlugin.cPluginManager.eInvocationType,System.Collections.Generic.ICollection{EwEPlugin.cPluginManager.cPluginContext})">InvokeMethod</see>.
 </summary>
 -----------------------------------------------------------------------

</member><member name="M:EwEPlugin.cPluginManager.InvokeMethod(System.Type,System.String,System.Object[],EwEPlugin.cPluginManager.eInvocationType,System.Collections.Generic.ICollection{EwEPlugin.cPluginManager.cPluginContext})">
 -----------------------------------------------------------------------
 <summary>
 Invoke a generic method on all plugins of a specific type.
 </summary>
	<param name="typePlugin">The <see cref="T:System.Type">Type</see> of the plugin.</param>
	<param name="strMethod">The name of the method to invoke.</param>
	<param name="aArgs">The arguments to pass to the method to invoke.</param>
	<param name="invocation">Flag stating whether the plug-in point is exclusive.
 Exclusive plug-in points are meant to replace core functionality. The first
 plug-in point encountered is invoked in which case True is returned. If no
 suitable plug-in point is found, a return value of False is expected.
 </param>
	<param name="collPlugins">Collection of plugins to test, if any.</param>
	<returns>True if the method could be found for the given type.</returns>
 -----------------------------------------------------------------------

</member><member name="M:EwEPlugin.cPluginManager.LoadPlugin(System.String,System.String,System.Object[])">
 -----------------------------------------------------------------------
 <summary>
 Loads a plugin by class name from a given assembly.
 </summary>
	<param name="AssemblyPath"></param>
	<param name="ClassName"></param>
	<param name="args"></param>
	<returns></returns>
 -----------------------------------------------------------------------

</member><member name="M:EwEPlugin.cPluginManager.ExtractAssemblyAttribute(System.Reflection.Assembly,System.Type)">
 -----------------------------------------------------------------------
 <summary>
 Retrieves an embedded custom attribute from a .NET Assembly, such as 
 company information, version number or copyright notice.
 </summary>
	<param name="assem">The Assembly to access.</param>
	<param name="t">The Type of the attribute to obtain.</param>
	<returns>An object, or Nothing if an error occurred.</returns>
 -----------------------------------------------------------------------

</member><member name="M:EwEPlugin.cPluginManager.GetCompatibility(System.Reflection.Assembly)">
 -----------------------------------------------------------------------
 <summary>
 Tests whether a specific assembly is compatible with the assemblies 
 currently loaded by the main application.
 </summary>
	<param name="assemPlugin">The assembly to test</param>
	<returns>True if compatible.</returns>
 -----------------------------------------------------------------------

</member><member name="T:EwEPlugin.cPluginManager">
 ---------------------------------------------------------------------------
 <summary>
 Plug-in manager, handles loading and enabling of <see cref="T:EwEPlugin.IPlugin">EwE plug-ins</see>.
 </summary>
 ---------------------------------------------------------------------------

</member><member name="M:EwEPlugin.IEcosimPlugin.LoadEcosimScenario(System.Object)">
 -----------------------------------------------------------------------
 <summary>
 Datasource load ecosim scenario plugin point.
 </summary>
	<param name="dataSource">A reference to the EwE data source from which
 data is being loaded.</param>
	<remarks>This plugin point is non-exclusive; each implementation 
 of this plugin point will be called.</remarks>
 -----------------------------------------------------------------------

</member><member name="M:EwEPlugin.IEcosimPlugin.SaveEcosimScenario(System.Object)">
 -----------------------------------------------------------------------
 <summary>
 Datasource save ecosim scenario plugin point.
 </summary>
	<param name="dataSource">A reference to the EwE data source to which
 data is being saved.</param>
	<remarks>This plugin point is non-exclusive; each implementation 
 of this plugin point will be called.</remarks>
 -----------------------------------------------------------------------

</member><member name="T:EwEPlugin.IEcosimPlugin">
 ---------------------------------------------------------------------------
 <summary>
 Interface for implementing plugin points that are invoked from the EwE
 Ecosim model.
 </summary>
 ---------------------------------------------------------------------------

</member><member name="T:EwEPlugin.cPluginMenuHandler.MenuItemPluginComparer">
 -----------------------------------------------------------------------
 <summary>
 Helper class, sorts IMenuItemPlugin instances by menu item name in 
 ascending order.
 </summary>
 -----------------------------------------------------------------------

</member><member name="F:EwEPlugin.cPluginMenuHandler.m_menu">
	<summary>The form holding the menu to modify.</summary>
</member><member name="M:EwEPlugin.cPluginMenuHandler.#ctor(System.Windows.Forms.MenuStrip,EwEPlugin.cPluginManager,EwEUtils.Commands.cCommandHandler)">
 -----------------------------------------------------------------------
 <summary>
 Constructor, initializes a new instance of a cPluginMenuHandler.
 </summary>
	<param name="menu"><see cref="T:System.Windows.Forms.MenuStrip">Menu strip</see> that contains the menu
 that must be modified.</param>
	<param name="pm"><see cref="T:EwEPlugin.cPluginManager">Plugin manager</see>
 that holds the plugins to place in the main menu of <paramref name="f">Form frm</paramref></param>
 -----------------------------------------------------------------------

</member><member name="M:EwEPlugin.cPluginMenuHandler.SortPlugins(EwEPlugin.IGUIPlugin[])">
 -----------------------------------------------------------------------
 <summary>
 Sort a list of menu item plug-ins by menu item name.
 </summary>
	<param name="aip">The plug-ins to sort.</param>
	<returns>An array of sorted plug-ins.</returns>
 -----------------------------------------------------------------------

</member><member name="M:EwEPlugin.cPluginMenuHandler.PlacePlugin(EwEPlugin.IGUIPlugin,System.Boolean)">
 -----------------------------------------------------------------------
 <summary>
 Place or remove a GUI plugin menu item.
 </summary>
	<param name="p_ip">The <see cref="T:EwEPlugin.IGUIPlugin">IGUIPlugin</see> to place.</param>
	<param name="bPlace">States whether the menu item should be placed (True)
 or removed (False).</param>
 -----------------------------------------------------------------------

</member><member name="M:EwEPlugin.cPluginMenuHandler.OnPluginMenuItemClick(System.Object,System.EventArgs)">
 -----------------------------------------------------------------------
 <summary>
 One of 'our' menu items has been clicked.
 </summary>
	<param name="sender">The sender of the event, which in this case must be
 a <see cref="T:System.Windows.Forms.ToolStripMenuItem">ToolStripMenuItem</see>.</param>
	<param name="e">Additional <see cref="T:System.EventArgs">event arguments</see>.</param>
 -----------------------------------------------------------------------

</member><member name="T:EwEPlugin.cPluginMenuHandler">
 -----------------------------------------------------------------------
 <summary>
 GUI utility class, handles the placement of <see cref="T:EwEPlugin.IGUIPlugin">IGUIPlugin</see>-
 derived plugins in the menu structure of a <see cref="T:System.Windows.Forms.Form">Form</see>.
 </summary>
 -----------------------------------------------------------------------

</member><member name="M:EwEPlugin.ISettingsPlugin.InitializeSettings(System.Xml.XmlDocument,System.Xml.XmlNode)">
 -----------------------------------------------------------------------
 <summary>
 Initializes the settings plug-in with an xml document and node for
 storing and retrieving persistent settings.
 </summary>
	<param name="doc">The XML document, provided by the EwE framework, where
 the plug-in can store and retrieve its persistent configuration from.</param>
	<param name="node">The XML node the plug-in should operate onto.</param>
	<returns>True if succesful.</returns>
 -----------------------------------------------------------------------

</member><member name="T:EwEPlugin.ISettingsPlugin">
 ===========================================================================
 <summary>
 Plugin point that allows a plug-in to store and retrieve settings in a 
 framework-provided settings file. Settings are stored in a system-defined
 node in an XML document that should be managed by the framework that
 created the plug-in manager.
 </summary>
 ===========================================================================

</member><member name="M:EwEPlugin.IEcopathRunCompleted2Plugin.EcopathRunCompleted(System.Object@,System.Object@,System.Object@)">
 -----------------------------------------------------------------------
 <summary>
 Execute an Ecopath Run Completed plug-in.
 </summary>
	<param name="EcoPathDataStructures">A reference to the Ecopath data 
 structures as defined in the EwE project.</param>
	<param name="TaxonDataStructures">A reference to the taxon data 
 structures as defined in the EwE project.</param>
	<param name="StanzaDataStructures">A reference to the stanza data 
 structures as defined in the EwE project.</param>
	<remarks>This plug-in point is non-exclusive, meaning that multiple
 plug-ins can respond to this event.</remarks>
 -----------------------------------------------------------------------

</member><member name="T:EwEPlugin.IEcopathRunCompleted2Plugin">
 ---------------------------------------------------------------------------
 <summary>
 Interface for implementing a plugin point that is automatically invoked when
 Ecopath has ran succesfully.
 </summary>
	<remarks>
 This interfaces functionally replaces IEcopathRunCompletedPlugin without
 breaking backward compatibility.
 </remarks>
 ---------------------------------------------------------------------------

</member><member name="M:EwEPlugin.IEcopathRunCompletedPlugin.EcopathRunCompleted(System.Object@)">
 -----------------------------------------------------------------------
 <summary>
 Execute an Ecopath Run Completed plug-in.
 </summary>
	<param name="EcoPathDataStructures">A reference to the Ecopath data 
 structures as defined in the EwE project.</param>
	<remarks>This plug-in point is non-exclusive, meaning that multiple
 plug-ins can respond to this event.</remarks>
 -----------------------------------------------------------------------

</member><member name="T:EwEPlugin.IEcopathRunCompletedPlugin">
 ---------------------------------------------------------------------------
 <summary>
 Interface for implementing a plugin point that is automatically invoked when
 Ecopath has ran succesfully.
 </summary>
 ---------------------------------------------------------------------------

</member><member name="M:EwEPlugin.IEcospacePlugin.LoadEcospaceScenario(System.Object)">
 -----------------------------------------------------------------------
 <summary>
 Datasource load ecospace scenario plugin point.
 </summary>
	<param name="dataSource">A reference to the EwE data source from which
 data is being loaded.</param>
	<remarks>This plugin point is non-exclusive; each implementation 
 of this plugin point will be called.</remarks>
 -----------------------------------------------------------------------

</member><member name="M:EwEPlugin.IEcospacePlugin.SaveEcospaceScenario(System.Object)">
 -----------------------------------------------------------------------
 <summary>
 Datasource save ecospace scenario plugin point.
 </summary>
	<param name="dataSource">A reference to the EwE data source to which
 data is being saved.</param>
	<remarks>This plugin point is non-exclusive; each implementation 
 of this plugin point will be called.</remarks>
 -----------------------------------------------------------------------

</member><member name="T:EwEPlugin.IEcospacePlugin">
 ---------------------------------------------------------------------------
 <summary>
 Interface for extending the logic of loading and saving Ecospace data.
 </summary>
 ---------------------------------------------------------------------------

</member><member name="T:EwEPlugin.cPluginAssembly.cPluginComparer">
 -----------------------------------------------------------------------
 <summary>
 IComparer that sorts plug-ins by name, ascending.
 </summary>
 -----------------------------------------------------------------------

</member><member name="F:EwEPlugin.cPluginAssembly.m_dictPlugins">
	<summary>All available plugins in this assembly.</summary>
</member><member name="F:EwEPlugin.cPluginAssembly.m_strCompany">
	<summary>Assembly company name.</summary>
</member><member name="F:EwEPlugin.cPluginAssembly.m_strVersion">
	<summary>Assembly version number.</summary>
</member><member name="F:EwEPlugin.cPluginAssembly.m_strDescription">
	<summary>Assembly description.</summary>
</member><member name="F:EwEPlugin.cPluginAssembly.m_strCopyright">
	<summary>Assembly copyright notice.</summary>
</member><member name="F:EwEPlugin.cPluginAssembly.m_strFileName">
	<summary>Assembly file name.</summary>
</member><member name="F:EwEPlugin.cPluginAssembly.m_bEnabled">
	<summary>Assembly enable state.</summary>
</member><member name="F:EwEPlugin.cPluginAssembly.m_bEnabledInitially">
	<summary>Assembly enabled state at startup.</summary>
</member><member name="F:EwEPlugin.cPluginAssembly.m_compatibility">
	<summary>Assembly compatibility state.</summary>
</member><member name="P:EwEPlugin.cPluginAssembly.Plugin(System.String,System.Boolean)">
 -----------------------------------------------------------------------
 <summary>
 Get/set a named <see cref="T:EwEPlugin.IPlugin">plugin</see>.
 </summary>
	<param name="strName">The <see cref="P:EwEPlugin.IPlugin.Name">name</see>
 of the plugin.</param>
	<param name="bAllowDisabled">Flag stating if plug-ins from disabled 
 assemblies can be aquired as well.</param>
	<remarks>An exception will be thrown when adding a plugin
 with a duplicate name.</remarks>
 -----------------------------------------------------------------------

</member><member name="P:EwEPlugin.cPluginAssembly.Plugins(System.Type,System.Boolean)">
 -----------------------------------------------------------------------
 <summary>
 Gets a collection of <see cref="T:EwEPlugin.IPlugin">plugins</see> in this assembly.
 </summary>
	<param name="t">The <see cref="T:System.Type">Type</see> of the plugins to retrieve,
 or Nothing to return all plugins in this Assembly.</param>
	<param name="bAllowDisabled">Flag stating if plug-ins from disabled 
 assemblies can be aquired as well.</param>
 -----------------------------------------------------------------------

</member><member name="P:EwEPlugin.cPluginAssembly.CanRun">
 -----------------------------------------------------------------------
 <summary>
 States whether this assembly is allowed to be accessed for invoking 
 plug-ins.
 </summary>
 -----------------------------------------------------------------------

</member><member name="P:EwEPlugin.cPluginAssembly.Enabled">
 -----------------------------------------------------------------------
 <summary>
 Get/Set assembly enabled state.
 </summary>
 -----------------------------------------------------------------------

</member><member name="P:EwEPlugin.cPluginAssembly.SessionEnabled">
 -----------------------------------------------------------------------
 <summary>
 Get whether this assembly is enable for a session. This flag can only
 be set at plugin assembly load time to ensure that a plug-in assembly
 enabled state does not change thoughtout a session.
 </summary>
 -----------------------------------------------------------------------

</member><member name="P:EwEPlugin.cPluginAssembly.AlwaysEnabled">
 -----------------------------------------------------------------------
 <summary>
 Get whether this assembly should always be enabled (for core plug-ins)
 </summary>
 -----------------------------------------------------------------------

</member><member name="F:EwEPlugin.cPluginAssembly.ePluginCompatibilityTypes.VersionCompatible">
	<summary>Versions are fully compatible.</summary>
</member><member name="F:EwEPlugin.cPluginAssembly.ePluginCompatibilityTypes.VersionCompatibleCaution">
	<summary>Versions may be compatible.</summary>
</member><member name="F:EwEPlugin.cPluginAssembly.ePluginCompatibilityTypes.VersionIncompatible">
	<summary>Major revision version incompatibility detected.</summary>
</member><member name="F:EwEPlugin.cPluginAssembly.ePluginCompatibilityTypes.IncompatibleUndetermined">
	<summary>Unable to determine level of incompatibility.</summary>
</member><member name="P:EwEPlugin.cPluginAssembly.Compatibility">
 -----------------------------------------------------------------------
 <summary>
 Get/set plugin compatibility state.
 </summary>
	<remarks>
 States whether a plug-in is compatible with the set of assemblies that
 the main application relies on.
 </remarks>
 -----------------------------------------------------------------------

</member><member name="M:EwEPlugin.cPluginAssembly.IsCompatibleToRun">
 -----------------------------------------------------------------------
 <summary>
 States whether a plugin assembly is compatible enough to run with EwE.
 </summary>
	<returns>True if compatible to run, false otherwise.</returns>
 -----------------------------------------------------------------------

</member><member name="M:EwEPlugin.cPluginAssembly.IsCompatible">
 -----------------------------------------------------------------------
 <summary>
 States whether a plugin assembly is compatible with all EwE assemblies.
 </summary>
	<returns>True if compatible to run, false otherwise.</returns>
 -----------------------------------------------------------------------

</member><member name="P:EwEPlugin.cPluginAssembly.Company">
 -----------------------------------------------------------------------
 <summary>
 Get/set assembly company name.
 </summary>
 -----------------------------------------------------------------------

</member><member name="P:EwEPlugin.cPluginAssembly.Version">
 -----------------------------------------------------------------------
 <summary>
 Get/set assembly version.
 </summary>
 -----------------------------------------------------------------------

</member><member name="P:EwEPlugin.cPluginAssembly.Description">
 -----------------------------------------------------------------------
 <summary>
 Get/set assembly description.
 </summary>
 -----------------------------------------------------------------------

</member><member name="P:EwEPlugin.cPluginAssembly.Copyright">
 -----------------------------------------------------------------------
 <summary>
 Get/set assembly copyright.
 </summary>
 -----------------------------------------------------------------------

</member><member name="P:EwEPlugin.cPluginAssembly.Filename">
 -----------------------------------------------------------------------
 <summary>
 Get/set assembly file name.
 </summary>
 -----------------------------------------------------------------------

</member><member name="P:EwEPlugin.cPluginAssembly.AssemblyName">
 -----------------------------------------------------------------------
 <summary>
 Get/set <see cref="P:EwEPlugin.cPluginAssembly.AssemblyName">AssemblyName</see> associated with this
 plug-in assembly.
 </summary>
 -----------------------------------------------------------------------

</member><member name="T:EwEPlugin.cPluginAssembly">
 ---------------------------------------------------------------------------
 <summary>
 Holds information on a particular plugin assembly (author, version, copyright, etc)
 as well as a list of <see cref="T:EwEPlugin.IPlugin">plug-ins</see> found in the assembly.
 </summary>
 ---------------------------------------------------------------------------

</member><member name="P:EwEPlugin.IMenuItemPlugin.MenuItemLocation">
 -----------------------------------------------------------------------
 <summary>
 Override this to specify the menu item location for this plugin.
 </summary>
	<para>A location is a '\' separated series of menu item names, starting 
 at the root node of the menu that the plug-in is nested into.</para>
	<para>Use of the '|' character to separate menu item names is deprecated.</para>
 -----------------------------------------------------------------------

</member><member name="T:EwEPlugin.IMenuItemPlugin">
 ---------------------------------------------------------------------------
 <summary>
 Plugin interface that defines all functionality required to add a menu
 item to the EwE main menu.
 </summary>
 ---------------------------------------------------------------------------

</member><member name="T:EwEPlugin.cSearchRunType">
 -----------------------------------------------------------------------
 <summary>
 Class defining Search run/computation dependencies for exchanging data.
 </summary>
 -----------------------------------------------------------------------

</member><member name="M:EwEPlugin.Data.IDatabasePlugin.Open(System.String)">
 -----------------------------------------------------------------------
 <summary>
 Execution interface for the EwE open database plug-in point. This 
 method is invoked whenever the EwE core opens a database connection.
 </summary>
	<returns>
 True if the plug-in point executed succesfully, or False otherwise.
 This is rather tricky; returning False here may stop EwE6 from being
 </returns>
 -----------------------------------------------------------------------

</member><member name="M:EwEPlugin.Data.IDatabasePlugin.Close">
 -----------------------------------------------------------------------
 <summary>
 Execution interface for the EwE close database plug-in point. This 
 method is invoked whenever the EwE core closes a database connection.
 </summary>
 -----------------------------------------------------------------------

</member><member name="M:EwEPlugin.Data.IDatabasePlugin.IsModified">
 -----------------------------------------------------------------------
 <summary>
 Execution interface for a plug-in point to report whether is has any
 pending changes. This method is invoked whenever the EwE core polls
 for unsaved modifications prior to undertaking actions that may cause 
 data to be lost.
 </summary>
	<returns>
 True if a plug-in has unsaved data, False otherwise.
 </returns>
 -----------------------------------------------------------------------

</member><member name="T:EwEPlugin.Data.IDatabasePlugin">
 =======================================================================
 <summary>
 Plug-in point to allow plug-ins to track database operations with EwE.
 </summary>
 =======================================================================

</member><member name="M:EwEPlugin.ICustomPlugin.Invoke(System.String,System.Object[],System.Object@)">
 -----------------------------------------------------------------------
 <summary>
 Invoke this custom plug-in point.
 </summary>
	<param name="strMethod">A string name identifying the functionality in
 this plugin to invoke. This string can contain anything; the implementation
 of the plug-in can evaluate this string to implement specific behaviour.</param>
	<param name="objArgs">An array of arguments to pass into the plugin.</param>
	<param name="objResult">The outcome of invoking the plug-in, if any.</param>
	<returns>True to indicate that this call was successful, and to stop executing 
 custom plug-ins with the same name.</returns>
 -----------------------------------------------------------------------

</member><member name="T:EwEPlugin.ICustomPlugin">
 ---------------------------------------------------------------------------
 <summary>
 Interface for implementing your own plugin functionality that is does not
 get invoked from a built-in EwE core or GUI plugin point.
 </summary>
 ---------------------------------------------------------------------------

</member><member name="M:EwEPlugin.IMSEBatch.MSEBatchInitialized(System.Object,System.Object)">
	<summary>
 The MSE Batch Manager has been initialized
 </summary>
	<param name="MSEBatchManager">Instance of cMSEBatchManager as an object.</param>
	<param name="MSEBatchManagerDataStrucures">Instance of cMSEBatchManagerDataStructures as an object.</param>
	<remarks></remarks>
</member><member name="M:EwEPlugin.IMSEInitialized.MSEInitialized(System.Object,System.Object,System.Object)">
	<summary>
 MSE model has been initialized
 </summary>
	<param name="MSEModel">MSE model</param>
	<param name="MSEDataStructure">MSE data structures</param>
	<param name="EcosimDatastructures">Ecosim data structures</param>
	<remarks></remarks>
</member><member name="T:EwEPlugin.IMSEInitialized">
	<summary>
 Interface for MSE initialization plugin points that are invoked once the MSE model has been loaded
 </summary>
	<remarks></remarks>
</member><member name="T:EwEPlugin.cPluginGUICommand">
 ---------------------------------------------------------------------------
 <summary>
 Command enabling centralized launching of GUI plug-ins.
 </summary>
 ---------------------------------------------------------------------------

</member><member name="T:EwEPlugin.cEcospaceRunType">
 -----------------------------------------------------------------------
 <summary>
 Class defining Ecospace run/computation dependencies for exchanging data.
 </summary>
 -----------------------------------------------------------------------

</member><member name="T:EwEPlugin.Data.IDataBroadcaster">
 ---------------------------------------------------------------------------
 <summary>
 Interface for defining a data broadcaster.
 </summary>
 ---------------------------------------------------------------------------

</member><member name="T:EwEPlugin.IEcospaceEndTimestepPlugin">
 ---------------------------------------------------------------------------
 <summary>
 Interface for extending the Ecospace end time step logic. Plug-ins of this
 type are invoked as soon as the EwE Core has finished its calculatios
 of an Ecospace time step.
 </summary>
 ---------------------------------------------------------------------------

</member><member name="M:EwEPlugin.ISearchPlugin.SearchInitialized(System.Object)">
 -----------------------------------------------------------------------
 <summary>
 Fishing Policy search has been initialized by the core.
 </summary>
	<param name="SearchDatastructures">cSearchDataStructures</param>
 -----------------------------------------------------------------------

</member><member name="M:EwEPlugin.ISearchPlugin.PostRunSearchResults(System.Object)">
 -----------------------------------------------------------------------
 <summary>
 The user selected minimization routine has made a call to the function 
 being minimized.
 </summary>
	<param name="SearchDatastructures">cSearchDataStructures</param>
 -----------------------------------------------------------------------

</member><member name="M:EwEPlugin.ISearchPlugin.SearchIterationsStarting">
 -----------------------------------------------------------------------
 <summary>
 Search iteration are about to start.
 </summary>
	<remarks>
 The minimization is about to run for the user selected number of 
 iteration. 
 </remarks>
 -----------------------------------------------------------------------

</member><member name="T:EwEPlugin.ISearchPlugin">
 ---------------------------------------------------------------------------
 <summary>
 Interface for implementing plugin points that are invoked from the EwE
 searches
 </summary>
 ---------------------------------------------------------------------------

</member><member name="T:EwEPlugin.cEcopathRunType">
 -----------------------------------------------------------------------
 <summary>
 Class defining Ecopath run/computation dependencies for exchanging data.
 </summary>
 -----------------------------------------------------------------------

</member><member name="P:EwEPlugin.Data.IDataSearchResults.SearchTerm">
 -------------------------------------------------------------------
 <summary>
 Get the term that was used to obtain these results.
 </summary>
 -------------------------------------------------------------------

</member><member name="P:EwEPlugin.Data.IDataSearchResults.SearchResults">
 -------------------------------------------------------------------
 <summary>
 Get an array of search results that matched the term.
 </summary>
 -------------------------------------------------------------------

</member><member name="P:EwEPlugin.Data.IDataSearchResults.SearchScores">
 -------------------------------------------------------------------
 <summary>
 Get an array of score results for the matches.
 </summary>
 -------------------------------------------------------------------

</member><member name="T:EwEPlugin.Data.IDataSearchResults">
 -------------------------------------------------------------------
 <summary>
 Interface for building a container for plug-in search results provided
 by <see cref="T:EwEPlugin.Data.IDataSearchProducerPlugin">data search plug-ins.</see>
	</summary>
 -------------------------------------------------------------------

</member><member name="T:EwEPlugin.IEcosimRunCompletedPostPlugin">
	<summary>
	</summary>
</member><member name="P:EwEPlugin.INavigationTreeItemPlugin.NavigationTreeItemLocation">
 -----------------------------------------------------------------------
 <summary>
 Override this to specify the navigation tree item location for this plugin.
 </summary>
	<remarks>
		<para>A location is a '\' separated series of TreeNode names, starting 
 at the root node of the navigation tree that the plug-in is nested into.</para>
		<para>Use of the '|' character to separate node names is deprecated.</para>
	</remarks>
 -----------------------------------------------------------------------

</member><member name="T:EwEPlugin.INavigationTreeItemPlugin">
 ---------------------------------------------------------------------------
 <summary>
 Plugin interface that defines all functionality required to add a custom
 item to the EwE navigation tree.
 </summary>
 ---------------------------------------------------------------------------

</member><member name="M:EwEPlugin.IPlugin.Initialize(System.Object)">
 -----------------------------------------------------------------------
 <summary>
 Initialize the plugin.
 </summary>
	<param name="core">The core this plugin is initialized for.</param>
 -----------------------------------------------------------------------

</member><member name="P:EwEPlugin.IPlugin.Name">
 -----------------------------------------------------------------------
 <summary>
 Uniquely identifies a plugin.
 </summary>
	<remarks>
 The name field will be used to determine the order of appearance of 
 user interface plug-in elements; user interface elements originating
 from plug-ins will be sorted by this property in ascending order.
 </remarks>
 -----------------------------------------------------------------------

</member><member name="P:EwEPlugin.IPlugin.Description">
 -----------------------------------------------------------------------
 <summary>
 Uniquely describes a plugin.
 </summary>
 -----------------------------------------------------------------------

</member><member name="P:EwEPlugin.IPlugin.Author">
 -----------------------------------------------------------------------
 <summary>
 Describes the author of the plugin.
 </summary>
 -----------------------------------------------------------------------

</member><member name="P:EwEPlugin.IPlugin.Contact">
 -----------------------------------------------------------------------
 <summary>
 Provides contact information about the plugin.
 </summary>
 -----------------------------------------------------------------------

</member><member name="T:EwEPlugin.IPlugin">
 ===========================================================================
 <summary>
 Base interface for defining an EwE6 plug-in. Plug-ins are detected by the
 presence of this Interface.
 </summary>
 ===========================================================================

</member><member name="M:EwEPlugin.IMSERunPlugin.MSERunStarted">
	<summary>
 An MSE run is about to start.
 </summary>
	<remarks>Called at the start of a run before the data has been initialized.</remarks>
</member><member name="M:EwEPlugin.IMSERunPlugin.MSERunCompleted">
	<summary>
 An MSE run has completed.
 </summary>
	<remarks>Called at the end of a run after all the data has been populated and before the interface has been notified.</remarks>
</member><member name="M:EwEPlugin.IMSERunPlugin.MSEIterationStarted">
	<summary>
 An MSE iteration has started.
 </summary>
	<remarks>The MSE has completed the initialization for an iteration and is about the run Ecosim.</remarks>
</member><member name="M:EwEPlugin.IMSERunPlugin.MSEIterationCompleted">
	<summary>
 An MSE iteration has completed.
 </summary>
	<remarks>The MSE has populated data from the iteration but has not re-initialized for the next iteration.</remarks>
</member><member name="M:EwEPlugin.IMSERunPlugin.MSEDoAssessment(System.Single[])">
	<summary>
 The Stock Assessment model has been run.
 </summary>
	<param name="Biomass">Biomass(ngroups) calculated by Ecosim in the first month of the year.</param>
	<remarks>
 The MSE Stock Assessment model is call in the first month of a year by Ecosim. 
 MSEDoAssessment is called after the model has been run and can be used to update variables in cMSEDataStructures that are used to set Quotas in cMSE.UpdateQuotas(biomass()).
 Updates cMSEDataStructures.Bestimate(ngroups) estimated biomass for this year.
 cMSEDataStructures.BestimateLast(ngroups) estimated biomass for the previous year.
 cMSEDataStructures.KalmanGain(ngroups) for this year.
 </remarks>
</member><member name="M:EwEPlugin.IMSERunPlugin.MSEUpdateQuotas(System.Single[])">
	<summary>
 Update cMSEDataStructures.QuotaTime(ngroups) with the quota for a year.
 </summary>
	<param name="Biomass">Biomass(ngroups) calculated by Ecosim in the first month of the year. </param>
	<remarks>
 MSEUpdateQuotas() is called after cMSEDataStructures.QuotaTime(ngroups) has been updated and can be used to 
 </remarks>
</member><member name="M:EwEPlugin.IMSERunPlugin.MSERegulateEffort(System.Single[],System.Single[],System.Single[],System.Int32)">
	<summary>
 Regulate effort based on Quota and user selected controls.
 </summary>
	<param name="Biomass">Biomass(ngroups) for this time step.</param>
	<param name="QMult">Density dependant catchability multiplier</param>
	<param name="QYear">Catchability increase over time due to improved fishing efficiency.</param>
	<param name="iTimeIndex">Cumulative time index.</param>
	<remarks>Sets effort in cEcosimDataStructures.FishRateGear(nfleet,ngroups) base on Quota and user selected controls.</remarks>
</member><member name="T:EwEPlugin.IMSERunPlugin">
	<summary>
 Interface for MSE initialization plugin points that are invoked once the MSE model has been loaded
 </summary>
	<remarks></remarks>
</member><member name="T:EwEPlugin.cEcosimRunType">
 -----------------------------------------------------------------------
 <summary>
 Class defining Ecosim run/computation dependencies for exchanging data.
 </summary>
 -----------------------------------------------------------------------

</member><member name="M:EwEPlugin.IDockStatePlugin.DockState">
 -----------------------------------------------------------------------
 <summary>
 The dockstate for the form of this plugin.
 </summary>
	<remarks>
 Values are interpreted as
 WeifenLuo DockState enumerated values. This project is not linked to
 WeifenLuo's DockPanel suite, but implementing plug-ins can include
 such a reference and return actual DockState enumerated values here.
 </remarks>
 -----------------------------------------------------------------------

</member><member name="T:EwEPlugin.IDockStatePlugin">
 ===========================================================================
 <summary>
 Plugin point that allows a GUI plugin to state its desired dock location.
 </summary>
 ===========================================================================

</member><member name="M:EwEPlugin.IUIContextPlugin.UIContext(System.Object)">
 -----------------------------------------------------------------------
 <summary>
 Implement this plug-in point to receive a user interface context. See
 ScientificInterfaceShared &gt; Controls &gt; cUIContext for a full description
 of this object.
 </summary>
	<param name="uic"></param>
 -----------------------------------------------------------------------

</member><member name="T:EwEPlugin.IUIContextPlugin">
 ---------------------------------------------------------------------------
 <summary>
 Plugin interface that defines all functionality required to receive a user
 interface UI context.
 </summary>
 ---------------------------------------------------------------------------

</member><member name="M:EwEPlugin.IDataValidatedPlugin.DataValidated(EwEUtils.Core.eVarNameFlags,EwEUtils.Core.eDataTypes)">
 -----------------------------------------------------------------------
 <summary>
 Plug-in point called when the core has succesfully validated a variable.
 </summary>
	<param name="varname">The eVarname flag identifying the variable that 
 passed Core validation.</param>
	<param name="dt">The eDataTypes flag identifying the core source of the
 variable.</param>
 -----------------------------------------------------------------------

</member><member name="T:EwEPlugin.IDataValidatedPlugin">
 ===========================================================================
 <summary>
 Interface for implementing plug-ins that extend value validation events with 
 the EwE Core. Whenever a user modifies a value, this value is passed to the 
 core for validation against allowed value ranges, against other existing 
 values, etc. Users can decide to extend this process by adding custom tests.
 </summary>
 ===========================================================================

</member><member name="M:EwEPlugin.Data.IDataProducerPlugin.Broadcaster(EwEPlugin.Data.IDataBroadcaster)">
 -----------------------------------------------------------------------
 <summary>
 Initialization interface to inform the plug-in where to send its data
 to once ready.
 </summary>
	<param name="broadcaster">The <see cref="T:EwEPlugin.Data.IDataBroadcaster">IDataBroadcaster</see> 
 to send data to.</param>
	<remarks>
 The plug-in should call <see cref="M:EwEPlugin.Data.IDataBroadcaster.BroadcastData(System.String,EwEPlugin.Data.IPluginData)">IDataBroadcaster.BroadcastData</see>,
 from where any <see cref="T:EwEPlugin.Data.IDataConsumerPlugin">IDataConsumerPlugin</see>
 -derived class gets a chance to consume the data by implementing
 <see cref="M:EwEPlugin.Data.IDataConsumerPlugin.ReceiveData(System.String,EwEPlugin.Data.IPluginData)">ReceiveData</see>.
 <param name="runType">Run type that the data is requested for, or
 Null if the run type is irrelevant.</param>
	</remarks>
 -----------------------------------------------------------------------

</member><member name="M:EwEPlugin.Data.IDataProducerPlugin.IsDataAvailable(System.Type,EwEUtils.Core.IRunType)">
 -----------------------------------------------------------------------
 <summary>
 Requests whether data with a given <see cref="T:System.Type">Type</see> and
 <see cref="T:EwEUtils.Core.IRunType">run type</see> is provided by this plug-in.
 </summary>
	<param name="typeData">
		<see cref="T:System.Type">Type</see> of the data to request.
 </param>
	<param name="runType">
		<see cref="T:EwEUtils.Core.IRunType">Run type</see> of the data to request.
 </param>
 -----------------------------------------------------------------------

</member><member name="M:EwEPlugin.Data.IDataProducerPlugin.GetDataByType(System.Type,EwEPlugin.Data.IPluginData@)">
 -----------------------------------------------------------------------
 <summary>
 Request data from this plug-in for a data with a specific
 <see cref="T:System.Type">Type</see>.
 </summary>
	<param name="typeData"><see cref="T:System.Type">Type</see> of the data to request.</param>
	<param name="data">The <see cref="T:EwEPlugin.Data.IPluginData">data</see> offered by 
 the plug-in.</param>
	<returns>True if requested data is available.</returns>
 -----------------------------------------------------------------------

</member><member name="M:EwEPlugin.Data.IDataProducerPlugin.IsEnabled">
 -----------------------------------------------------------------------
 <summary>
 Get whether a data producer is allowed to distribute data.
 </summary>
 -----------------------------------------------------------------------

</member><member name="M:EwEPlugin.Data.IDataProducerPlugin.SetEnabled(System.Boolean)">
 -----------------------------------------------------------------------
 <summary>
 Set whether a data producer is allowed to distribute data.
 </summary>
 -----------------------------------------------------------------------

</member><member name="M:EwEPlugin.Data.IDataProducerPlugin.SetEnabled(System.Type,EwEUtils.Core.IRunType,System.Boolean)">
 -----------------------------------------------------------------------
 <summary>
 Set whether a plug-in distributes data for a given run type.
 </summary>
	<param name="typeData"><see cref="T:System.Type">Type</see> of the data to enable.</param>
	<param name="runType">
		<see cref="T:EwEUtils.Core.IRunType">Run type</see> of the data to enable or disable.
 </param>
 -----------------------------------------------------------------------

</member><member name="M:EwEPlugin.Data.IDataProducerPlugin.IsEnabled(System.Type,EwEUtils.Core.IRunType)">
 -----------------------------------------------------------------------
 <summary>
 Get whether a plug-in distributes data for a given run type.
 </summary>
	<param name="typeData"><see cref="T:System.Type">Type</see> of the data to request 
 enabled state for.</param>
	<param name="runType">
		<see cref="T:EwEUtils.Core.IRunType">Run type</see> of the data to enable or disable.
 </param>
 -----------------------------------------------------------------------

</member><member name="T:EwEPlugin.Data.IDataProducerPlugin">
 ---------------------------------------------------------------------------
 <summary>
 Interface for implementing a plugin point that can broadcast data.
 </summary>
 ---------------------------------------------------------------------------

</member><member name="T:EwEPlugin.IEcosimBeginTimestepPostPlugin">
	<summary>
	</summary>
</member><member name="T:EwEPlugin.IEcosimEndTimestepPostPlugin">
	<summary>
	</summary>
</member><member name="M:EwEPlugin.IEcosimRunInitializedPlugin.EcosimRunInitialized(System.Object)">
	<summary>
 Ecosim has initialized and is about to start the time loop
 </summary>
	<param name="EcosimDatastructures"></param>
	<remarks></remarks>
</member><member name="T:EwEPlugin.IEcospaceInitializedPlugin">
 ---------------------------------------------------------------------------
 <summary>
 Interface for extending the Ecospace initialzation logic. Plug-ins of this
 type are invoked as soon as all Ecospace data is loaded in the EwE Core.
 </summary>
 ---------------------------------------------------------------------------

</member><member name="M:EwEPlugin.EwEAutoUpdateRef.UpdateService.#ctor">
	<remarks/>
</member><member name="E:EwEPlugin.EwEAutoUpdateRef.UpdateService.GetPluginMigrationTokenCompleted">
	<remarks/>
</member><member name="E:EwEPlugin.EwEAutoUpdateRef.UpdateService.CheckPluginUpdateCompleted">
	<remarks/>
</member><member name="E:EwEPlugin.EwEAutoUpdateRef.UpdateService.DownloadPluginCompleted">
	<remarks/>
</member><member name="E:EwEPlugin.EwEAutoUpdateRef.UpdateService.GetPluginHashCompleted">
	<remarks/>
</member><member name="E:EwEPlugin.EwEAutoUpdateRef.UpdateService.GetPluginExtensionCompleted">
	<remarks/>
</member><member name="M:EwEPlugin.EwEAutoUpdateRef.UpdateService.GetPluginMigrationToken(System.String,System.String,System.String)">
	<remarks/>
</member><member name="M:EwEPlugin.EwEAutoUpdateRef.UpdateService.GetPluginMigrationTokenAsync(System.String,System.String,System.String)">
	<remarks/>
</member><member name="M:EwEPlugin.EwEAutoUpdateRef.UpdateService.GetPluginMigrationTokenAsync(System.String,System.String,System.String,System.Object)">
	<remarks/>
</member><member name="M:EwEPlugin.EwEAutoUpdateRef.UpdateService.CheckPluginUpdate(System.String,System.String,System.String,System.String)">
	<remarks/>
</member><member name="M:EwEPlugin.EwEAutoUpdateRef.UpdateService.CheckPluginUpdateAsync(System.String,System.String,System.String,System.String)">
	<remarks/>
</member><member name="M:EwEPlugin.EwEAutoUpdateRef.UpdateService.CheckPluginUpdateAsync(System.String,System.String,System.String,System.String,System.Object)">
	<remarks/>
</member><member name="M:EwEPlugin.EwEAutoUpdateRef.UpdateService.DownloadPlugin">
	<remarks/>
</member><member name="M:EwEPlugin.EwEAutoUpdateRef.UpdateService.DownloadPluginAsync">
	<remarks/>
</member><member name="M:EwEPlugin.EwEAutoUpdateRef.UpdateService.DownloadPluginAsync(System.Object)">
	<remarks/>
</member><member name="M:EwEPlugin.EwEAutoUpdateRef.UpdateService.GetPluginHash">
	<remarks/>
</member><member name="M:EwEPlugin.EwEAutoUpdateRef.UpdateService.GetPluginHashAsync">
	<remarks/>
</member><member name="M:EwEPlugin.EwEAutoUpdateRef.UpdateService.GetPluginHashAsync(System.Object)">
	<remarks/>
</member><member name="M:EwEPlugin.EwEAutoUpdateRef.UpdateService.GetPluginExtension">
	<remarks/>
</member><member name="M:EwEPlugin.EwEAutoUpdateRef.UpdateService.GetPluginExtensionAsync">
	<remarks/>
</member><member name="M:EwEPlugin.EwEAutoUpdateRef.UpdateService.GetPluginExtensionAsync(System.Object)">
	<remarks/>
</member><member name="M:EwEPlugin.EwEAutoUpdateRef.UpdateService.CancelAsync(System.Object)">
	<remarks/>
</member><member name="T:EwEPlugin.EwEAutoUpdateRef.UpdateService">
	<remarks/>
</member><member name="T:EwEPlugin.EwEAutoUpdateRef.GetPluginMigrationTokenCompletedEventHandler">
	<remarks/>
</member><member name="P:EwEPlugin.EwEAutoUpdateRef.GetPluginMigrationTokenCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:EwEPlugin.EwEAutoUpdateRef.GetPluginMigrationTokenCompletedEventArgs">
	<remarks/>
</member><member name="T:EwEPlugin.EwEAutoUpdateRef.CheckPluginUpdateCompletedEventHandler">
	<remarks/>
</member><member name="P:EwEPlugin.EwEAutoUpdateRef.CheckPluginUpdateCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:EwEPlugin.EwEAutoUpdateRef.CheckPluginUpdateCompletedEventArgs">
	<remarks/>
</member><member name="T:EwEPlugin.EwEAutoUpdateRef.DownloadPluginCompletedEventHandler">
	<remarks/>
</member><member name="P:EwEPlugin.EwEAutoUpdateRef.DownloadPluginCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:EwEPlugin.EwEAutoUpdateRef.DownloadPluginCompletedEventArgs">
	<remarks/>
</member><member name="T:EwEPlugin.EwEAutoUpdateRef.GetPluginHashCompletedEventHandler">
	<remarks/>
</member><member name="P:EwEPlugin.EwEAutoUpdateRef.GetPluginHashCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:EwEPlugin.EwEAutoUpdateRef.GetPluginHashCompletedEventArgs">
	<remarks/>
</member><member name="T:EwEPlugin.EwEAutoUpdateRef.GetPluginExtensionCompletedEventHandler">
	<remarks/>
</member><member name="P:EwEPlugin.EwEAutoUpdateRef.GetPluginExtensionCompletedEventArgs.Result">
	<remarks/>
</member><member name="T:EwEPlugin.EwEAutoUpdateRef.GetPluginExtensionCompletedEventArgs">
	<remarks/>
</member><member name="T:EwEPlugin.IEcosimEndTimestepPlugin">
 ===========================================================================
 <summary>
 Plugin points for the end of an Ecosim time step.
 </summary>
 ===========================================================================

</member><member name="M:EwEPlugin.IEcospaceCalcCostOfSailingPlugin.CalculateCostOfSailing(System.Object,System.Int32[0:,0:],System.Boolean[0:,0:,0:],System.Single[0:,0:,0:])">
 -----------------------------------------------------------------------
 <summary>
 Datasource load ecospace scenario plugin point.
 </summary>
	<param name="EcospaceData">Ecospace data structure providing context
 information for this calculation.</param>
	<param name="Depth">Ecospace depth(row, col).</param>
	<param name="Port">Ecospace ports(fleet, row, col). Fleets are indexed
 one-based, the 0-fleet data contains the aggregation of ports for all 
 fleets.</param>
	<param name="Sail">Sailing cost buffer(fleet, row, col) to receive the
 calculated cost of sailing.</param>
	<remarks>This plugin point is exclusive; plug-ins of this type will be
 invoked in an arbitrairy order until a plug-in returns True. If this
 happens, Ecospace will not attempt to calculate cost of sailing.</remarks>
 -----------------------------------------------------------------------

</member><member name="T:EwEPlugin.IEcospaceCalcCostOfSailingPlugin">
 ---------------------------------------------------------------------------
 <summary>
 Interface for overriding the Ecospace cost of sailing calculations.
 </summary>
 ---------------------------------------------------------------------------

</member><member name="T:EwEPlugin.IConfigurablePlugin">
 ===========================================================================
 <summary>
 Plugin point that provides a configuration interface as a form.
 </summary>
 ===========================================================================

</member><member name="M:EwEPlugin.Data.IDataSearchProducerPlugin.StartSearch(System.Object)">
 -------------------------------------------------------------------
 <summary>
 Starts an asynchronous search for data.
 </summary>
	<param name="data">The data providing search terms.</param>
	<returns>True if started succesful.</returns>
 -------------------------------------------------------------------

</member><member name="M:EwEPlugin.Data.IDataSearchProducerPlugin.StopSearch">
 -------------------------------------------------------------------
 <summary>
 Interrupt a current search.
 </summary>
	<returns>True if stopped succesfully.</returns>
 -------------------------------------------------------------------

</member><member name="M:EwEPlugin.Data.IDataSearchProducerPlugin.IsSeaching">
 -------------------------------------------------------------------
 <summary>
 Queries a data producer if a search is in progress.
 </summary>
	<returns>True if a search is in progress.</returns>
 -------------------------------------------------------------------

</member><member name="M:EwEPlugin.Data.IDataSearchProducerPlugin.SearchResults(System.Object,EwEPlugin.Data.IDataSearchResults@)">
 -------------------------------------------------------------------
 <summary>
 Returns search results.
 </summary>
	<param name="dataTerm">The search term that was used.</param>
	<param name="results">Returned search results.</param>
	<returns>True if succesful.</returns>
 -------------------------------------------------------------------

</member><member name="M:EwEPlugin.Data.IDataSearchProducerPlugin.CreateSearchTerm">
 -------------------------------------------------------------------
 <summary>
 Returns a search term for an interface to substitute data into.
 </summary>
	<returns></returns>
 -------------------------------------------------------------------

</member><member name="T:EwEPlugin.Data.IDataSearchProducerPlugin">
 -------------------------------------------------------------------
 <summary>
 Plug-in interface for data providers that allow data to be searched.
 </summary>
 -------------------------------------------------------------------

</member><member name="M:EwEPlugin.IEcospaceLayerExchangePlugin.EcospaceStartRun(System.Object)">
 -----------------------------------------------------------------------
 <summary>
 Plug-in point to allow external software to modify the content of a
 cEcospaceLayer (EwECore.Ecospace.Basemap.cEcospaceLayer), 
 called at the beginning of an Ecospace run.
 </summary>
	<param name="EcospaceLayer">The EcospaceLayer to modify.</param>
 -----------------------------------------------------------------------

</member><member name="M:EwEPlugin.IEcospaceLayerExchangePlugin.EcospaceEndRun(System.Object)">
 -----------------------------------------------------------------------
 <summary>
 Plug-in point to allow external software to modify the content of a
 cEcospaceLayer (EwECore.Ecospace.Basemap.cEcospaceLayer), 
 called at end of a Ecospace run.
 </summary>
	<param name="EcospaceLayer">The EcospaceLayer to read.</param>
 -----------------------------------------------------------------------

</member><member name="M:EwEPlugin.IEcospaceLayerExchangePlugin.EcospaceBeginTimeStep(System.Object,System.Int32)">
 -----------------------------------------------------------------------
 <summary>
 Plug-in point to allow external software to modify the content of a
 cEcospaceLayer (EwECore.Ecospace.Basemap.cEcospaceLayer), 
 called at the beginning of a time step.
 </summary>
	<param name="EcospaceLayer">The EcospaceLayer to modify.</param>
 -----------------------------------------------------------------------

</member><member name="M:EwEPlugin.IEcospaceLayerExchangePlugin.EcospaceEndTimeStep(System.Object,System.Int32)">
 -----------------------------------------------------------------------
 <summary>
 Plug-in point to allow external software to modify the content of a
 cEcospaceLayer (EwECore.Ecospace.Basemap.cEcospaceLayer), 
 called at the end of time step.
 </summary>
	<param name="EcospaceLayer">The EcospaceLayer to read.</param>
 -----------------------------------------------------------------------

</member><member name="T:EwEPlugin.IEcospaceLayerExchangePlugin">
 ---------------------------------------------------------------------------
 <summary>
 Interface to allow plug-ins to access the content of individual Ecospace layers
 during Ecospace execution.
 </summary>
 ---------------------------------------------------------------------------

</member><member name="M:EwEPlugin.IEcospaceBeginTimestepPlugin.EcospaceBeginTimeStep(System.Object,System.Int32)">
	<summary>
 Begin of an Ecospace time step.
 </summary>
	<param name="EcospaceDatastructures">Ecospace data structures.</param>
	<param name="iTime">Cumulative time step.</param>
</member><member name="T:EwEPlugin.IEcospaceBeginTimestepPlugin">
 ---------------------------------------------------------------------------
 <summary>
 Interface for extending the Ecospace begin time step logic. Plug-ins of this
 type are invoked as soon as the EwE Core is about to begin its calculatios
 of an Ecospace time step.
 </summary>
 ---------------------------------------------------------------------------

</member><member name="T:EwEPlugin.IEcotracerInitializedPlugin">
 ---------------------------------------------------------------------------
 <summary>
 Ecotracer post-initialization plug-in
 </summary>
 ---------------------------------------------------------------------------

</member><member name="M:EwEPlugin.IEcopathPlugin.LoadModel(System.Object)">
 -----------------------------------------------------------------------
 <summary>
 Execution interface for an Ecopath load model plugin point.
 </summary>
	<param name="dataSource">A reference to the EwE data source from which
 data is being loaded.</param>
	<remarks>This plug-in point is non-exclusive, meaning that multiple
 plug-ins can respond to this event.</remarks>
	<returns>True if loaded succesful.</returns>
 -----------------------------------------------------------------------

</member><member name="M:EwEPlugin.IEcopathPlugin.SaveModel(System.Object)">
 -----------------------------------------------------------------------
 <summary>
 Execution interface for an Ecopath save model plugin point.
 </summary>
	<param name="dataSource">A reference to the EwE data source to which
 data is being saved.</param>
	<remarks>This plug-in point is non-exclusive, meaning that multiple
 plug-ins can respond to this event.</remarks>
 -----------------------------------------------------------------------

</member><member name="T:EwEPlugin.IEcopathPlugin">
 ---------------------------------------------------------------------------
 <summary>
 Interface for implementing a plugin point that is invoked whenever an EwE
 Ecopath model has been loaded or has been saved, but before the datasource is
 closed.
 </summary>
 ---------------------------------------------------------------------------

</member>
</members>
</doc>