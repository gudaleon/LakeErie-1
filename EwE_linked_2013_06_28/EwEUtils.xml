<?xml version="1.0"?>
<doc>
<assembly>
<name>
EwEUtils
</name>
</assembly>
<members>
<member name="T:EwEUtils.NetUtilities.cSocketWrapper.cHandShake">
 ===================================================================
 <summary>
 Class used to help server and client recognize each other when
 setting up a connection.
 </summary>
 ===================================================================

</member><member name="F:EwEUtils.NetUtilities.cSocketWrapper.eReadStates.NotReading">
	<summary>Not reading.</summary>
</member><member name="F:EwEUtils.NetUtilities.cSocketWrapper.eReadStates.ReadingSize">
	<summary>Reading data size bytes.</summary>
</member><member name="F:EwEUtils.NetUtilities.cSocketWrapper.eReadStates.ReadingObject">
	<summary>Reading data bytes.</summary>
</member><member name="F:EwEUtils.NetUtilities.cSocketWrapper.eReadStates.ObjectRead">
	<summary>Data has been read.</summary>
</member><member name="T:EwEUtils.NetUtilities.cSocketWrapper.eReadStates">
	<summary>
 Socket wrapper read states
 </summary>
</member><member name="F:EwEUtils.NetUtilities.cSocketWrapper.cBUFFER_SIZE">
	<summary>Size of buffer for receiving data.</summary>
</member><member name="F:EwEUtils.NetUtilities.cSocketWrapper.m_abBuffer">
	<summary>The one buffer for receiving data.</summary>
</member><member name="F:EwEUtils.NetUtilities.cSocketWrapper.m_socket">
	<summary>The wrapped socket.</summary>
</member><member name="F:EwEUtils.NetUtilities.cSocketWrapper.m_iDataSize">
	<summary>Size, in number of bytes, of the most recent data package.</summary>
</member><member name="F:EwEUtils.NetUtilities.cSocketWrapper.m_iDataRead">
	<summary>Number of bytes read of the most recent data package.</summary>
</member><member name="F:EwEUtils.NetUtilities.cSocketWrapper.m_bAuthorized">
	<summary>States whether or not the socket connection is authorized for communication.</summary>
</member><member name="F:EwEUtils.NetUtilities.cSocketWrapper.m_abReceived">
	<summary>Received bytes buffer.</summary>
</member><member name="F:EwEUtils.NetUtilities.cSocketWrapper.m_abSizeBuff">
	<summary>Buffer for object size </summary>
</member><member name="F:EwEUtils.NetUtilities.cSocketWrapper.m_iSizeRead">
	<summary> Number of bytes in the size buffer m_abSizeBuff </summary>
</member><member name="F:EwEUtils.NetUtilities.cSocketWrapper.m_iID">
	<summary>Client ID.</summary>
</member><member name="F:EwEUtils.NetUtilities.cSocketWrapper.m_strRemoteMachineName">
	<summary>Name of the remote machine.</summary>
</member><member name="M:EwEUtils.NetUtilities.cSocketWrapper.#ctor">
 -------------------------------------------------------------------
 <summary>
 Create a new socket wrapper.
 </summary>
 -------------------------------------------------------------------

</member><member name="M:EwEUtils.NetUtilities.cSocketWrapper.#ctor(System.Int32,System.Net.Sockets.Socket)">
 -------------------------------------------------------------------
 <summary>
 Wrap an existing socket by a new socket wrapper.
 </summary>
	<param name="s">The <see cref="T:System.Net.Sockets.Socket">socket</see> to wrap.</param>
 -------------------------------------------------------------------

</member><member name="F:EwEUtils.NetUtilities.cSocketWrapper.eStatusTypes.Disconnected">
	<summary>The socket is disconnected.</summary>
</member><member name="F:EwEUtils.NetUtilities.cSocketWrapper.eStatusTypes.Connected">
	<summary>The socket is connected.</summary>
</member><member name="F:EwEUtils.NetUtilities.cSocketWrapper.eStatusTypes.Authorized">
	<summary>The socket is authorized.</summary>
</member><member name="T:EwEUtils.NetUtilities.cSocketWrapper.eStatusTypes">
 -------------------------------------------------------------------
 <summary>
 Status flags passed in the <see cref="E:EwEUtils.NetUtilities.cSocketWrapper.OnStatus">OnStatus</see> event.
 </summary>
 -------------------------------------------------------------------

</member><member name="E:EwEUtils.NetUtilities.cSocketWrapper.OnStatus">
 -------------------------------------------------------------------
 <summary>
 Public event reporting status changes in the socket.
 </summary>
	<param name="sw">The <see cref="T:EwEUtils.NetUtilities.cSocketWrapper">socket wrapper</see>
 instance that sent the event.</param>
	<param name="status">The <see cref="T:EwEUtils.NetUtilities.cSocketWrapper.eStatusTypes">status</see>
 of the socket wrapper that sent the event.</param>
	<param name="strData">The data that accompanies the event.</param>
 -------------------------------------------------------------------

</member><member name="E:EwEUtils.NetUtilities.cSocketWrapper.OnData">
 -------------------------------------------------------------------
 <summary>
 Public event reporting that data has been received across the socket.
 </summary>
	<param name="sw">The <see cref="T:EwEUtils.NetUtilities.cSocketWrapper">socket wrapper</see>
 instance that received the data.</param>
	<param name="data">The <see cref="T:EwEUtils.NetUtilities.cSerializableObject">data</see>
 that was received.</param>
 -------------------------------------------------------------------

</member><member name="M:EwEUtils.NetUtilities.cSocketWrapper.Connect(System.String,System.Int32)">
 -------------------------------------------------------------------
 <summary>
 Attempt to connect the socket to a URI, port combination.
 </summary>
	<param name="strURI">The URI to connect to.</param>
	<param name="iPort">The IP port to connect to.</param>
	<returns>True if connected succesfully.</returns>
 -------------------------------------------------------------------

</member><member name="M:EwEUtils.NetUtilities.cSocketWrapper.Connect(System.Net.IPAddress,System.Int32)">
 -------------------------------------------------------------------
 <summary>
 Attempt to connect the socket to an IP address, port combination.
 </summary>
	<param name="ip">The IP address to connect to.</param>
	<param name="iPort">The IP port to connect to.</param>
	<returns>True if connected succesfully.</returns>
 -------------------------------------------------------------------

</member><member name="M:EwEUtils.NetUtilities.cSocketWrapper.Connected">
 -------------------------------------------------------------------
 <summary>
 States whether the socket is connected.
 </summary>
	<returns>True if connected.</returns>
 -------------------------------------------------------------------

</member><member name="M:EwEUtils.NetUtilities.cSocketWrapper.Disconnect">
 -------------------------------------------------------------------
 <summary>
 Disconnects the socket from a server.
 </summary>
	<returns>True if disconnected succesfully.</returns>
 -------------------------------------------------------------------

</member><member name="P:EwEUtils.NetUtilities.cSocketWrapper.RemoteMachineName">
 -------------------------------------------------------------------
 <summary>
 Get/set the machine name of a connected, authorized client.
 </summary>
 -------------------------------------------------------------------

</member><member name="P:EwEUtils.NetUtilities.cSocketWrapper.Authorized">
 -------------------------------------------------------------------
 <summary>
 States whether the socket is authorized to send data for its 
 intended purpose.
 </summary>
	<returns>True if authorized.</returns>
 -------------------------------------------------------------------

</member><member name="M:EwEUtils.NetUtilities.cSocketWrapper.Send(EwEUtils.NetUtilities.cSerializableObject,System.Boolean,System.Boolean)">
 -----------------------------------------------------------------------
 <summary>
 Send <see cref="T:EwEUtils.NetUtilities.cSerializableObject">a serializable object</see> across the socket.
 </summary>
	<param name="obj">The object to send.</param>
	<param name="bRequiresAuthorization">Flag indicating whether the socket
 needs to be <see cref="P:EwEUtils.NetUtilities.cSocketWrapper.Authorized">Authorized</see> to send this data.</param>
	<returns>True if succesful.</returns>
 -----------------------------------------------------------------------

</member><member name="M:EwEUtils.NetUtilities.cSocketWrapper.RelayHandshake(EwEUtils.NetUtilities.cSocketWrapper.cHandShake)">
 -------------------------------------------------------------------
 <summary>
 Send handshake message back to the sender
 </summary>
	<param name="hs"></param>
	<remarks>Messages can be relayed only once.</remarks>
 -------------------------------------------------------------------

</member><member name="M:EwEUtils.NetUtilities.cSocketWrapper.ReadBuffer(System.Int32)">
 -------------------------------------------------------------------
 <summary>
 Read the most recently received chunk of data from the local socket
 <see cref="F:EwEUtils.NetUtilities.cSocketWrapper.m_abBuffer">buffer</see>.
 </summary>
	<param name="iNumBytes">The number of bytes that were received.</param>
 -------------------------------------------------------------------

</member><member name="M:EwEUtils.NetUtilities.cSocketWrapper.ReceiveCallBack(System.IAsyncResult)">
 -----------------------------------------------------------------------
 <summary>
 Callback for asynchronous socket data reading.
 </summary>
	<param name="ar"></param>
 -----------------------------------------------------------------------

</member><member name="M:EwEUtils.NetUtilities.cSocketWrapper.ReceiveHandShake(EwEUtils.NetUtilities.cSocketWrapper,EwEUtils.NetUtilities.cSocketWrapper.cHandShake)">
	<summary>
 Process a Handshake object received by the socket callback ReceiveCallBack(IAsyncResult)
 </summary>
	<param name="sw">SocketWrapper object the handshake was recieved on</param>
	<param name="handshake">cHandshake to process</param>
	<remarks></remarks>
</member><member name="M:EwEUtils.NetUtilities.cSocketWrapper.SendBinary(System.Byte[],System.Boolean,System.Boolean)">
 -------------------------------------------------------------------
 <summary>
 Send a message through the socket. This call is blocking (for now)
 </summary>
	<param name="byMessage">The message bytes to send</param>
	<param name="bRequiresAuthorization">Flag indicating whether the socket
 needs to be <see cref="P:EwEUtils.NetUtilities.cSocketWrapper.Authorized">Authorized</see> to send this data.</param>
	<remarks>
 This method will prepend the message with 4 bytes stating the
 length of the original message. This will allow the receiving
 end to deduct whether all packets for incoming data have arrived.
 </remarks>
 -------------------------------------------------------------------

</member><member name="M:EwEUtils.NetUtilities.cSocketWrapper.ToString">
 -------------------------------------------------------------------
 <summary>
 Returns a string representation of a cSocketWrapper instance.
 </summary>
	<returns>
 A string representing the Remote End Point that the wrapped socket 
 is connected to.
 </returns>
 -------------------------------------------------------------------

</member><member name="T:EwEUtils.NetUtilities.cSocketWrapper">
 =======================================================================
 <summary>
 This class wraps the communication of data back and forth across a
 .NET Socket.
 </summary>
	<remarks>
		<para>Every new chunk of data sent through the wrapped socket are 
 preceded by a 4-byte integer indicating the size of the data. Since
 data sent through a socket is split into packages, the receiving
 socket will keep combining packages until the original data is
 reassembled, which is then made available.</para>
	</remarks>
 =======================================================================

</member><member name="P:EwEUtils.SystemUtilities.IAssemblyInfo.Title">
 ------------------------------------------------------------------------
 <summary>
 Get the value for an assembly 'Title' attribute.
 </summary>
 ------------------------------------------------------------------------

</member><member name="P:EwEUtils.SystemUtilities.IAssemblyInfo.Description">
 ------------------------------------------------------------------------
 <summary>
 Get the value for an assembly 'Description' attribute.
 </summary>
 ------------------------------------------------------------------------

</member><member name="P:EwEUtils.SystemUtilities.IAssemblyInfo.Company">
 ------------------------------------------------------------------------
 <summary>
 Get the value for an assembly 'Company' attribute.
 </summary>
 ------------------------------------------------------------------------

</member><member name="P:EwEUtils.SystemUtilities.IAssemblyInfo.Product">
 ------------------------------------------------------------------------
 <summary>
 Get the value for an assembly 'Product' attribute.
 </summary>
 ------------------------------------------------------------------------

</member><member name="P:EwEUtils.SystemUtilities.IAssemblyInfo.Copyright">
 ------------------------------------------------------------------------
 <summary>
 Get the value for an assembly 'Copyright' attribute.
 </summary>
 ------------------------------------------------------------------------

</member><member name="P:EwEUtils.SystemUtilities.IAssemblyInfo.Trademark">
 ------------------------------------------------------------------------
 <summary>
 Get the value for an assembly 'Trademark' attribute.
 </summary>
 ------------------------------------------------------------------------

</member><member name="P:EwEUtils.SystemUtilities.IAssemblyInfo.AssemblyVersion">
 ------------------------------------------------------------------------
 <summary>
 Get the value for an assembly 'AssemblyVersion' attribute.
 </summary>
 ------------------------------------------------------------------------

</member><member name="P:EwEUtils.SystemUtilities.IAssemblyInfo.ProductVersion">
 ------------------------------------------------------------------------
 <summary>
 Get the value for an assembly 'AssemblyInformationalVersion' attribute.
 </summary>
 ------------------------------------------------------------------------

</member><member name="P:EwEUtils.SystemUtilities.IAssemblyInfo.FileVersion">
 ------------------------------------------------------------------------
 <summary>
 Get the value for an assembly 'AssemblyFileVersion' attribute.
 </summary>
 ------------------------------------------------------------------------

</member><member name="T:EwEUtils.SystemUtilities.IAssemblyInfo">
 ===========================================================================
 <summary>
 Interface for obtaining assembly information.
 </summary>
	<remarks>
 Code adapted 20 Jan 2010 from "Reading Assembly attributes in VB.NET" by Mihir Patak,
 http://www.vbdotnetheaven.com/UploadFile/mpathak/ReadingAssembly04112005053044AM/ReadingAssembly.aspx
 </remarks>
 ===========================================================================

</member><member name="F:EwEUtils.SystemUtilities.cAssemblyInfo.m_ass">
	<summary>The assembly to explore.</summary>
</member><member name="M:EwEUtils.SystemUtilities.cAssemblyInfo.#ctor(System.Reflection.Assembly)">
 ------------------------------------------------------------------------
 <summary>
 Constructor.
 </summary>
	<param name="ass">The assembly to explore.</param>
 ------------------------------------------------------------------------

</member><member name="P:EwEUtils.SystemUtilities.cAssemblyInfo.Company">
	<inheritdoc cref="P:EwEUtils.SystemUtilities.IAssemblyInfo.Company"/>
</member><member name="P:EwEUtils.SystemUtilities.cAssemblyInfo.Copyright">
	<inheritdoc cref="P:EwEUtils.SystemUtilities.IAssemblyInfo.Copyright"/>
</member><member name="P:EwEUtils.SystemUtilities.cAssemblyInfo.Description">
	<inheritdoc cref="P:EwEUtils.SystemUtilities.IAssemblyInfo.Description"/>
</member><member name="P:EwEUtils.SystemUtilities.cAssemblyInfo.Product">
	<inheritdoc cref="P:EwEUtils.SystemUtilities.IAssemblyInfo.Product"/>
</member><member name="P:EwEUtils.SystemUtilities.cAssemblyInfo.Title">
	<inheritdoc cref="P:EwEUtils.SystemUtilities.IAssemblyInfo.Title"/>
</member><member name="P:EwEUtils.SystemUtilities.cAssemblyInfo.Trademark">
	<inheritdoc cref="P:EwEUtils.SystemUtilities.IAssemblyInfo.Trademark"/>
</member><member name="P:EwEUtils.SystemUtilities.cAssemblyInfo.AssemblyVersion">
	<inheritdoc cref="P:EwEUtils.SystemUtilities.IAssemblyInfo.AssemblyVersion"/>
</member><member name="P:EwEUtils.SystemUtilities.cAssemblyInfo.FileVersion">
	<inheritdoc cref="P:EwEUtils.SystemUtilities.IAssemblyInfo.FileVersion"/>
</member><member name="P:EwEUtils.SystemUtilities.cAssemblyInfo.ProductVersion">
	<inheritdoc cref="P:EwEUtils.SystemUtilities.IAssemblyInfo.ProductVersion"/>
</member><member name="T:EwEUtils.SystemUtilities.cAssemblyInfo">
 ===========================================================================
 <summary>
 Class that provides easy access to assembly information. 
 </summary>
	<remarks>
 Code adapted 20 Jan 2010 from "Reading Assembly attributes in VB.NET" by Mihir Patak,
 http://www.vbdotnetheaven.com/UploadFile/mpathak/ReadingAssembly04112005053044AM/ReadingAssembly.aspx
 </remarks>
 ===========================================================================

</member><member name="P:EwEUtils.Core.ITaxonDetailsData.EcologyType">
	<summary></summary>
</member><member name="P:EwEUtils.Core.ITaxonDetailsData.OrganismType">
	<summary></summary>
</member><member name="P:EwEUtils.Core.ITaxonDetailsData.IUCNConservationStatus">
	<summary></summary>
</member><member name="P:EwEUtils.Core.ITaxonDetailsData.OccurrenceStatus">
	<summary></summary>
</member><member name="P:EwEUtils.Core.ITaxonDetailsData.MeanWeight">
	<summary></summary>
</member><member name="P:EwEUtils.Core.ITaxonDetailsData.MeanLifespan">
	<summary></summary>
</member><member name="P:EwEUtils.Core.ITaxonDetailsData.MeanLength">
	<summary></summary>
</member><member name="P:EwEUtils.Core.ITaxonDetailsData.MaxLength">
	<summary></summary>
</member><member name="P:EwEUtils.Core.ITaxonDetailsData.VulnerabilityIndex">
	<summary></summary>
</member><member name="P:EwEUtils.Core.ITaxonDetailsData.LastUpdated">
	<summary></summary>
</member><member name="T:EwEUtils.Core.ITaxonDetailsData">
 -----------------------------------------------------------------------
 <summary>
 Template for exchanging Taxonomy details data.
 </summary>
 -----------------------------------------------------------------------

</member><member name="P:EwEUtils.Core.ITaxonSearchData.Class">
	<summary>Class name of a taxon.</summary>
</member><member name="P:EwEUtils.Core.ITaxonSearchData.Order">
	<summary>Order name of a taxon.</summary>
</member><member name="P:EwEUtils.Core.ITaxonSearchData.Family">
	<summary>Family name of a taxon.</summary>
</member><member name="P:EwEUtils.Core.ITaxonSearchData.Genus">
	<summary>Genus name of a taxon.</summary>
</member><member name="P:EwEUtils.Core.ITaxonSearchData.Species">
	<summary>Species name of a taxon.</summary>
</member><member name="P:EwEUtils.Core.ITaxonSearchData.Common">
	<summary>Common name of a taxon.</summary>
</member><member name="P:EwEUtils.Core.ITaxonSearchData.Phylum">
	<summary>Phylum of a taxon.</summary>
</member><member name="P:EwEUtils.Core.ITaxonSearchData.CodeISSCAAP">
	<summary>ISSCAAP code of a taxon.</summary>
	<remarks>http://www.fao.org/docrep/w7283e/W7283E07.htm</remarks>
</member><member name="P:EwEUtils.Core.ITaxonSearchData.CodeTaxon">
	<summary>Taxonomy code of a taxon.</summary>
	<remarks>http://www.fao.org/fishery/collection/asfis/en</remarks>
</member><member name="P:EwEUtils.Core.ITaxonSearchData.Code3A">
	<summary>3A code of a taxon.</summary>
</member><member name="P:EwEUtils.Core.ITaxonSearchData.Source">
	<summary>Data source that a taxon was obtained for.</summary>
</member><member name="P:EwEUtils.Core.ITaxonSearchData.SourceKey">
	<summary>Key to update this taxonomy from the source.</summary>
</member><member name="P:EwEUtils.Core.ITaxonSearchData.North">
	<summary>Northern limit of the bounding box where this taxon occurs.</summary>
</member><member name="P:EwEUtils.Core.ITaxonSearchData.South">
	<summary>Southern limit of the bounding box where this taxon occurs.</summary>
</member><member name="P:EwEUtils.Core.ITaxonSearchData.East">
	<summary>Eastern limit of the bounding box where this taxon occurs.</summary>
</member><member name="P:EwEUtils.Core.ITaxonSearchData.West">
	<summary>Western limit of the bounding box where this taxon occurs.</summary>
</member><member name="T:EwEUtils.Core.ITaxonSearchData">
 -----------------------------------------------------------------------
 <summary>
 Template for searching Taxonomy data from external data sources.
 </summary>
 -----------------------------------------------------------------------

</member><member name="M:EwEUtils.Drawing.DIBitmap32.CopyMemoryPtr(System.IntPtr,EwEUtils.Drawing.Pixel32@,System.Int32)">
	<summary>
 Copies one or more Pixel32 structures to the specified memory address.
 </summary>
	<param name="toAddress"></param>
	<param name="fromPixel32"></param>
	<param name="bytesToCopy"></param>
</member><member name="M:EwEUtils.Drawing.DIBitmap32.CopyMemoryPtr(EwEUtils.Drawing.Pixel32@,System.IntPtr,System.Int32)">
	<summary>
 Copies one or more Pixel32 structures from the specified memory address.
 </summary>
	<param name="toPixel32"></param>
	<param name="fromAddress"></param>
	<param name="bytesToCopy"></param>
</member><member name="T:EwEUtils.Drawing.DIBitmap32">
	<summary>
 Represents a 32-bit ARGB device-independant bitmap.
 </summary>
	<remarks>
		<para>Original code written by</para>
		<para>Author: Michael A Seel</para>
		<para>Email: mseel1976[at]gmail[dot]com</para>
		<para>url: http://www.freevbcode.com/ShowCode.asp?ID=7801</para>
	</remarks>
</member><member name="M:EwEUtils.Drawing.Pixel32.FromHSB(System.Single,System.Single,System.Single,System.Byte)">
	<summary>
 Creates a pixel from a HSBvalue
 </summary>
	<param name="hue"></param>
	<param name="saturation"></param>
	<param name="brightness"></param>
	<param name="alpha"></param>
	<returns></returns>
	<remarks>Uses 0 to 360 (degree) hue, 0.0 to 1.0 saturation, 0.0 to 1.0 brightness.</remarks>
</member><member name="T:EwEUtils.Drawing.Pixel32">
	<summary>
 Represents a 32-bit ARGB pixel.
 </summary>
</member><member name="M:EwEUtils.Utilities.cNumberUtils.IsFinite(System.Single)">
 -------------------------------------------------------------------
 <summary>
 Returns whether a value has a finite value that can be determined.
 </summary>
	<param name="sValue">Value to evaluate.</param>
	<returns></returns>
 -------------------------------------------------------------------

</member><member name="M:EwEUtils.Utilities.cNumberUtils.FixValue(System.Single,System.Single,System.Single,System.Single)">
 -------------------------------------------------------------------
 <summary>
 'Fix' a number by translating NaN, negative and positive infinity
 values to user-defined values.
 </summary>
	<param name="sValue">Value to test.</param>
	<param name="sNaN">Not a number value to substitute.</param>
	<param name="sNegInf">Negative infinity value to substitute.</param>
	<param name="sPosInf">Positive infinity value to substitute.</param>
	<returns></returns>
 -------------------------------------------------------------------

</member><member name="T:EwEUtils.Utilities.cNumberUtils">
 -----------------------------------------------------------------------
 <summary>
 Helper with utility methods for dealing with numbers.
 </summary>
 -----------------------------------------------------------------------

</member><member name="M:EwEUtils.Utilities.cStringUtils.SplitQualified(System.String,System.String,System.String,System.Boolean)">
 ---------------------------------------------------------------------------
 <summary>
 Split function that supports text qualifiers.
 </summary>
	<param name="strExpression">String to split.</param>
	<param name="strDelimiter">Delimiting character to split by.</param>
	<param name="strQualifier">String qualifier, such as single or double quotes. Qualified string
 segments will not be subdivided by delimiting characters.</param>
	<param name="bIgnoreCase">States whether delimiter and qualifier detection should be case-sensitive.</param>
	<returns>An array of strings.</returns>
	<remarks>
 Original code by Larry Steinle (http://www.codeproject.com/script/Articles/list_articles.asp?userid=2146039),
 obtained from "Split Function that Supports Text Qualifiers", http://www.codeproject.com/useritems/TextQualifyingSplit.asp
 </remarks>
 ---------------------------------------------------------------------------

</member><member name="M:EwEUtils.Utilities.cStringUtils.GetNextNumber(System.String[],System.String,System.String)">
 -------------------------------------------------------------------
 <summary>
 Returns the number that exceeds the highest number in a range of 
 existing autonumbered strings by one.
 </summary>
	<param name="astrItems">Existing autonumbered strings.</param>
	<param name="strMask">Mask used to create the autonumbered strings.</param>
	<param name="strMaskNumberPlaceholder">Placeholder for the number in 
 the <paramref name="strMask">mask</paramref>.</param>
	<returns>An integer value.</returns>
	<remarks type="sidenote">
 I found that using regular expressions did not really pay off as an
 alternative to this maybe clumsy mothodology. Feel free to improve.
 </remarks>
 -------------------------------------------------------------------

</member><member name="M:EwEUtils.Utilities.cStringUtils.ToRoman(System.Int32)">
 -------------------------------------------------------------------
 <summary>
 Converts an arabic value into a roman representation.
 </summary>
	<param name="nArabicValue">The value to convert.</param>
	<returns>A number in roman format, in upper case.</returns>
 -------------------------------------------------------------------

</member><member name="M:EwEUtils.Utilities.cStringUtils.ConvertToInteger(System.String,System.Int32,System.String,System.String)">
 -------------------------------------------------------------------
 <summary>
 Generic conversion helper, converts a string into an integer value using
 the fixed EwE number format of decimal points and NO thousands separator.
 </summary>
	<param name="strNumber">The number to convert.</param>
	<param name="strDecimalSeparator">Separator for decimals.</param>
	<param name="strThousandsSeparator">Separator for thousands (a.k.a digit grouping separator)</param>
	<param name="iNullValue">Value to return in case parse failed.</param>
	<returns>An integer value.</returns>
 -------------------------------------------------------------------

</member><member name="M:EwEUtils.Utilities.cStringUtils.ConvertToSingle(System.String,System.Single,System.String,System.String)">
 -------------------------------------------------------------------
 <summary>
 Generic conversion helper, converts a string into a single value using
 the fixed EwE number format of decimal points and NO thousands separator.
 </summary>
	<param name="strNumber">The number to convert.</param>
	<param name="strDecimalSeparator">Separator for decimals.</param>
	<param name="strThousandsSeparator">Separator for thousands (a.k.a digit grouping separator)</param>
	<param name="sNullValue">Value to return in case parse failed.</param>
	<returns>A single value.</returns>
 -------------------------------------------------------------------

</member><member name="M:EwEUtils.Utilities.cStringUtils.ConvertToDouble(System.String,System.Double,System.String,System.String)">
 -------------------------------------------------------------------
 <summary>
 Generic conversion helper, converts a string into a single value using
 the fixed EwE number format of decimal points and NO thousands separator.
 </summary>
	<param name="strNumber">The number to convert.</param>
	<param name="strDecimalSeparator">Separator for decimals.</param>
	<param name="strThousandsSeparator">Separator for thousands (a.k.a digit grouping separator)</param>
	<param name="dNullValue">Value to return in case parse failed.</param>
	<returns>A double value.</returns>
 -------------------------------------------------------------------

</member><member name="M:EwEUtils.Utilities.cStringUtils.FormatNumber(System.Object,System.String,System.String)">
 -------------------------------------------------------------------
 <summary>
 Generic conversion helper, converts a number into a string using
 the fixed EwE number format of decimal points and NO thousands separator.
 </summary>
	<param name="value"></param>
	<returns></returns>
 -------------------------------------------------------------------

</member><member name="M:EwEUtils.Utilities.cStringUtils.FormatInteger(System.Int32,System.String,System.String)">
 -------------------------------------------------------------------
 <summary>
 Generic conversion helper, converts an integer value into a string using
 the fixed EwE number format of decimal points and NO thousands separator.
 </summary>
	<param name="iValue"></param>
	<returns></returns>
 -------------------------------------------------------------------

</member><member name="M:EwEUtils.Utilities.cStringUtils.FormatSingle(System.Single,System.String,System.String)">
 -------------------------------------------------------------------
 <summary>
 Generic conversion helper, converts a single value into a string using
 the fixed EwE number format of decimal points and NO thousands separator.
 </summary>
	<param name="sValue"></param>
	<returns></returns>
 -------------------------------------------------------------------

</member><member name="M:EwEUtils.Utilities.cStringUtils.FormatDouble(System.Double,System.String,System.String)">
 -------------------------------------------------------------------
 <summary>
 Generic conversion helper, converts a double value into a string using
 the fixed EwE number format of decimal points and NO thousands separator.
 </summary>
	<param name="dValue"></param>
	<returns></returns>
 -------------------------------------------------------------------

</member><member name="M:EwEUtils.Utilities.cStringUtils.IsValidEmail(System.String)">
 -------------------------------------------------------------------
 <summary>
 Method for determining if a string represents a valid email address.
 </summary>
	<param name="strEmail">Email address to validate</param>
	<returns>True is valid, false if not valid</returns>
	<remarks>
 Uses regular expressions in this check, as it is a more thorough
 way of checking an address provided.
 </remarks>
 -------------------------------------------------------------------

</member><member name="M:EwEUtils.Utilities.cStringUtils.ToHexString(System.Byte[])">
 -------------------------------------------------------------------
 <summary>
 Convert a byte array to a string of hexadecimal numbers.
 </summary>
	<param name="bytes"></param>
	<returns></returns>
 -------------------------------------------------------------------

</member><member name="M:EwEUtils.Utilities.cStringUtils.GenerateHash(System.String)">
 -----------------------------------------------------------------------
 <summary>
 Convert a string into a base64 MD5 hash.
 </summary>
	<param name="strSrc">The string to hash.</param>
	<returns>A base64 MD5 hash.</returns>
 -----------------------------------------------------------------------

</member><member name="M:EwEUtils.Utilities.cStringUtils.ReplaceAll(System.String,System.String,System.String)">
 -----------------------------------------------------------------------
 <summary>
 Replace all occurrences of a pattern in a source string with a replacement.
 </summary>
	<param name="strSrc">Source string the replace all instances into.</param>
	<param name="strPattern">The search pattern to replace.</param>
	<param name="strReplace">The search pattern replacement string.</param>
	<returns>An amphetamine-addicted monk seal.</returns>
 -----------------------------------------------------------------------

</member><member name="M:EwEUtils.Utilities.cStringUtils.CompactString(System.String,System.Int32,System.Drawing.Font,System.Windows.Forms.TextFormatFlags)">
 -----------------------------------------------------------------------
 <summary>
 String truncation method, blatantly copied from 
 http://www.codeproject.com/KB/vb/NewPathCompactPath.aspx
 </summary>
	<param name="strSrc">The string to truncate with path ellipses.</param>
	<param name="iWidth">Allowed width of the string in pixels.</param>
	<param name="ft">The font to measure the string with.</param>
	<param name="tfFlags">Optional string format flags</param>
	<returns>A truncated string.</returns>
	<remarks>Note that this method does not modify the original string.</remarks>
 -----------------------------------------------------------------------

</member><member name="M:EwEUtils.Utilities.cStringUtils.ArrayToString(System.Array,System.Int32[0:,0:],System.Boolean,System.Object)">
 -----------------------------------------------------------------------
 <summary>
 Convert a 2-dimensional (map) array to a string for database storage.
 </summary>
	<param name="data">Data to write to the string.</param>
	<param name="dataDepth">Optional depth data mask to apply. If provided, only 
 water cells or land cells are stored based on the value of <paramref name="bWaterOnly"/>.</param>
	<param name="bWaterOnly">Flag, stating whether only values should be written
 for water cells (true) or land cells (false), as indicated by parameter <paramref name="dataDepth"/>.</param>
	<param name="valueSet">Value to find in the data and to write to the string,
 or Nothing if any value from the data must be written to the string.</param>
	<returns>The resulting converted string.</returns>
	<remarks>This code is optimized to include as few characters as possible
 in the output string without having to revert to run-length encoding.
 Rows without any values will be left empty and are only marked by a semi-colon.</remarks>
 -----------------------------------------------------------------------

</member><member name="M:EwEUtils.Utilities.cStringUtils.StringToArray(System.String,System.Array,System.Int32[0:,0:],System.Boolean,System.Object)">
 -----------------------------------------------------------------------
 <summary>
	</summary>
	<param name="strData"></param>
	<param name="data"></param>
	<param name="land"></param>
	<param name="bWaterOnly"></param>
	<param name="valueGet"></param>
	<returns></returns>
 -----------------------------------------------------------------------

</member><member name="T:EwEUtils.Utilities.cStringUtils.eFilterIndexTypes">
	<summary>
 Enumerated type, stating where to find the data filter in a 3D map array.
 </summary>
	<remarks></remarks>
</member><member name="M:EwEUtils.Utilities.cStringUtils.ArrayToString(System.Array,System.Int32,EwEUtils.Utilities.cStringUtils.eFilterIndexTypes,System.Int32[0:,0:],System.Boolean,System.Object)">
 -----------------------------------------------------------------------
 <summary>
 Convert a 3-dimensional (map) array to a string for database storage.
 </summary>
	<param name="data">Data to write to the string.</param>
	<param name="dataDepth">Optional depth data mask to apply. If provided, only 
 water cells or land cells are stored based on the value of <paramref name="bWaterOnly"/>.</param>
	<param name="bWaterOnly">Flag, stating whether only values should be written
 for water cells (true) or land cells (false), as indicated by parameter <paramref name="dataDepth"/>.</param>
	<param name="valueSet">Value to find in the data and to write to the string,
 or Nothing if any value from the data must be written to the string.</param>
	<returns>The resulting converted string.</returns>
	<remarks>This code is optimized to include as few characters as possible
 in the output string without having to revert to run-length encoding.
 Rows without any values will be left empty and are only marked by a semi-colon.</remarks>
 -----------------------------------------------------------------------

</member><member name="M:EwEUtils.Utilities.cStringUtils.StringToArray(System.String,System.Int32,EwEUtils.Utilities.cStringUtils.eFilterIndexTypes,System.Array,System.Int32[0:,0:],System.Boolean,System.Object)">
 -----------------------------------------------------------------------
 <summary>
	</summary>
	<param name="strData"></param>
	<param name="iFilter"></param>
	<param name="filterIndex"></param>
	<param name="data"></param>
	<param name="land"></param>
	<param name="bWaterOnly"></param>
	<param name="valueGet"></param>
	<returns></returns>
 -----------------------------------------------------------------------

</member><member name="T:EwEUtils.Utilities.cStringUtils">
 ---------------------------------------------------------------------------
 <summary>
 Class offering string utilities.
 </summary>
 ---------------------------------------------------------------------------

</member><member name="T:EwEUtils.Utilities.UrlBuilder">
 ---------------------------------------------------------------------------
 <summary>
		<see cref="T:System.UriBuilder">System.UriBuilder</see> extension.
 </summary>
	<remarks>
 Original code by Lotuspro (http://www.codeproject.com/script/profile/whos_who.asp?vt=arts#amp;id=507953)
 obtained from "a useful UriBuilder class", http://www.codeproject.com/aspnet/UrlBuilder.asp
 </remarks>
 ---------------------------------------------------------------------------

</member><member name="M:EwEUtils.Utilities.cDrawingUtils.ContentAlignmentToStringFormat(System.Drawing.ContentAlignment)">
 -------------------------------------------------------------------
 <summary>
 Convert a <see cref="T:System.Drawing.ContentAlignment">ContentAlignment</see> flag
 into a <see cref="T:System.Drawing.StringFormat">StringFormat</see> flag.
 </summary>
	<param name="ca">Content alignment flag to convert.</param>
	<returns>A StringFormat value.</returns>
 -------------------------------------------------------------------

</member><member name="T:EwEUtils.Utilities.cDrawingUtils">
 -----------------------------------------------------------------------
 <summary>
 Class providing a collection of <see cref="N:EwEUtils.Drawing">Drawing</see>-related utility methods.
 </summary>
 -----------------------------------------------------------------------

</member><member name="M:EwEUtils.Utilities.cResourceUtils.SaveResourceToFile(System.String,System.String,System.Boolean,System.Reflection.Assembly,System.String)">
 -----------------------------------------------------------------------
 <summary>
 Saves an embedded resource to a file
 </summary>
	<param name="strResourceName">The name of the resource, including  in the current assembly, current namespace.</param>
	<param name="strFileName">The name of the file to save the resource to</param>
	<param name="bOverwrite">States whether an existing file is allowed to be overwritten</param>
	<param name="ass">The assembly to obtain the resource from.</param>
	<param name="strNamespace">The namespace to obtain the resource from.</param>
	<returns>True if succesful</returns>
 -----------------------------------------------------------------------

</member><member name="M:EwEUtils.Utilities.cResourceUtils.GetMessageBoxIcon(System.Windows.Forms.MessageBoxIcon)">
 -------------------------------------------------------------------
 <summary>
 Get the system icon for a <see cref="T:System.Windows.Forms.MessageBoxIcon">message box 
 icon</see> identifier.
 </summary>
	<param name="mbi"><see cref="T:System.Windows.Forms.MessageBoxIcon">message box icon</see>
 identifier to get the system icon for.</param>
	<returns>An <see cref="T:System.Drawing.Icon">Icon</see>, or Nothing if the icon
 could not be found.</returns>
 -------------------------------------------------------------------

</member><member name="M:EwEUtils.Utilities.cResourceUtils.LoadString(System.String,System.Reflection.Assembly,System.String,System.Globalization.CultureInfo)">
 -------------------------------------------------------------------
 <summary>
 Load a resource string from a .NET assembly.
 </summary>
	<param name="strName"></param>
	<param name="ass"></param>
	<param name="strNamespace"></param>
	<param name="culture"></param>
	<returns></returns>
 -------------------------------------------------------------------

</member><member name="F:EwEUtils.Commands.ControlHandler.m_cmd">
	<summary>The associated Command.</summary>
</member><member name="M:EwEUtils.Commands.ControlHandler.#ctor(System.Object@,System.Object@)">
 ---------------------------------------------------------------------------
 <summary>
 Constructor, initializes a new instance of a ControlHandler. Connects a
 Command instance to a User Interface control.
 </summary>
	<param name="objCmd">The Command instance to attach.</param>
	<param name="objGUI">The User Interface instance to attach.</param>
 ---------------------------------------------------------------------------

</member><member name="P:EwEUtils.Commands.ControlHandler.Command">
 ---------------------------------------------------------------------------
 <summary>
 Helper method; exposes the attached Command to derived classes.
 </summary>
 ---------------------------------------------------------------------------

</member><member name="M:EwEUtils.Commands.ControlHandler.Update">
 ---------------------------------------------------------------------------
 <summary>
 Override this to implement how the User Interface control will reflect
 the Command state.
 </summary>
 ---------------------------------------------------------------------------

</member><member name="T:EwEUtils.Commands.ControlHandler">
 ---------------------------------------------------------------------------
 <summary>
 Base class for connecting a Command to a User Interface Control
 </summary>
 ---------------------------------------------------------------------------

</member><member name="T:EwEUtils.Commands.ToolStripMenuItemControlHandler">
 ---------------------------------------------------------------------------
 <summary>
 Implementation of a connecting between a Command and a ToolStripMenuItem.
 </summary>
 ---------------------------------------------------------------------------

</member><member name="T:EwEUtils.Commands.ToolStripButtonControlHandler">
 ---------------------------------------------------------------------------
 <summary>
 Implementation of a connecting between a Command and a ToolStripButton.
 </summary>
 ---------------------------------------------------------------------------

</member><member name="T:EwEUtils.Commands.ToolStripButtonDropDownControlHandler">
 ---------------------------------------------------------------------------
 <summary>
 Implementation of a connecting between a Command and a ToolStripButton.
 </summary>
 ---------------------------------------------------------------------------

</member><member name="T:EwEUtils.Commands.ToolStripSplitButtonHandler">
 ---------------------------------------------------------------------------
 <summary>
 Implementation of a connecting between a Command and a ToolStripSplitButton.
 </summary>
 ---------------------------------------------------------------------------

</member><member name="T:EwEUtils.Commands.ButtonControlHandler">
 ---------------------------------------------------------------------------
 <summary>
 Implementation of a connecting between a Command and a Button.
 </summary>
 ---------------------------------------------------------------------------

</member><member name="T:EwEUtils.Utilities.cAssemblyUtils.AssemblyNameComparer">
 -----------------------------------------------------------------------
 <summary>
 Helper class to sort an assembly name list
 </summary>
 -----------------------------------------------------------------------

</member><member name="M:EwEUtils.Utilities.cAssemblyUtils.GetName(System.Reflection.AssemblyName)">
 -----------------------------------------------------------------------
 <summary>
 Returns the short name of an assembly.
 </summary>
	<param name="an">The <see cref="T:System.Reflection.AssemblyName">AssemblyName</see> to return
 the name for.</param>
	<returns></returns>
 -----------------------------------------------------------------------

</member><member name="M:EwEUtils.Utilities.cAssemblyUtils.GetToken(System.Reflection.AssemblyName)">
 -----------------------------------------------------------------------
 <summary>
 Extracts the public key token of an assembly and returns it as a string.
 </summary>
	<param name="an">The <see cref="T:System.Reflection.AssemblyName">AssemblyName</see> to return
 the public key token for.</param>
	<returns></returns>
 -----------------------------------------------------------------------

</member><member name="M:EwEUtils.Utilities.cAssemblyUtils.GetVersion(System.Reflection.AssemblyName)">
 -----------------------------------------------------------------------
 <summary>
 Returns the version number of an assembly.
 </summary>
	<param name="an">The <see cref="T:System.Reflection.AssemblyName">AssemblyName</see> to return
 the version for.</param>
	<returns></returns>
 -----------------------------------------------------------------------

</member><member name="M:EwEUtils.Utilities.cAssemblyUtils.GetAssemblyName(System.Type)">
 -----------------------------------------------------------------------
 <summary>
 Get an assembly name for a class type.
 </summary>
	<param name="tclass">The class to return the defining assembly name for.</param>
	<returns>An AssemblyName, or nothing if the class type could not be resolved.</returns>
 -----------------------------------------------------------------------

</member><member name="M:EwEUtils.Utilities.cAssemblyUtils.GetSummary(System.Reflection.Assembly)">
 -----------------------------------------------------------------------
 <summary>
 Reports all referenced, proprietary <see cref="T:System.Reflection.AssemblyName">assemblies</see> 
 for a given assembly.
 </summary>
	<param name="entry">The entry assembly to find the summary of referenced
 assemblies for.</param>
	<remarks>
 The array of assembly names will be sorted by name.
 </remarks>
 -----------------------------------------------------------------------

</member><member name="T:EwEUtils.Utilities.cAssemblyUtils">
 =======================================================================
 <summary>
 Helper class offering miscellaneous Assemblyname-related functionalities.
 </summary>
 =======================================================================

</member><member name="M:EwEUtils.SystemUtilities.cSystemUtils.GetUserName">
 -----------------------------------------------------------------------
 <summary>
 Get the username for the active logged-in user.
 </summary>
	<returns>The username for the active logged-in user.</returns>
 -----------------------------------------------------------------------

</member><member name="M:EwEUtils.SystemUtilities.cSystemUtils.AppExec(System.String,System.String,System.String@,System.String)">
 -----------------------------------------------------------------------
 <summary>
 Function that execute external applications for all plug-ins
 </summary>
	<param name="strAppName">Name of the executable to execute (including extension)</param>
	<param name="strPath">Application path to use. Provide an empty string
 here to detect the application file in all possible locations.</param>
	<param name="strOutputParameters">Arguments to pass to the executable.</param>
 -----------------------------------------------------------------------

</member><member name="M:EwEUtils.SystemUtilities.cSystemUtils.ApplicationLaunchLocations">
 -----------------------------------------------------------------------
 <summary>
 Returns an array of possible application locations.</summary>
	<returns>
	</returns>
 -----------------------------------------------------------------------

</member><member name="M:EwEUtils.SystemUtilities.cSystemUtils.ExecuteApplication(System.String,System.String,System.String,System.String@)">
 -----------------------------------------------------------------------
 <summary>
 [to document]
 </summary>
	<param name="strLocationDir"></param>
	<param name="strAppName"></param>
	<param name="strOutputParameters"></param>
	<returns></returns>
 -----------------------------------------------------------------------

</member><member name="M:EwEUtils.SystemUtilities.cSystemUtils.Is64Bit">
 -----------------------------------------------------------------------
 <summary>
 Returns whether this application is running in 64 bit mode.
 </summary>
	<returns>True if running in 64 bit mode.</returns>
 -----------------------------------------------------------------------

</member><member name="M:EwEUtils.SystemUtilities.cSystemUtils.IsAdministrator">
 -----------------------------------------------------------------------
 <summary>
 Returns whether this application is running with administrator privileges.
 </summary>
	<returns>True if running with administrator privileges.</returns>
	<remarks>
 http://www.codekeep.net/snippets/16758a1f-6186-47a7-98ba-30449fe74cda.aspx
 </remarks>
 -----------------------------------------------------------------------

</member><member name="M:EwEUtils.SystemUtilities.cSystemUtils.ApplicationSettingsPath(System.Boolean,System.String)">
 -------------------------------------------------------------------
 <summary>
 Get the path for storing application settings
 </summary>
	<param name="bPerUserSetting">States if this is a per-user setting
 (True) or a setting for all users (False).</param>
	<param name="strApplication">Application to obtain the path for.</param>
	<returns></returns>
 -------------------------------------------------------------------

</member><member name="M:EwEUtils.Win32Api.cINIFile.#ctor(System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Constructor, initializes a new INI file interface.
 </summary>
	<param name="strFilename">The name of the INI file to access.</param>
 -----------------------------------------------------------------------------

</member><member name="P:EwEUtils.Win32Api.cINIFile.FileName">
 -----------------------------------------------------------------------------
 <summary>
 Gets the current filename
 </summary>
 -----------------------------------------------------------------------------

</member><member name="M:EwEUtils.Win32Api.cINIFile.GetString(System.String,System.String,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Returns a string from an INI file
 </summary>
	<param name="strSection">INI section to access</param>
	<param name="strKey">INI key to access</param>
	<param name="strDefault">Default string value</param>
	<returns>The INI string, or the default value in case the key is not found in indicated section</returns>
 -----------------------------------------------------------------------------

</member><member name="M:EwEUtils.Win32Api.cINIFile.GetInteger(System.String,System.String,System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 Returns an integer from an INI file
 </summary>
	<param name="strSection">INI section to access</param>
	<param name="strKey">INI key to access</param>
	<param name="nDefault">Default value</param>
	<returns>The INI string, or the default value in case the key is not found in indicated section</returns>
 -----------------------------------------------------------------------------

</member><member name="M:EwEUtils.Win32Api.cINIFile.GetBoolean(System.String,System.String,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 Returns a boolean from an INI file
 </summary>
	<param name="strSection">INI section to access</param>
	<param name="strKey">INI key to access</param>
	<param name="bDefault">Default value</param>
	<returns>The INI string, or the default value in case the key is not found in indicated section</returns>
 -----------------------------------------------------------------------------

</member><member name="M:EwEUtils.Win32Api.cINIFile.WriteString(System.String,System.String,System.String)">
 -----------------------------------------------------------------------------
 <summary>
 Writes a string to an INI file
 </summary>
	<param name="strSection">INI section to access</param>
	<param name="strKey">INI key to access</param>
	<param name="strValue ">The value to write value</param>
 -----------------------------------------------------------------------------

</member><member name="M:EwEUtils.Win32Api.cINIFile.WriteInteger(System.String,System.String,System.Int32)">
 -----------------------------------------------------------------------------
 <summary>
 Writes a string to an INI file
 </summary>
	<param name="strSection">INI section to access</param>
	<param name="strKey">INI key to access</param>
	<param name="nValue ">The value to write value</param>
 -----------------------------------------------------------------------------

</member><member name="M:EwEUtils.Win32Api.cINIFile.WriteBoolean(System.String,System.String,System.Boolean)">
 -----------------------------------------------------------------------------
 <summary>
 Writes a string to an INI file
 </summary>
	<param name="strSection">INI section to access</param>
	<param name="strKey">INI key to access</param>
	<param name="bValue ">The value to write value</param>
 -----------------------------------------------------------------------------

</member><member name="T:EwEUtils.Win32Api.cINIFile">
 -----------------------------------------------------------------------------
 <summary>
 Implements a simple read/write interface to a Windows INI file.<br/><br/>
 Written by Karl Moore, obtained May 26/05 from http://www.developer.com/net/asp/article.php/3287991
 </summary>
 -----------------------------------------------------------------------------

</member><member name="M:EwEUtils.Utilities.cDateUtils.DateToJulian(System.DateTime)">
 -------------------------------------------------------------------
 <summary>
 Get the Julian date for a given <see cref="T:System.DateTime">date</see>. If no 
 date is specified, the Julian date for the current time is returned.
 </summary>
	<param name="dt">The date to return the Julian date for.</param>
	<returns>A Julian date.</returns>
 -------------------------------------------------------------------

</member><member name="M:EwEUtils.Utilities.cDateUtils.JulianToDate(System.Double)">
 -------------------------------------------------------------------
 <summary>
 Get a <see cref="T:System.DateTime">date</see> for a Julian date value.
 </summary>
	<param name="dJulian">The Julian date to return a Date instance for.</param>
	<returns>A Date instance.</returns>
 -------------------------------------------------------------------

</member><member name="M:EwEUtils.Utilities.cDateUtils.GetMonthName(System.Int32,System.Boolean)">
 -------------------------------------------------------------------
 <summary>
 Get the textual representation for a month number.
 </summary>
	<param name="iMonth">The month to format [1, 12]</param>
	<returns></returns>
 -------------------------------------------------------------------

</member><member name="M:EwEUtils.Utilities.cDateUtils.Easter(System.Int32)">
 -------------------------------------------------------------------
 <summary>
 Calculate the date of Easter for a given year in Gregorian calendars.
 </summary>
	<param name="y">The Gregorian year to calculate easter for [1583, 4099]</param>
	<returns>The date of Easter Sunday.</returns>
	<remarks>
 This algorithm is adapted from http://www.gmarts.org/index.php?go=415, 
 whcih in turn is adapted from a faq document by Claus Tondering
 URL: http://www.pip.dknet.dk/~pip10160/calendar.faq2.txt
 E-mail: c-t@pip.dknet.dk.
 The FAQ algorithm is based in part on the algorithm of Oudin (1940)
 as quoted in "Explanatory Supplement to the Astronomical Almanac",
 P. Kenneth Seidelmann, editor.
 </remarks>
 -------------------------------------------------------------------

</member><member name="T:EwEUtils.Utilities.cDateUtils">
 -----------------------------------------------------------------------
 <summary>
 Class providing a collection of <see cref="T:System.DateTime">date</see>-related utility methods.
 </summary>
 -----------------------------------------------------------------------

</member><member name="P:EwEUtils.Core.ICoreMonthFilter.Month">
 -----------------------------------------------------------------------
 <summary>
 Get/set the month to filter by.
 </summary>
 -----------------------------------------------------------------------

</member><member name="T:EwEUtils.Core.ICoreMonthFilter">
	<summary>
 Interface for objects that can be filtered by month.
 </summary>
</member><member name="F:EwEUtils.NetUtilities.cSerializableObject.m_bValid">
	<summary>Flag stating that the contents of this object is valid.</summary>
</member><member name="M:EwEUtils.NetUtilities.cSerializableObject.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
 -----------------------------------------------------------------------
 <summary>
 Serializes the object
 </summary>
	<param name="info"></param>
	<param name="context"></param>
	<remarks>
 This takes care of all objects in the inheritance hierarchy. Derived classes 
 should only override this method to add extra data.
 </remarks>
 -----------------------------------------------------------------------

</member><member name="T:EwEUtils.NetUtilities.cSerializableObject">
 ===========================================================================
 <summary>
 Implements a base class for a serializable objects.
 </summary>
 ===========================================================================

</member><member name="M:EwEUtils.Commands.cCommandHandler.#ctor">
 -----------------------------------------------------------------------
 <summary>
 Constructor, initializes a new instance of this class.
 </summary>
 -----------------------------------------------------------------------

</member><member name="F:EwEUtils.Commands.cCommandHandler.m_dictCommands">
	<summary>Dictionary of <see cref="T:EwEUtils.Commands.cCommand">Commands</see>.</summary>
</member><member name="M:EwEUtils.Commands.cCommandHandler.Add(EwEUtils.Commands.cCommand)">
 -----------------------------------------------------------------------
 <summary>
 Add a <see cref="T:EwEUtils.Commands.cCommand">Command</see> to the handler.
 </summary>
	<param name="c">The command to add.</param>
 -----------------------------------------------------------------------

</member><member name="M:EwEUtils.Commands.cCommandHandler.Remove(EwEUtils.Commands.cCommand)">
 -----------------------------------------------------------------------
 <summary>
 Remove a <see cref="T:EwEUtils.Commands.cCommand">Command</see> from the handler.
 </summary>
	<param name="c">The command to remove.</param>
 -----------------------------------------------------------------------

</member><member name="M:EwEUtils.Commands.cCommandHandler.GetCommand(System.String)">
 -----------------------------------------------------------------------
 <summary>
 Retrieve a <see cref="T:EwEUtils.Commands.cCommand">Command</see> by its name.
 </summary>
	<param name="strName">The name of the Command to find.</param>
	<returns>
 A <see cref="T:EwEUtils.Commands.cCommand">Command</see>, or Nothing if the command could not 
 be found.
 </returns>
 -----------------------------------------------------------------------

</member><member name="M:EwEUtils.Commands.cCommandHandler.OnIdle(System.Object,System.EventArgs)">
 -------------------------------------------------------------------
 <summary>
 Application idle time handler, makes sure that every registered command 
 is updated.
 </summary>
	<remarks>
 This method should be invoked in response to the
 .NET Application.OnIdle event.
 </remarks>
 -------------------------------------------------------------------

</member><member name="F:EwEUtils.Commands.cCommandHandler.m_dictHandlerTypes">
	<summary>Dictionary of registered GUI control handler types.</summary>
</member><member name="M:EwEUtils.Commands.cCommandHandler.AddControlHandlerType(System.Object,System.Type)">
 -----------------------------------------------------------------------
 <summary>
 Register a GUI control handler type.
 </summary>
	<param name="obj">An instance of a GUI object to add a handler type for.</param>
	<param name="t">The handler type that will handle events for GUI objects
 of the same type.</param>
 -----------------------------------------------------------------------

</member><member name="M:EwEUtils.Commands.cCommandHandler.AddControlHandlerType(System.String,System.Type)">
 -----------------------------------------------------------------------
 <summary>
 Register a GUI control handler type.
 </summary>
	<param name="str">A Type indicator of a GUI object to add a handler type for.</param>
	<param name="t">The handler type that will handle events for GUI objects
 of the same type.</param>
 -----------------------------------------------------------------------

</member><member name="M:EwEUtils.Commands.cCommandHandler.GetControlHandlerType(System.Object)">
 -----------------------------------------------------------------------
 <summary>
 Returns a registered GUI control handler type.
 </summary>
	<param name="obj">An instance of a GUI object to return the handler type for.</param>
 -----------------------------------------------------------------------

</member><member name="M:EwEUtils.Commands.cCommandHandler.GetControlHandlerType(System.String)">
 -----------------------------------------------------------------------
 <summary>
 Returns a registered GUI control handler type.
 </summary>
	<param name="str">A Type indicator of a GUI object to return 
 the handler type for.</param>
 -----------------------------------------------------------------------

</member><member name="T:EwEUtils.Commands.cCommandHandler">
 -----------------------------------------------------------------------
 <summary>
 The CommandHandler is the central repository for storing and retrieving
 <see cref="T:EwEUtils.Commands.cCommand">Commands</see> in a User Interface. Additionally, this
 class serves as a central registry point for <see cref="T:EwEUtils.Commands.ControlHandler">ControlHandlers</see>.
 </summary>
 -----------------------------------------------------------------------

</member><member name="M:EwEUtils.Core.IEcospaceResultsWriter.WriteResults(System.Object)">
	<summary>
 Save time step data to file
 </summary>
	<param name="SpaceTimeStepResults">cEcospaceTimestep as object containing the data to save.</param>
	<remarks></remarks>
</member><member name="M:EwEUtils.Core.IEcospaceResultsWriter.Init(System.Object)">
	<summary>
 Init to the current cCore
 </summary>
	<param name="theCore"></param>
	<remarks></remarks>
</member><member name="M:EwEUtils.Core.IEcospaceResultsWriter.StartWrite">
	<summary>
 Called when as Ecospace model run is about to start
 </summary>
	<remarks>This can be used to initialized and file data at the start of a run</remarks>
</member><member name="M:EwEUtils.Core.IEcospaceResultsWriter.EndWrite">
	<summary>
 Called at the end of an Ecospace model run
 </summary>
	<remarks>Cleanup after an Ecospace run has completed</remarks>
</member><member name="T:EwEUtils.Core.IEcospaceResultsWriter">
	<summary>
 Interface for writing Ecospace time step results to file
 </summary>
	<remarks></remarks>
</member><member name="T:EwEUtils.Core.IEData">
 -----------------------------------------------------------------------
 <summary>
 Template for exchanging Economic data.
 </summary>
 -----------------------------------------------------------------------

</member><member name="P:EwEUtils.Core.IEconomicData.Total">
	<summary>Get total economic values.</summary>
</member><member name="P:EwEUtils.Core.IEconomicData.Subtotal(System.Int32)">
	<summary>Get a subtotal block.</summary>
</member><member name="P:EwEUtils.Core.IEconomicData.NumSubtotals">
	<summary>Get the number of subtotal blocks.</summary>
</member><member name="P:EwEUtils.Core.IEconomicData.SubtotalCounter">
	<summary>Get the core counter that represents the grouping of subtotals.</summary>
</member><member name="T:EwEUtils.Core.IEconomicData">
 -----------------------------------------------------------------------
 <summary>
 Template for exchanging Economic data.
 </summary>
 -----------------------------------------------------------------------

</member><member name="F:EwEUtils.Commands.cCommand.m_cmdh">
	<summary>Command handler to connect to.</summary>
</member><member name="F:EwEUtils.Commands.cCommand.m_strName">
	<summary>Name of the command.</summary>
</member><member name="F:EwEUtils.Commands.cCommand.m_bLockUpdates">
	<summary>Update lock flag to prevent involuntary loops.</summary>
</member><member name="F:EwEUtils.Commands.cCommand.m_bInvoking">
	<summary>Helper flag, stating whether a command is being invoked.</summary>
</member><member name="F:EwEUtils.Commands.cCommand.m_bEnabled">
	<summary>Command enabled state.</summary>
</member><member name="F:EwEUtils.Commands.cCommand.m_bChecked">
	<summary>Command checked state.</summary>
</member><member name="F:EwEUtils.Commands.cCommand.m_objTag">
	<summary>Optional Tag attached to the command.</summary>
</member><member name="M:EwEUtils.Commands.cCommand.#ctor(EwEUtils.Commands.cCommandHandler,System.String,System.Object)">
 -----------------------------------------------------------------------
 <summary>
 Constructor, initializes a new instance of this class.
 </summary>
	<param name="strName">The name to assign to the command.</param>
 -----------------------------------------------------------------------

</member><member name="F:EwEUtils.Commands.cCommand.m_dictControls">
	<summary>Controls connected to this command.</summary>
</member><member name="M:EwEUtils.Commands.cCommand.AddControl(System.Object)">
 ----------------------------------------------------------------------
 <summary>
 Call to add a User Interface Control to a command.
 </summary>
	<param name="objGUI">The control to add.</param>
	<remarks>
 The <see cref="T:EwEUtils.Commands.cCommandHandler">cCommandHandler</see> predefines a few
 <see cref="T:EwEUtils.Commands.ControlHandler">ControlHandler</see> Types that implement
 GUI behaviour for specific User Interface Control classes. Ensure
 that the objGUI object has an associated ControlHandler available
 otherwise the given Control will not be updated whenever the Command
 state is changed.
 </remarks>
 ----------------------------------------------------------------------

</member><member name="M:EwEUtils.Commands.cCommand.RemoveControl(System.Object)">
 ----------------------------------------------------------------------
 <summary>
 Call to remove a User Interface Control from a command.
 </summary>
	<param name="objGUI">The control to remove.</param>
 ----------------------------------------------------------------------

</member><member name="E:EwEUtils.Commands.cCommand.OnPreInvoke">
 -----------------------------------------------------------------------
 <summary>
 Event that will be called before when a Command is executed.
 </summary>
	<param name="cmd">The command that is invoked.</param>
 -----------------------------------------------------------------------

</member><member name="E:EwEUtils.Commands.cCommand.OnInvoke">
 -----------------------------------------------------------------------
 <summary>
 Event that will be called when a Command is executed.
 </summary>
	<param name="cmd">The command that is invoked.</param>
 -----------------------------------------------------------------------

</member><member name="E:EwEUtils.Commands.cCommand.OnPostInvoke">
 -----------------------------------------------------------------------
 <summary>
 Event that will be called after a Command is executed.
 </summary>
	<param name="cmd">The command that is invoked.</param>
 -----------------------------------------------------------------------

</member><member name="M:EwEUtils.Commands.cCommand.Invoke">
 -----------------------------------------------------------------------
 <summary>
 Base implementation for invoking a Command. Use either this implementation
 or subclass the Command and implement a complex Invoke() variant.
 </summary>
 -----------------------------------------------------------------------

</member><member name="E:EwEUtils.Commands.cCommand.OnUpdate">
 -----------------------------------------------------------------------
 <summary>
 Event that will be called when a command is updated.
 </summary>
	<param name="cmd">The command that is updated.</param>
 -----------------------------------------------------------------------

</member><member name="M:EwEUtils.Commands.cCommand.Update">
 -----------------------------------------------------------------------
 <summary>
 Base implementation for updating a Command. Use either this implementation
 or subclass the Command and implement a complex Update() variant.
 </summary>
 -----------------------------------------------------------------------

</member><member name="P:EwEUtils.Commands.cCommand.Enabled">
 -----------------------------------------------------------------------
 <summary>
 Get/Set the command enabled state.
 </summary>
 -----------------------------------------------------------------------

</member><member name="P:EwEUtils.Commands.cCommand.Checked">
 -----------------------------------------------------------------------
 <summary>
 Get/Set the command checked state.
 </summary>
 -----------------------------------------------------------------------

</member><member name="P:EwEUtils.Commands.cCommand.Name">
 -----------------------------------------------------------------------
 <summary>
 Get the command name.
 </summary>
 -----------------------------------------------------------------------

</member><member name="P:EwEUtils.Commands.cCommand.Tag">
 -----------------------------------------------------------------------
 <summary>
 Get/set the command tag.
 </summary>
 -----------------------------------------------------------------------

</member><member name="P:EwEUtils.Commands.cCommand.IsInvoking">
 -----------------------------------------------------------------------
 <summary>
 Get whether the command is currently invoking.
 </summary>
 -----------------------------------------------------------------------

</member><member name="T:EwEUtils.Commands.cCommand">
 ---------------------------------------------------------------------------
 <summary>
 The Command class implements a generic user interface command that can be 
 linked to a series of User Interface Controls. All linked Controls will
 be updated whenever the Command state changes.
 </summary>
 ---------------------------------------------------------------------------

</member><member name="F:EwEUtils.Core.eCoreExecutionState.Idle">
	<summary>The core is initialized and ready for use.</summary>
</member><member name="F:EwEUtils.Core.eCoreExecutionState.EcopathLoaded">
	<summary>Ecopath model data has been loaded.</summary>
</member><member name="F:EwEUtils.Core.eCoreExecutionState.EcopathInitialized">
	<summary>Ecopath model data has been initialized.</summary>
</member><member name="F:EwEUtils.Core.eCoreExecutionState.EcopathRunning">
	<summary>Ecopath scenario is ready to run.</summary>
</member><member name="F:EwEUtils.Core.eCoreExecutionState.EcopathCompleted">
	<summary>Ecopath model run is completed.</summary>
</member><member name="F:EwEUtils.Core.eCoreExecutionState.PSDCompleted">
	<summary>Ecopath PSD model run is completed.</summary>
</member><member name="F:EwEUtils.Core.eCoreExecutionState.EcotracerLoaded">
	<summary>Ecotracer scenario data has been loaded.</summary>
</member><member name="F:EwEUtils.Core.eCoreExecutionState.EcosimLoaded">
	<summary>Ecosim scenario data has been loaded.</summary>
</member><member name="F:EwEUtils.Core.eCoreExecutionState.EcosimInitialized">
	<summary>Ecosim scenario has been initialized.</summary>
</member><member name="F:EwEUtils.Core.eCoreExecutionState.EcosimRunning">
	<summary>Ecosim scenario is running.</summary>
</member><member name="F:EwEUtils.Core.eCoreExecutionState.EcosimCompleted">
	<summary>Ecosim scenario run is completed.</summary>
</member><member name="F:EwEUtils.Core.eCoreExecutionState.EcospaceLoaded">
	<summary>Ecospace scenario data has been loaded.</summary>
</member><member name="F:EwEUtils.Core.eCoreExecutionState.EcospaceInitialized">
	<summary>Ecospace scenario has been initialized.</summary>
</member><member name="F:EwEUtils.Core.eCoreExecutionState.EcospaceRunning">
	<summary>Ecospace scenario is running.</summary>
</member><member name="F:EwEUtils.Core.eCoreExecutionState.EcospaceCompleted">
	<summary>Ecospace scenario run is completed.</summary>
</member><member name="T:EwEUtils.Core.eCoreExecutionState">
 -----------------------------------------------------------------------
 <summary>
 Enumerated type identifying known core states.
 </summary>
 -----------------------------------------------------------------------

</member><member name="F:EwEUtils.Core.eVarNameFlags.NotSet">
	<summary>Variable name is not specified.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.PBInput">
	<summary>Production over Biomass (ratio)</summary>
	<remarks>Also referred to as Mortality or Z.</remarks>
</member><member name="F:EwEUtils.Core.eVarNameFlags.PBOutput">
	<summary></summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.EEInput">
	<summary></summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.EEOutput">
	<summary></summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.QBInput">
	<summary></summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.QBOutput">
	<summary></summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.GEInput">
	<summary></summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.GEOutput">
	<summary></summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.Name">
	<summary>Generic item names.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.Index">
	<summary>Numerical position of an item in a list.</summary>
	<remarks>This value has replaced former EwE5 indices such as iGroup.</remarks>
</member><member name="F:EwEUtils.Core.eVarNameFlags.Area">
	<summary>Area surface, as a fraction.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.Biomass">
	<summary>Biomass, in ..</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.BiomassAreaInput">
	<summary><see cref="F:EwEUtils.Core.eVarNameFlags.Biomass">Biomass</see> per <see cref="F:EwEUtils.Core.eVarNameFlags.Area">Area</see>.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.BiomassAreaOutput">
	<summary><see cref="F:EwEUtils.Core.eVarNameFlags.Biomass">Biomass</see> per <see cref="F:EwEUtils.Core.eVarNameFlags.Area">Area</see>.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.BioAccum">
	<summary></summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.BioAccumRatePerYear">
	<summary></summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.GS">
	<summary></summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.DetImp">
	<summary></summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.TTLX">
	<summary></summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.Immig">
	<summary></summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.Emig">
	<summary></summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.EmigRate">
	<summary></summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.BioAccumRate">
	<summary></summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.DietComp">
	<summary></summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.ImpDiet">
	<summary></summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.DetritusFate">
	<summary></summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.FixedCost">
	<summary></summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.CPUECost">
	<summary></summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.SailCost">
	<summary></summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.EPower">
	<summary></summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.PcapBase">
	<summary></summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.CapDepreciate">
	<summary></summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.CapBaseGrowth">
	<summary></summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.MortCoPB">
	<summary></summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.MortCoFishRate">
	<summary></summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.MortCoPredMort">
	<summary></summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.MortCoBioAcumRate">
	<summary></summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.MortCoNetMig">
	<summary></summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.MortCoOtherMort">
	<summary></summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.FishMortTotMort">
	<summary>[Fishing Mort] / [Total mort]</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.NatMortPerTotMort">
	<summary>1- FishMortTotMort</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.Consumption">
	<summary></summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.ImportedConsumption">
	<summary></summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.PredMort">
	<summary></summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.Landings">
	<summary></summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.Discards">
	<summary></summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.OffVesselPrice">
	<summary></summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.NonMarketValue">
	<summary></summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.DiscardFate">
	<summary></summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.EcopathStatsTotalConsumption">
	<summary>Sum of all consumption.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.EcopathStatsTotalExports">
	<summary>Sum of all exports.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.EcopathStatsTotalRespFlow">
	<summary>Sum of all respiratory flows.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.EcopathStatsTotalFlowDetritus">
	<summary>Sum of all flows into detritus.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.EcopathStatsTotalThroughput">
	<summary>Total system throughput.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.EcopathStatsTotalProduction">
	<summary>Sum of all production.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.EcopathStatsMeanTrophicLevelCatch">
	<summary>Mean trophic level of the catch.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.EcopathStatsGrossEfficiency">
	<summary>Gross efficiency (catch/net p.p.).</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.EcopathStatsTotalNetPP">
	<summary>Calculated total net primary production.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.EcopathStatsTotalPResp">
	<summary>Total primary production/total respiration.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.EcopathStatsNetSystemProduction">
	<summary>Net system production.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.EcopathStatsTotalPB">
	<summary>Total primary production/total biomass.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.EcopathStatsTotalBT">
	<summary>Total biomass/total throughput.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.EcopathStatsTotalBNonDet">
	<summary>Total biomass (excluding detritus).</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.EcopathStatsTotalCatch">
	<summary>Total catches.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.EcopathStatsConnectanceIndex">
	<summary>Connectance Index.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.EcopathStatsOmnivIndex">
	<summary>System Omnivory Index.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.EcopathStatsTotalMarketValue">
	<summary>Total market value.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.EcopathStatsTotalShadowValue">
	<summary>Total shadow value.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.EcopathStatsTotalValue">
	<summary>Total value.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.EcopathStatsTotalFixedCost">
	<summary>Total fixed cost.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.EcopathStatsTotalVarCost">
	<summary>Total variable cost.</summary>
	<remarks>This variable may exist under a different name.</remarks>
</member><member name="F:EwEUtils.Core.eVarNameFlags.EcopathStatsTotalCost">
	<summary>Total cost.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.EcopathStatsProfit">
	<summary>Profit.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.EcopathStatsPedigree">
	<summary>Pedigree.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.EcopathStatsMeasureOfFit">
	<summary>Measure of pedigree fit.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.MaxRelPB">
	<summary></summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.MaxRelFeedingTime">
	<summary></summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.FeedingTimeAdjRate">
	<summary></summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.OtherMortFeedingTime">
	<summary></summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.PredEffectFeedingTime">
	<summary></summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.DenDepCatchability">
	<summary></summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.QBMaxQBio">
	<summary></summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.SwitchingPower">
	<summary></summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.VulRate">
	<summary></summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.VulMult">
	<summary></summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.ForcingFunctNumber">
	<summary></summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.MedFunctNumber">
	<summary></summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.StepSize">
	<summary></summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.Relaxation">
	<summary></summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.Discount">
	<summary></summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.EquilibriumStepSize">
	<summary></summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.EquilMaxFishingRate">
	<summary></summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.NumStepAvg">
	<summary></summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.NutBaseFreeProp">
	<summary></summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.NutForceFunctionNumber">
	<summary></summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.NutPBMax">
	<summary></summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.SystemRecovery">
	<summary></summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.NudgeChecked">
	<summary></summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.UseVarPQ">
	<summary></summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.BiomassOn">
	<summary></summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.EcoSimNYears">
	<summary></summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.MaxEffort">
	<summary>Maximum effort of a fleet</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.QuotaType">
	<summary>Quota type imposed on a fleet</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.QuotaShare">
	<summary>Quota set for a gear/group combination</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.DiscardMortality">
	<summary>Proportion of discards that dies</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.MSEBBase">
	<summary>BBase for target fishing mortality policy. Upper biomass boundary.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.MSEBLim">
	<summary>BLimit for target fishing mortality policy. Lower biomass boundary.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.MSEFmax">
	<summary>Mortality/Fmsy for target fishing mortality policy.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.MSEFmin">
	<summary>Mortality when biomass at or below BLim(lower boundry)</summary>
	<remarks>Added for MSEBatch command file.</remarks>
</member><member name="F:EwEUtils.Core.eVarNameFlags.ConSimOnEcoSim">
	<summary>Contaminant tracing on/off</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.PredictEffort">
	<summary>Predict Ecosim Fishing Effort</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.EcosimSumStart">
	<summary>Start of summary time period in years</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.EcosimSumEnd">
	<summary>end of summary time period in years</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.EcosimSumNTimeSteps">
	<summary>number of time steps to summarize ecosim data over</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.DBID">
	<summary>Database ID.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.CyclePath">
	<summary></summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.PP">
	<summary>Percentage of primary production.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.Description">
	<summary>Generic description.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.NumDigits">
	<summary>Number of digits to display.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.GroupDigits">
	<summary>Group display digits.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.UnitTime">
	<summary>Unit enumerated value for text-based values.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.UnitTimeCustomText">
	<summary>Unit text for time-based values.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.UnitArea">
	<summary>Unit enumerated value for area-based values.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.UnitAreaCustomText">
	<summary>Unit text for area-based values.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.UnitCurrency">
	<summary>Unit enumerated value for currency-based values.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.UnitCurrencyCustomText">
	<summary>Unit text for currency-based values.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.UnitMonetary">
	<summary>Unit enumerated value for monetary values.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.UnitMonetaryCustomText">
	<summary>Unit text for monetary values.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.Author">
	<summary>Author of an EwE component.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.Contact">
	<summary>Contact info of an EwE component.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.LastSaved">
	<summary>Julian day an EwE component was last saved.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.NetMigration">
	<summary></summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.FlowToDet">
	<summary></summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.NetEfficiency">
	<summary></summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.OmnivoryIndex">
	<summary></summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.Respiration">
	<summary></summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.Assimilation">
	<summary></summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.RespAssim">
	<summary>Resp / Assim</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.ProdResp">
	<summary>Prod / Resp</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.RespBiom">
	<summary>Resp / Biomass</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.SearchRate">
	<summary>To document</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.Hlap">
	<summary>To document</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.Plap">
	<summary>To document</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.PoolColor">
	<summary>Colour value to represent an exposed core I/O object.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.Alpha">
	<summary>To document</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.RecPowerSplit">
	<summary>Recruitment power</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.BABsplit">
	<summary>Relative biomass accumulation rate (ratio)</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.WmatWinf">
	<summary>Weight at maturity over weight at infancy (ratio)</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.HatchCode">
	<summary>Forcing function number for hathery stocking (scalar)</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.FixedFecundity">
	<summary>Stanza use fixed fecundity</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.LeadingBiomass">
	<summary>Stanza parameter; used to indicate the group that leads 
 <see cref="F:EwEUtils.Core.eVarNameFlags.Biomass">biomass</see> in a multi-stanza
 configuration.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.LeadingCB">
	<summary>Stanza parameter; used to indicate the group that leads 
 <see cref="F:EwEUtils.Core.eVarNameFlags.QBInput">QB</see> in a multi-stanza
 configuration.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.Bat">
	<summary>BaB * Bio</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.StartAge">
	<summary>Start age of a group in a stanza configuration (in months)</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.EndAge">
	<summary>End age of a group in a stanza configuration (in months)</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.CB">
	<summary>Stanza Consumption over Biomass coefficient.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.PacketsMultiplier">
	<summary>A multiplier to change the number of packets for the IBM model.</summary>
	<remarks>..but what about Dell? Acer? Toshiba? This is simply not fair!</remarks>
</member><member name="F:EwEUtils.Core.eVarNameFlags.ModelFileName">
	<summary>Full path of the current datasource/database </summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.Latitude">
	<summary>Latitude of spatial data.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.Longitude">
	<summary>Longitude of spatial data.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.BasemapStepSize">
	<summary>Basemap stepsize in number of steps per degree.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.EffectivePower">
	<summary>Relative catchability per fleet/gear type (multiplier)</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.MVel">
	<summary>Base dispersal</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.RelMoveBad">
	<summary>Relative dispersal in bad habitat</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.RelVulBad">
	<summary>Relative vulnerability in bad habitat</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.EatEffBad">
	<summary>Relative feeding in bad habitat</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.IsAdvected">
	<summary>To document</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.IsMigratory">
	<summary>To document</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.MigrationConcRow">
	<summary>To document</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.MigrationConcCol">
	<summary>To document</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.PreferredCell">
	<summary>To document</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.PreferredCol">
	<summary>To document</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.PreferredHabitat">
	<summary>To document</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.HabitatFishery">
	<summary>To document</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.MPAFishery">
	<summary>To document</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.MPAMonth">
	<summary>Which months of the year a MPA is open for fishing</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.LayerDepth">
	<summary>Ecospace cell depth assignments</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.LayerHabitat">
	<summary>Ecospace cell habitat assignments</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.LayerHabitatCapacity">
	<summary>Ecospace cell habitat capacity.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.LayerMPA">
	<summary>Ecospace cell MPA assignments</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.LayerRelPP">
	<summary>Ecospace cell relative primary production</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.LayerRelCin">
	<summary>Ecospace cell relative level of contaminants</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.LayerRegion">
	<summary>Ecospace cell region assignments</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.LayerMigration">
	<summary>Ecospace cell migration assignments</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.LayerAdvection">
	<summary>Ecospace cell advection assignments</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.LayerTransportRate">
	<summary>Ecospace transport rate layer.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.LayerMLD">
	<summary>Ecospace MLD (mixed layer depths) layer.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.LayerWind">
	<summary>Ecospace wind layer.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.LayerUpwelling">
	<summary>Ecospace upwelling layer.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.LayerImportance">
	<summary>Ecospace MPA importance.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.LayerPort">
	<summary>Ecospace cell port assignments.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.LayerSail">
	<summary>Ecospace sailing cost.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.LayerDistribution">
	<summary>Ecospace distribution envelope.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.ImportanceWeight">
	<summary>Ecospace/MPA importance weight of the weight layer.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.HabAreaProportion">
	<summary>Proportion of total habitat area by Habitat type.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.SEmult">
	<summary>Total Eff, Muiltiplier.</summary>
	<remarks>Summary taken from EwE5 code, not overly helpful I'm afraid...</remarks>
</member><member name="F:EwEUtils.Core.eVarNameFlags.AdjustSpace">
	<summary>
 Ecospace: Habitat-adjusted biomass = True. Ecopath base biomass = False
 </summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.EcospaceFleetEffortES">
	<summary>Ecospace [Effort End] / [Effort Start] </summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.EcospaceFleetCatch">
	<summary>Ecospace Catch by Fleet Time </summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.EcospaceFleetValue">
	<summary>Ecospace Value by Fleet Time </summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.EcospaceRegionBiomassStart">
	<summary>Biomass of a group in a region for the start summary period </summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.EcospaceRegionBiomassEnd">
	<summary> Biomass of a group in a region for the end summary period</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.EcospaceRegionCatchStart">
	<summary>Biomass of catch in a region for the start summary period </summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.EcospaceRegionCatchEnd">
	<summary> Biomass of catch in a region for the end summary period</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.EcospaceRegionFleetGroupCatch">
	<summary> Biomass of catch in a region by fleet, group and time </summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.EcospaceSummaryTimeStart">
	<summary>Time in Years of the Start summary time period </summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.EcospaceSummaryTimeEnd">
	<summary> Time in Years of the End summary time period </summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.EcospaceNumberSummaryTimeSteps">
	<summary>Number of time steps in the summary periods</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.EcospaceBiomassOverTime">
	<summary> Ecospace output biomass averaged over all the cells for each timestep</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.EcospaceRelativeBiomassOverTime">
	<summary> Ecospace [computed biomass] / [base biomass] averaged over all the cells for each timestep </summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.EcospaceGroupCatchOverTime">
	<summary> Ecospace Catch over time </summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.EcospaceGroupValueOverTime">
	<summary> Ecospace Value over time </summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.EcospaceRegionBiomass">
	<summary> Ecospace Biomass by region over time averaged over all the cells in a region for each timestep </summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.EcospaceFleetProfit">
	<summary> Ecospace yearly average profit by fleet  </summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.EcospaceFleetJobs">
	<summary> Ecospace yearly average jobs [value of catch] * [jobs]  </summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.StanzaNumberAtAge">
	<summary>Number of fish in a monthly stanza age group </summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.StanzaWeightAtAge">
	<summary>Weight of individual fish in a monthly stanza age group </summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.StanzaBiomassAtAge">
	<summary>Biomass in a monthly stanza age group [StanzaNumberAtAge]*[StanzaWeightAtAge]</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.StanzaGroup">
	<summary>Index to the Ecopath Groups in the Stanza Group </summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.StanzaBiomass">
	<summary>Biomass for this a stanza iStanzaGroup</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.StanzaCB">
	<summary>Consumption/Biomass for this a stanza iStanzaGroup Ecopath QB</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.StanzaMortaility">
	<summary>Mortality for this a stanza iStanzaGroup Ecopath PB</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.UseExact">
	<summary>Flag stating whether to use exact calculations or iterations for Ecospace migratory species.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.TotalTime">
	<summary>Ecospace run time.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.NumTimeStepsPerYear">
	<summary>Number of time steps per year.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.Tolerance">
	<summary>Ecospace Tolerance.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.SOR">
	<summary>Ecospace successive over-relaxation.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.MaxIterations">
	<summary>Ecospace maximum number of iterations.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.EcospaceSaveCSV">
	<summary>Ecospace save results to CSV file format.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.EcospaceSaveASC">
	<summary>Ecospace save results to ASC file format.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.EcosimBiomass">
	<summary>Ecosim absolute biomass over time</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.EcosimBiomassRel">
	<summary>Ecosim relative biomass over time</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.EcosimYieldRel">
	<summary>[catch(t)]/[catch(0)]</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.EcosimValueGroup">
	<summary>
 Ecosim value by group over time
 </summary>
	<remarks></remarks>
</member><member name="F:EwEUtils.Core.eVarNameFlags.EcosimValueGroupRel">
	<summary>
 Ecosim relative value by group, time
 </summary>
	<remarks></remarks>
</member><member name="F:EwEUtils.Core.eVarNameFlags.EcosimValueGroupFleet">
	<summary>
 Ecosim value by group fleet over time
 </summary>
	<remarks></remarks>
</member><member name="F:EwEUtils.Core.eVarNameFlags.EcosimFishingMortGroupGear">
	<summary> Fishing mortality by group fleet </summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.EcosimMortVPred">
	<summary>[predation mortality]/[total mortality]</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.EcosimMortVFishing">
	<summary>[fishing mortality]/[total mortality]</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.EcosimIsCatchAggregated">
	<summary>Is the catch for this group aggregated across all the fleet.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.EcopathWeight">
	<summary>Ecopath ouput data over time</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.PSD">
	<summary>Particle size distribution</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.EcosimPredConsumpTime">
	<summary>Consumption by Pred of this Prey over time </summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.EcosimPredRateTime">
	<summary>Consumption Rate by Pred of this Prey over time (consumpt(prey,pred)/b(prey)) over time</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.EcosimPreyPercentageTime">
	<summary>Percentage of a group this group consumes over time</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.nTrophicLevels">
	<summary> Network analysis variables</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.PPImportFlow">
	<summary> Network Flow and Biomss </summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.AscendGroup">
	<summary>Network Acendency </summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.TimeSeriesType">
	<summary>Type of a time series.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.DataSet">
	<summary>Name of data set that a time series was imported from.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.WtType">
	<summary>Weight of time for a time series.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.DatPool">
	<summary>Index of a group or fleet that a time series applies to.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.DatYear">
	<summary>The first year in a time series.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.nDatYears">
	<summary>The number of years of a time series.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.DatVal">
	<summary>Value for a given year in a time series.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.Applied">
	<summary>Flag stating whether a time series is applied.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.DataQ">
	<summary>Average zstat sumof(Log(observed/predicted))/nobs.</summary>
	<remarks>There, you've GOT to love that description.</remarks>
</member><member name="F:EwEUtils.Core.eVarNameFlags.DataSS">
	<summary>Sum of squares fit of this data set to the predicted value.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.CustomVariable">
	<summary>Future extension: time series can be associated with any variable.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.EcospaceSS">
	<summary>Sum of squares fit of Ecospace predicted values to all reference data across all the groups and data.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.EcospaceRegionSS">
	<summary>Sum of squares fit of Ecospace predicted values to reference data for a region.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.EcosimSS">
	<summary>Sum of squares fit of Ecosim predicted values to all reference data across all the groups and data.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.EcosimSSGroup">
	<summary>Sum of squares fit of Ecosim predicted values to reference data by group.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.mcB">
	<summary>Monte Carlo variables</summary>
	<remarks>variables used by ecosim monte carlo</remarks>
</member><member name="F:EwEUtils.Core.eVarNameFlags.SearchBlock">
	<summary>
 Fishing Policy Search varaibles
 </summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.F2TSAppliedWeights">
	<summary>Weights of applied TS in search algorithm.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.F2TSVulnerabilityVariance">
	<summary>Variance of Vulnerability.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.F2TSPPVariance">
	<summary>Variance of Primary Production.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.F2TSNAICData">
	<summary>Number of data points for AIC  </summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.F2TSUseDefaultV">
	<summary>Use default V's instead of currect V's</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.LayerMPASeed">
	<summary>Ecospace cell MPA seed assignments</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.LayerMPARandom">
	<summary>Ecospace cell MPA Random assignments</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.MSEBioCV">
	<summary>MSE coefficient of variation for biomass</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.MSEFleetCV">
	<summary>MSE coefficient of variation for fishing fleets</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.MSEQIncrease">
	<summary>MSE increase in catchability by group per year (multiplier)</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.MSEFleetWeight">
	<summary>MSE importance weight in assuming impact of fleet on a group (multiplier)</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.MSELowerRisk">
	<summary>Lower biomass bounds for risk analysis</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.MSEUpperRisk">
	<summary>Upper biomass bounds for risk analysis</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.MSELowerRiskPercent">
	<summary>Number of trial that exceeded the lower biomass bounds for risk analysis</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.MSEUpperRiskPercent">
	<summary>Number of trial that exceeded the upper biomass bounds for risk analysis</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.MSEEconomicValue">
	<summary> Sum of all economic values for the current MSE output object (results)</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.MSEEmployValue">
	<summary> Sum of employment values for the current MSE output object (results)</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.MSEEcologicalValue">
	<summary> Sum of biomass for the current MSE output object (results)</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.MSEWeightedTotalValue">
	<summary> Weighted sum of all mean values</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.MSETrialNumber">
	<summary> Trial number for the current MSE output object (results)</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.MSETAC">
	<summary>Total allowable catch </summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.MSEPredictEffort">
	<summary>True = Use predicted Effort False = user input Effort </summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.MSEFixedEscapement">
	<summary>Biomass by group </summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.MSEStop">
	<summary>Stop the current MSE run</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.MSESave">
	<summary>Save the output</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.MSEEffortSource">
	<summary>Effort type the MSE is to use.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.MSERegulatoryMode">
	<summary>
 Regulatory type use be MSE
 </summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.GameModel">
	<summary>Game server loaded model.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.GameState">
	<summary>Game server run state.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.GameModeratorState">
	<summary>Game client moderator state.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.GameViewVisibleItems">
	<summary>Items the client is allowed to show.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.GameViewAvailableItems">
	<summary>Items the client can request from the server.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.GameDataLimits">
	<summary>Limits imposed on variables.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.GameFleetFishingRates">
	<summary> User entered fishing rate modifiers/shapes for fleets</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.GameGroupFishingMortRates">
	<summary> User entered mortality/fishing rate modifiers/shapes for groups</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.GameViewTrafficLights">
	<summary>Traffic lights the client can request from the server.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.GameAvailableRunData">
	<summary>Type of data available during a simulation (TimeStep or Progress)</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.GameBiomass">
	<summary>Game absolute biomass.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.GameBiomassRel">
	<summary>Game generic relative biomass over time (no specific source)</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.GameBiomassFishRegulation">
	<summary>Game biomass with Fishing regulation.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.GameFleetProfitSummary">
	<summary>Profit by Fleet.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.GameFleetJobsSummary">
	<summary>Jobs(?) by Fleet.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.GameGroupCatch">
	<summary>For Ecosim Yield from Ecosim Plots Biomass * FishTime </summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.GameEcoSystemStruct">
	<summary>Eco system structure 1/pb * b(t)</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.GameFleetName">
	<summary>Game names added for the Game data because EwE6 uses Name for all names</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.GameBiomassIteration">
	<summary>Game biomass for an interation</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.GameGroupCatchIteration">
	<summary>Game catch by group for an interation</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.GameFleetEffortIteration">
	<summary>Game effort by fleet for an interation</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.GameFleetValueIteration">
	<summary></summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.TLCatch">
	<summary>Trophic level of catch.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.TL">
	<summary>Trophic level of groups.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.FIB">
	<summary>Fishing in-balance (FIB) index.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.TaxonGroup">
	<summary>Group assigned to a given taxon.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.TaxonStanza">
	<summary>Stanza assigned to a given taxon.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.TaxonProp">
	<summary>Taxon biomass proportion.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.TaxonPropCatch">
	<summary>Taxon catch proportion.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.GroupTaxa">
	<summary>Taxa assigned to a given group</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.Estimated">
	<summary>States if a value is estimated by Ewe.</summary>
</member><member name="F:EwEUtils.Core.eVarNameFlags.OtherMortInput">
	<summary>1 - EE</summary>
	<remarks>JS Added 28Feb11</remarks>
</member><member name="F:EwEUtils.Core.eVarNameFlags.IsFished">
	<summary>Helper flag to determine whether a group is fished</summary>
</member><member name="T:EwEUtils.Core.eVarNameFlags">
 ---------------------------------------------------------------------------
 <summary>
 Enumerated type used for exposing variables a.k.a. parameters provided by
 the Core models.
 </summary>
 ---------------------------------------------------------------------------

</member><member name="F:EwEUtils.Core.eDataTypes.NotSet">
	<summary>
 Data type is not specified.
 </summary>
</member><member name="F:EwEUtils.Core.eDataTypes.EwEModel">
	<summary>
 Data belongs to the EwE model.
 </summary>
</member><member name="F:EwEUtils.Core.eDataTypes.EcoPathGroupInput">
	<summary>
 Data belongs to the Ecopath group inputs,
 which are provided to perform a parameter estimation run. 
 </summary>
</member><member name="F:EwEUtils.Core.eDataTypes.EcoPathGroupOutput">
	<summary>
 Data belongs to the Ecopath group outputs,
 which are produced by a parameter estimation run.
 </summary>
</member><member name="F:EwEUtils.Core.eDataTypes.FleetInput">
	<summary>
 Data belongs to the Ecopath fleet inputs,
 which are provided for a parameter estimation run.
 </summary>
</member><member name="F:EwEUtils.Core.eDataTypes.EcoSimScenario">
	<summary>
 Data belongs to an Ecosim scenario.
 </summary>
</member><member name="F:EwEUtils.Core.eDataTypes.EcoSimModelParameter">
	<summary>
 Data belongs to the Ecosim model parameters,
 which instruct how to run an Ecosim scenario.
 </summary>
</member><member name="F:EwEUtils.Core.eDataTypes.EcoSimGroupInput">
	<summary>
 Data belongs to an Ecosim group input.
 </summary>
</member><member name="F:EwEUtils.Core.eDataTypes.Forcing">
	<summary>
 Data belongs to a Time Forcing Function.
 </summary>
</member><member name="F:EwEUtils.Core.eDataTypes.EggProd">
	<summary>
 Data belongs to an Egg Production Forcing Function.
 </summary>
</member><member name="F:EwEUtils.Core.eDataTypes.Mediation">
	<summary>
 Data belongs to a Mediation Function.
 </summary>
</member><member name="F:EwEUtils.Core.eDataTypes.FishingEffort">
	<summary>
 Data belongs to a Fishing Rate shape.
 </summary>
</member><member name="F:EwEUtils.Core.eDataTypes.FishMort">
	<summary>
 Data belongs to a Fishing Mortality shape.
 </summary>
</member><member name="F:EwEUtils.Core.eDataTypes.Stanza">
	<summary>
 Data belongs to an EwE multi-stanza configuration.
 </summary>
</member><member name="F:EwEUtils.Core.eDataTypes.EcoSpaceScenario">
	<summary>
 Data belongs to an Ecospace scenario.
 </summary>
</member><member name="F:EwEUtils.Core.eDataTypes.EcospaceHabitat">
	<summary>
 Data belongs to an Ecospace habitat.
 </summary>
</member><member name="F:EwEUtils.Core.eDataTypes.EcospaceRegion">
	<summary>
 Data belongs to an Ecospace region.
 </summary>
</member><member name="F:EwEUtils.Core.eDataTypes.EcospaceGroup">
	<summary>
 Data belongs to an Ecospace group.
 </summary>
</member><member name="F:EwEUtils.Core.eDataTypes.EcospaceFleet">
	<summary>
 Data belongs to an Ecospace fleet.
 </summary>
</member><member name="F:EwEUtils.Core.eDataTypes.EcospaceMPA">
	<summary>
 Data belongs to an Ecospace MPA.
 </summary>
</member><member name="F:EwEUtils.Core.eDataTypes.EcospaceModelParameter">
	<summary>
 Data belongs to the Ecospace model parameters,
 which instruct how to run an Ecopace scenario.
 </summary>
</member><member name="F:EwEUtils.Core.eDataTypes.EcospaceBasemap">
	<summary>
 Data belongs to a cEcospaceModelBasemaps instance.
 </summary>
</member><member name="F:EwEUtils.Core.eDataTypes.EcospaceLayerImportance">
	<summary>
 Data belongs to an ecospace importance layer instance.
 </summary>
	<remarks>The enum value </remarks>
</member><member name="F:EwEUtils.Core.eDataTypes.PredPreyInteraction">
	<summary>
 cPredPreyInteraction object
 </summary>
</member><member name="F:EwEUtils.Core.eDataTypes.EcospaceTimestepResults">
	<summary>
 Time step results of the currently running Ecospace model
 </summary>
</member><member name="F:EwEUtils.Core.eDataTypes.EcospaceGroupOuput">
	<summary>
 Data belongs to Ecospace calculated values for a single group.
 </summary>
</member><member name="F:EwEUtils.Core.eDataTypes.EcospaceFleetOuput">
	<summary>
 Data belongs to Ecospace calculated values for a single fleet.
 </summary>
</member><member name="F:EwEUtils.Core.eDataTypes.EcospaceRegionResults">
	<summary>
 Data belongs to Ecospace calculated values for a single region.
 </summary>
</member><member name="F:EwEUtils.Core.eDataTypes.GroupTimeSeries">
	<summary>
 Data belongs to a time series that applies to groups.
 </summary>
</member><member name="F:EwEUtils.Core.eDataTypes.FleetTimeSeries">
	<summary>
 Data belongs to a time series that applies to fleets.
 </summary>
</member><member name="F:EwEUtils.Core.eDataTypes.TimeSeriesDataset">
	<summary>
 Data belongs to a Time Series data set.
 </summary>
</member><member name="F:EwEUtils.Core.eDataTypes.MonteCarlo">
	<summary>
 Data belongs to a Ecosim Monte Carlo model parameters.
 </summary>
</member><member name="F:EwEUtils.Core.eDataTypes.EcoSimGroupOutput">
	<summary>
 Data belongs to values calculated by Ecosim for a single group.
 </summary>
</member><member name="F:EwEUtils.Core.eDataTypes.EcosimFleetOutput">
	<summary>
 Data belongs to values calculated by Ecosim for a single fleet.
 </summary>
</member><member name="F:EwEUtils.Core.eDataTypes.FitToTimeSeries">
	<summary>
 Data belongs to Ecosim Fit To Time Series model parameters.
 </summary>
</member><member name="F:EwEUtils.Core.eDataTypes.EcotracerScenario">
	<summary>
 Data belongs to an Ecotracer scenario.
 </summary>
</member><member name="F:EwEUtils.Core.eDataTypes.EcotracerModelParameters">
	<summary>
 Data belongs to Ecotracer model parameters.
 </summary>
</member><member name="F:EwEUtils.Core.eDataTypes.EcotracerGroupInput">
	<summary>
 Data belongs to an Ecotracer input group.
 </summary>
</member><member name="F:EwEUtils.Core.eDataTypes.EcotracerSimOutput">
	<summary>
 Data belongs to an Ecotracer Ecosim results for a single group.
 </summary>
</member><member name="F:EwEUtils.Core.eDataTypes.EcotracerSpaceOutput">
	<summary>
 Data belongs to an Ecotracer Ecospace results for a single group.
 </summary>
</member><member name="F:EwEUtils.Core.eDataTypes.SearchObjectiveManager">
	<summary>
 Data belongs to a search objectives manager.
 </summary>
	<remarks>
 Search Objectives form the base for the shared search interface 
 ISearchObjective used by Fishing Policy, Ecoseed, MSE and possibly
 other searches. This system is flexible and be extended.
 </remarks>
</member><member name="F:EwEUtils.Core.eDataTypes.SearchObjectiveParameters">
	<summary>
 Data belongs to search objectives generic parameters.
 </summary>
	<remarks>Don't panic.</remarks>
</member><member name="F:EwEUtils.Core.eDataTypes.SearchObjectiveFleetInput">
	<summary>
 Data belongs to search objectives parameters for a single fleet.
 </summary>
</member><member name="F:EwEUtils.Core.eDataTypes.SearchObjectiveWeights">
	<summary>
 Data belongs to search objective weights.
 </summary>
</member><member name="F:EwEUtils.Core.eDataTypes.SearchObjectiveGroupInput">
	<summary>
 Data belongs to search objectives parameters for a single group.
 </summary>
</member><member name="F:EwEUtils.Core.eDataTypes.FishingPolicyManager">
	<summary> 
 Data belongs to the Fishing Policy search manager.
 </summary>
	<remarks>
 Note that the Fishing Policy manager may use the SearchObjectivexxxx data types as well.
 </remarks>
</member><member name="F:EwEUtils.Core.eDataTypes.FishingPolicyParameters">
	<summary>
 Data belongs to fishing policy search generic parameters.
 </summary>
</member><member name="F:EwEUtils.Core.eDataTypes.FishingPolicySearchBlocks">
	<summary>
 Data belongs to fishing policy search search blocks settings.
 </summary>
</member><member name="F:EwEUtils.Core.eDataTypes.MPAOptManager">
	<summary> 
 Data belongs to the MPA optimizations/Ecoseed search manager.
 </summary>
</member><member name="F:EwEUtils.Core.eDataTypes.MPAOptOuput">
	<summary>
 Data belongs to the MPA optimizations/Ecoseed results.
 </summary>
</member><member name="F:EwEUtils.Core.eDataTypes.MPAOptParameters">
	<summary> 
 Data belongs to the MPA optimizations/Ecoseed generic parameters.
 </summary>
</member><member name="F:EwEUtils.Core.eDataTypes.MSEManager">
	<summary> 
 Data belons to the Management Strategy Evaluator.
 </summary>
</member><member name="F:EwEUtils.Core.eDataTypes.MSEFleetInput">
	<summary>
 Data belongs to Management Strategy Evaluator parameters for a single fleet.
 </summary>
</member><member name="F:EwEUtils.Core.eDataTypes.MSEGroupInput">
	<summary>
 Data belongs to Management Strategy Evaluator parameters for a single group.
 </summary>
</member><member name="F:EwEUtils.Core.eDataTypes.MSEOutput">
	<summary>
 Data belongs to Management Strategy Evaluator generic results.
 </summary>
</member><member name="F:EwEUtils.Core.eDataTypes.MSEParameters">
	<summary>
 Data belongs to Management Strategy Evaluator generic parameters.
 </summary>
</member><member name="F:EwEUtils.Core.eDataTypes.PedigreeLevel">
	<summary>
 Data belongs to a single Pedigree level.
 </summary>
</member><member name="F:EwEUtils.Core.eDataTypes.GameData">
	<summary>
 Data belongs to the EwE game engine data.
 </summary>
</member><member name="F:EwEUtils.Core.eDataTypes.EcoPathStatistics">
	<summary>
 Data belongs to Ecopath statistics.
 </summary>
</member><member name="F:EwEUtils.Core.eDataTypes.EcoSimStatistics">
	<summary>
 Data belongs to Ecosim statistics.
 </summary>
</member><member name="F:EwEUtils.Core.eDataTypes.EcospaceStatistics">
	<summary>
 Data belongs to Ecospace statistics.
 </summary>
</member><member name="F:EwEUtils.Core.eDataTypes.ParticleSizeDistribution">
	<summary>
 Data belongs to Particle Size Distribution generic parameters.
 </summary>
</member><member name="F:EwEUtils.Core.eDataTypes.EcospaceLayerDepth">
	<summary>
 Data belongs to the Ecospace Depth layer.
 </summary>
</member><member name="F:EwEUtils.Core.eDataTypes.EcospaceLayerMPA">
	<summary>
 Data belongs to the Ecospace Marine Protected Areas layer.
 </summary>
</member><member name="F:EwEUtils.Core.eDataTypes.EcospaceLayerMPASeed">
	<summary>
 Data belongs to the Ecospace MPA seed layer.
 </summary>
	<remarks>
 MPA seeds are used in the MPA optimizations/Ecoseed searches.
 </remarks>
</member><member name="F:EwEUtils.Core.eDataTypes.EcospaceLayerHabitat">
	<summary>
 Data belongs to the Ecospace Habitat layer.
 </summary>
</member><member name="F:EwEUtils.Core.eDataTypes.EcospaceLayerRegion">
	<summary>
 Data belongs to the Ecospace Regions layer.
 </summary>
</member><member name="F:EwEUtils.Core.eDataTypes.EcospaceLayerRelPP">
	<summary>
 Data belongs to the Ecospace relative primary production layer.
 </summary>
</member><member name="F:EwEUtils.Core.eDataTypes.EcospaceLayerRelCin">
	<summary>
 Data belongs to the Ecospace relative contaminant layer.
 </summary>
</member><member name="F:EwEUtils.Core.eDataTypes.MSEGroupOutputs">
	<summary>
 Data belongs to Management Strategy Evaluation results for a single group.
 </summary>
</member><member name="F:EwEUtils.Core.eDataTypes.EcospaceLayerIBMPackets">
	<summary>
 Data belongs to the Ecospace layer representing the spread and quantities
 of Individual Based Model packets.
 </summary>
</member><member name="F:EwEUtils.Core.eDataTypes.EcospaceLayerPort">
	<summary>
 Data belongs to the Ecospace layer representing fishing ports.
 </summary>
</member><member name="F:EwEUtils.Core.eDataTypes.EcospaceLayerSail">
	<summary>
 Data belongs to the Ecospace layer representing cost of sailing.
 </summary>
</member><member name="F:EwEUtils.Core.eDataTypes.EcosimFleetInput">
	<summary>
 Data belongs to Ecosim input data for single group.
 </summary>
</member><member name="F:EwEUtils.Core.eDataTypes.EcosimOutput">
	<summary>
 Data belongs to Ecosim results for single group.
 </summary>
</member><member name="F:EwEUtils.Core.eDataTypes.MSEFleetOutputs">
	<summary>
 Data belongs to Management Strategy Evaluation results for a single fleet.
 </summary>
</member><member name="F:EwEUtils.Core.eDataTypes.MSEBiomassStats">
	<summary>
 Data belongs to Management Strategy Evaluation biomass statistical results.
 </summary>
</member><member name="F:EwEUtils.Core.eDataTypes.MSECatchByGroupStats">
	<summary>
 Data belongs to Management Strategy Evaluation statistical results on catches by group.
 </summary>
</member><member name="F:EwEUtils.Core.eDataTypes.MSECatchByFleetStats">
	<summary>
 Data belongs to Management Strategy Evaluation statistical results on catches by fleet.
 </summary>
</member><member name="F:EwEUtils.Core.eDataTypes.MSEEffortStats">
	<summary>
 Data belongs to Management Strategy Evaluation statistical results on fishing effort.
 </summary>
</member><member name="F:EwEUtils.Core.eDataTypes.EcospaceLayerMigration">
	<summary>
 Data belongs to the Ecospace Migration layer.
 </summary>
</member><member name="F:EwEUtils.Core.eDataTypes.EcospaceLayerAdvection">
	<summary>
 Data belongs to the Ecospace Advection layer.
 </summary>
</member><member name="F:EwEUtils.Core.eDataTypes.Auxillary">
	<summary>
 Data belongs to Auxillary data.
 </summary>
</member><member name="F:EwEUtils.Core.eDataTypes.EcospaceLayerDistribution">
	<summary>
 Data belongs to the Ecospace Distribution envelope layer.
 </summary>
</member><member name="F:EwEUtils.Core.eDataTypes.EcospaceLayerWind">
	<summary>
 Data belongs to the Ecospace wind layer.
 </summary>
</member><member name="F:EwEUtils.Core.eDataTypes.EcospaceLayerTransportRate">
	<summary>
 Data belongs to the Ecospace transport rate layer.
 </summary>
</member><member name="F:EwEUtils.Core.eDataTypes.EcospaceLayerFlow">
	<summary>
 Data belongs to the Ecospace flow layer.
 </summary>
</member><member name="F:EwEUtils.Core.eDataTypes.EcospaceLayerMLD">
	<summary>
 Data belongs to the Ecospace mixed layer depth layer.
 </summary>
</member><member name="F:EwEUtils.Core.eDataTypes.EcospaceLayerUpwelling">
	<summary>
 Data belongs to the Ecospace upwelling layer.
 </summary>
</member><member name="F:EwEUtils.Core.eDataTypes.MSEValueTotalStats">
	<summary>
 Data belongs to Management Strategy Evaluation statistical results total value.
 </summary>
</member><member name="F:EwEUtils.Core.eDataTypes.Taxon">
	<summary>
 Data belongs to a taxonomy definition.
 </summary>
</member><member name="F:EwEUtils.Core.eDataTypes.PriceMediation">
	<summary>
 Data belongs to landings mediation function (as opposed to a 'regular', Pred-Prey mediation function.
 </summary>
</member><member name="F:EwEUtils.Core.eDataTypes.LandingInteraction">
	<summary>
 Data belongs to a landings-mediated interaction.
 </summary>
</member><member name="F:EwEUtils.Core.eDataTypes.CapacityMediation">
	<summary>
 Data belongs to a Capacity Mediation.
 </summary>
</member><member name="F:EwEUtils.Core.eDataTypes.EcospaceMapResponse">
	<summary>
 Data belongs to a IEnviroInputMap
 </summary>
</member><member name="F:EwEUtils.Core.eDataTypes.External">
	<summary>
 Data belongs to an external, unspecified source.
 </summary>
</member><member name="T:EwEUtils.Core.eDataTypes">
 ---------------------------------------------------------------------------
 <summary>
 Enumerated type that indicates a class of data in the EwE core.
 </summary>
	<remarks>
 These enums have fixed values since values may be used to identify 
 items in the EwE6 database system.
 </remarks>
 ---------------------------------------------------------------------------

</member><member name="F:EwEUtils.Core.eCoreCounterTypes.NotSet">
	<summary>Unspecified counter.</summary>
</member><member name="F:EwEUtils.Core.eCoreCounterTypes.nGroups">
	<summary>Number of groups across all models.</summary>
</member><member name="F:EwEUtils.Core.eCoreCounterTypes.nDetritus">
	<summary>Number of detritus groups across all models.</summary>
</member><member name="F:EwEUtils.Core.eCoreCounterTypes.nLivingGroups">
	<summary>Number of living groups across all models.</summary>
</member><member name="F:EwEUtils.Core.eCoreCounterTypes.nFleets">
	<summary>Number of fishing fleets across all models.</summary>
</member><member name="F:EwEUtils.Core.eCoreCounterTypes.nMaxStanza">
	<summary>Max number of groups in a single stanza configuration over all stanza groups.</summary>
</member><member name="F:EwEUtils.Core.eCoreCounterTypes.nMaxStanzaAge">
	<summary>Max age for a stanza group.</summary>
	<remarks>Age2(iStanza, m_Stanza.Nstanza(iStanza))</remarks>
</member><member name="F:EwEUtils.Core.eCoreCounterTypes.nStanzas">
	<summary>Number of stanza configuratons.</summary>
</member><member name="F:EwEUtils.Core.eCoreCounterTypes.nStanzasForStanzaGroup">
	<summary>Number of stanzas for a stanza group.</summary>
	<remarks>Nstanza(iStanza)</remarks>
</member><member name="F:EwEUtils.Core.eCoreCounterTypes.nEcosimYears">
	<summary>Number of years to run an Ecosim model.</summary>
</member><member name="F:EwEUtils.Core.eCoreCounterTypes.nEcosimTimeSteps">
	<summary>Number of time steps in an Ecosim run.</summary>
</member><member name="F:EwEUtils.Core.eCoreCounterTypes.nEcospaceYears">
	<summary>Number of years to run an Ecospace model.</summary>
</member><member name="F:EwEUtils.Core.eCoreCounterTypes.nEcospaceTimeSteps">
	<summary>Number time steps in an Ecospace model.</summary>
</member><member name="F:EwEUtils.Core.eCoreCounterTypes.nHabitats">
	<summary>Number of Ecospace habitats.</summary>
</member><member name="F:EwEUtils.Core.eCoreCounterTypes.nRegions">
	<summary>Number of Ecospace regions.</summary>
</member><member name="F:EwEUtils.Core.eCoreCounterTypes.nMonths">
	<summary>Number of months per year.</summary>
	<remarks>Albeit quite obvious and constant, this value is added to facilitate automatic array resizing.</remarks>
</member><member name="F:EwEUtils.Core.eCoreCounterTypes.nMPAs">
	<summary>Number of Ecospace MPAs.</summary>
</member><member name="F:EwEUtils.Core.eCoreCounterTypes.nTrophicLevels">
	<summary>Number of trophic levels from the Network analysis</summary>
</member><member name="F:EwEUtils.Core.eCoreCounterTypes.nTimeSeries">
	<summary>Number of available time series.</summary>
</member><member name="F:EwEUtils.Core.eCoreCounterTypes.nTimeSeriesApplied">
	<summary>Number of applied time series.</summary>
</member><member name="F:EwEUtils.Core.eCoreCounterTypes.nTimeSeriesYears">
	<summary>Max number of years over all time series.</summary>
</member><member name="F:EwEUtils.Core.eCoreCounterTypes.nTimeSeriesDatasets">
	<summary>Number of time series datasets.</summary>
</member><member name="F:EwEUtils.Core.eCoreCounterTypes.nImportanceLayers">
	<summary>Number of importance layers.</summary>
</member><member name="F:EwEUtils.Core.eCoreCounterTypes.nGameSimYears">
	<summary>Number of years the game simulation can run for.</summary>
</member><member name="F:EwEUtils.Core.eCoreCounterTypes.nGameSimTimeSteps">
	<summary>Number of timesteps the game simulation can run for.</summary>
</member><member name="F:EwEUtils.Core.eCoreCounterTypes.nGameSimTimeStepsPerYear">
	<summary>Number of timesteps per year.</summary>
</member><member name="F:EwEUtils.Core.eCoreCounterTypes.nRows">
	<summary>Number of rows in the Ecospace basemap.</summary>
</member><member name="F:EwEUtils.Core.eCoreCounterTypes.nCols">
	<summary>Number of columns in the Ecospace basemap.</summary>
</member><member name="F:EwEUtils.Core.eCoreCounterTypes.nEcopathAgeSteps">
	<summary>Number of timesteps in the Ecopath Weight, Number and Biomass</summary>
</member><member name="F:EwEUtils.Core.eCoreCounterTypes.nWeightClasses">
	<summary>Number of weight classes in the particle size distribution</summary>
</member><member name="F:EwEUtils.Core.eCoreCounterTypes.nSalinityForcingFunctions">
	<summary>Number of forcing function that are for Salinity.</summary>
	<remarks>At this time this is only used by the Decision Support Tool(game).</remarks>
</member><member name="F:EwEUtils.Core.eCoreCounterTypes.nNutrientForcingFunctions">
	<summary>Number of forcing function that are for Salinity.</summary>
	<remarks>At this time this is only used by the Decision Support Tool(game).</remarks>
</member><member name="F:EwEUtils.Core.eCoreCounterTypes.nTempForcingFunctions">
	<summary>Number of forcing function that are for Salinity.</summary>
	<remarks>At this time this is only used by the Decision Support Tool(game).</remarks>
</member><member name="F:EwEUtils.Core.eCoreCounterTypes.nPPForcingFunctions">
	<summary> Number of forcing function that are for Primary Producer.</summary>
	<remarks>At this time this is only used by the Decision Support Tool(game).</remarks>
</member><member name="F:EwEUtils.Core.eCoreCounterTypes.nGameIterations">
	<summary>The number of iterations running in the game.</summary>
</member><member name="F:EwEUtils.Core.eCoreCounterTypes.nTaxon">
	<summary>The number of taxonomy groups.</summary>
</member><member name="F:EwEUtils.Core.eCoreCounterTypes.nTaxonForGroup">
	<summary>The number of taxa assigned to a given group.</summary>
</member><member name="F:EwEUtils.Core.eCoreCounterTypes.nPedigreeVariables">
	<summary>The number of supported pedigree variables.</summary>
</member><member name="T:EwEUtils.Core.eCoreCounterTypes">
 ---------------------------------------------------------------------------
 <summary>
 Enumerated types indicating the EwE counters that define data structure
 sizes in the various models.
 </summary>
 ---------------------------------------------------------------------------

</member><member name="F:EwEUtils.Core.eUnitCurrencyType.NotSet">
	<summary>Unit currency type not set.</summary>
</member><member name="F:EwEUtils.Core.eUnitCurrencyType.Joules">
	<summary>Currency expressed in j/m².</summary>
</member><member name="F:EwEUtils.Core.eUnitCurrencyType.Calorie">
	<summary>Currency expressed in kcal/m².</summary>
</member><member name="F:EwEUtils.Core.eUnitCurrencyType.Carbon">
	<summary>Currency expressed in g/m².</summary>
</member><member name="F:EwEUtils.Core.eUnitCurrencyType.DryWeight">
	<summary>Currency expressed in dry weight (g/m²).</summary>
</member><member name="F:EwEUtils.Core.eUnitCurrencyType.WetWeight">
	<summary>Currency expressed in wet weight (t/km²).</summary>
</member><member name="F:EwEUtils.Core.eUnitCurrencyType.CustomEnergy">
	<summary>Custom currency unit.</summary>
</member><member name="F:EwEUtils.Core.eUnitCurrencyType.Nitrogen">
	<summary>Currency expressed in mg n/m².</summary>
</member><member name="F:EwEUtils.Core.eUnitCurrencyType.Phosporous">
	<summary>Currency expressed in mg p/m².</summary>
</member><member name="F:EwEUtils.Core.eUnitCurrencyType.CustomNutrient">
	<summary>Custom currency unit.</summary>
</member><member name="T:EwEUtils.Core.eUnitCurrencyType">
 ---------------------------------------------------------------------------
 <summary>
 Enumerated types providing currency types.
 </summary>
 ---------------------------------------------------------------------------

</member><member name="F:EwEUtils.Core.eUnitTimeType.Custom">
	<summary>User has specified a custom time unit.</summary>
</member><member name="F:EwEUtils.Core.eUnitTimeType.Year">
	<summary>Time expressed in years.</summary>
</member><member name="F:EwEUtils.Core.eUnitTimeType.Day">
	<summary>Time expressed in days.</summary>
</member><member name="T:EwEUtils.Core.eUnitTimeType">
 ---------------------------------------------------------------------------
 <summary>
 Enumerated type listing time units.
 </summary>
 ---------------------------------------------------------------------------

</member><member name="F:EwEUtils.Core.eUnitAreaType.Custom">
	<summary>Custom area measure.</summary>
</member><member name="F:EwEUtils.Core.eUnitAreaType.Km2">
	<summary>Area expressed in square km.</summary>
</member><member name="F:EwEUtils.Core.eUnitAreaType.Mi2">
	<summary>Area expressed in square miles.</summary>
</member><member name="T:EwEUtils.Core.eUnitAreaType">
 ---------------------------------------------------------------------------
 <summary>
 Enumerated types providing area types.
 </summary>
 ---------------------------------------------------------------------------

</member><member name="F:EwEUtils.Core.eQuotaTypes.NoControls">
	<summary>No Quota controls are used.</summary>
</member><member name="F:EwEUtils.Core.eQuotaTypes.Weakest">
	<summary>Quota options apply to the weakest stock.</summary>
</member><member name="F:EwEUtils.Core.eQuotaTypes.HighestValue">
	<summary>Quota options apply to the strongest stock plus discards.</summary>
</member><member name="F:EwEUtils.Core.eQuotaTypes.Selective">
	<summary>Quota options apply to selective fishing.</summary>
</member><member name="F:EwEUtils.Core.eQuotaTypes.Effort">
	<summary>Quota options apply to effort.</summary>
</member><member name="F:EwEUtils.Core.eDataSourceTypes.NotSet">
	<summary>No support.</summary>
</member><member name="F:EwEUtils.Core.eDataSourceTypes.EII">
	<summary>Datasource capable of handling EII formatted data.</summary>
</member><member name="F:EwEUtils.Core.eDataSourceTypes.Access2003">
	<summary>Datasource capable of handling MDB formatted data.</summary>
</member><member name="F:EwEUtils.Core.eDataSourceTypes.Access2007">
	<summary>Datasource capable of handling ACCDB and MDB formatted data.</summary>
</member><member name="F:EwEUtils.Core.eDataSourceTypes.MDB">
	<summary>Datasource capable of handling MDB formatted data.</summary>
</member><member name="F:EwEUtils.Core.eDataSourceTypes.ACCDB">
	<summary>Datasource capable of handling ACCDB and MDB formatted data.</summary>
</member><member name="T:EwEUtils.Core.eDataSourceTypes">
 -------------------------------------------------------------------
 <summary>
 Supported types of data sources.
 </summary>
 -------------------------------------------------------------------

</member><member name="F:EwEUtils.Core.eDatasourceAccessType.Success">
	<summary>Database operation succesful.</summary>
</member><member name="F:EwEUtils.Core.eDatasourceAccessType.Failed_CannotSave">
	<summary>Database could not be saved in the indicated location.</summary>
</member><member name="F:EwEUtils.Core.eDatasourceAccessType.Failed_UnknownType">
	<summary>An unknown database type was requested.</summary>
</member><member name="F:EwEUtils.Core.eDatasourceAccessType.Failed_OSUnsupported">
	<summary>System does not have the correct drivers installed to
 support the requested database type.</summary>
</member><member name="F:EwEUtils.Core.eDatasourceAccessType.Failed_Unknown">
	<summary>An unknown error has occurred.</summary>
</member><member name="F:EwEUtils.Core.eDatasourceAccessType.Failed_ReadOnly">
	<summary>No permissions to write to the database.</summary>
</member><member name="F:EwEUtils.Core.eDatasourceAccessType.Failed_TransferTypes">
	<summary>Cannot switch from one type of database to another.</summary>
</member><member name="F:EwEUtils.Core.eDatasourceAccessType.Failed_DeprecatedOperation">
	<summary>Cannot perform requested operation on this type of file.</summary>
</member><member name="F:EwEUtils.Core.eDatasourceAccessType.Failed_FileNotFound">
	<summary>File is not found.</summary>
</member><member name="F:EwEUtils.Core.eDatasourceAccessType.Opened">
	<summary>Deprecated, use <see cref="F:EwEUtils.Core.eDatasourceAccessType.Success">Sccess</see> instead.</summary>
</member><member name="F:EwEUtils.Core.eDatasourceAccessType.Created">
	<summary>Deprecated, use <see cref="F:EwEUtils.Core.eDatasourceAccessType.Success">Sccess</see> instead.</summary>
</member><member name="T:EwEUtils.Core.eDatasourceAccessType">
 -------------------------------------------------------------------
 <summary>
 Enumerated type describing the result of datasource access attempts.
 </summary>
 -------------------------------------------------------------------

</member><member name="T:EwEUtils.Core.eSearchCriteriaResultTypes">
 -----------------------------------------------------------------------
 <summary>
 Search criteria result types
 </summary>
 -----------------------------------------------------------------------

</member><member name="F:EwEUtils.Core.eCoreComponentType.NotSet">
	<summary>The message source is not specified.</summary>
</member><member name="F:EwEUtils.Core.eCoreComponentType.EcoPath">
	<summary>The message originated from the Ecopath module of EwE.</summary>
</member><member name="F:EwEUtils.Core.eCoreComponentType.EcoSim">
	<summary>The message originated from the Ecosim module of EwE.</summary>
</member><member name="F:EwEUtils.Core.eCoreComponentType.EcoSpace">
	<summary>The message originated from the Ecospace module of EwE.</summary>
</member><member name="F:EwEUtils.Core.eCoreComponentType.ShapesManager">
	<summary>The message originated from the Forcing shapes manager(s) in EwE.</summary>
</member><member name="F:EwEUtils.Core.eCoreComponentType.DataSource">
	<summary>The message originated from a datasource.</summary>
</member><member name="F:EwEUtils.Core.eCoreComponentType.Core">
	<summary>The message originated from the core itself.</summary>
</member><member name="F:EwEUtils.Core.eCoreComponentType.Plugin">
	<summary>The message originated from a Plugin </summary>
</member><member name="F:EwEUtils.Core.eCoreComponentType.EcoSimMonteCarlo">
	<summary>The message originated from the Monte Carlo routines in Ecosim.</summary>
</member><member name="F:EwEUtils.Core.eCoreComponentType.EcoSimFitToTimeSeries">
	<summary>The message originated from the Fit to Time Series routines in Ecosim.</summary>
</member><member name="F:EwEUtils.Core.eCoreComponentType.TimeSeries">
	<summary>The message originated from a change in loaded Time Series.</summary>
</member><member name="F:EwEUtils.Core.eCoreComponentType.MediatedInteractionManager">
	<summary>The message originated from the pred/prey interaction.</summary>
</member><member name="F:EwEUtils.Core.eCoreComponentType.Ecotracer">
	<summary>The message originated from Ecotracer.</summary>
</member><member name="F:EwEUtils.Core.eCoreComponentType.External">
	<summary>The message originated from an external source (such as the user interface)</summary>
</member><member name="F:EwEUtils.Core.eCoreComponentType.SearchObjective">
	<summary>The message source is one of the Search Objective classes</summary>
</member><member name="F:EwEUtils.Core.eCoreComponentType.FishingPolicySearch">
	<summary>The message originated from Fishing Policy Search.</summary>
</member><member name="F:EwEUtils.Core.eCoreComponentType.MSE">
	<summary>Management Strategy Evaluation  </summary>
</member><member name="F:EwEUtils.Core.eCoreComponentType.MPAOptimization">
	<summary> EcoSeed </summary>
</member><member name="T:EwEUtils.Core.eCoreComponentType">
 ---------------------------------------------------------------------------
 <summary>
 Enumerated type, identifying sources of messages being broadcasted by the Core.
 </summary>
 ---------------------------------------------------------------------------

</member><member name="F:EwEUtils.Core.eForcingApplicationTypes.NotSet">
	<summary>No application specified.</summary>
</member><member name="F:EwEUtils.Core.eForcingApplicationTypes.Nutrient">
	<summary>Forcing FF applied to nutrient forcing.</summary>
</member><member name="F:EwEUtils.Core.eForcingApplicationTypes.Salinity">
	<summary>Forcing FF applied to salinity forcing.</summary>
</member><member name="F:EwEUtils.Core.eForcingApplicationTypes.Temperature">
	<summary>Forcing FF applied to temperature forcing.</summary>
</member><member name="F:EwEUtils.Core.eForcingApplicationTypes.PrimaryProducer">
	<summary>Forcing FF applied to primary production.</summary>
</member><member name="F:EwEUtils.Core.eForcingFunctionApplication.ProductionRate">
	<summary>Production rate and search rate are synonymous</summary>
</member><member name="T:EwEUtils.Core.eForcingFunctionApplication">
 ---------------------------------------------------------------------------
 <summary>
 Enumerator for forcing functions, describing to which Predator/Prey or 
 Fleet/Group interaction a forcing function is applied.
 </summary>
 ---------------------------------------------------------------------------

</member><member name="F:EwEUtils.Core.eIUCNConservationStatusTypes.NotSet">
	<summary>Conservation status has not been specified.</summary>
</member><member name="F:EwEUtils.Core.eIUCNConservationStatusTypes.NotEvaluated">
	<summary>Not Evaluated (NE).</summary>
</member><member name="F:EwEUtils.Core.eIUCNConservationStatusTypes.DataDeficient">
	<summary>Data Deficient (DD)</summary>
</member><member name="F:EwEUtils.Core.eIUCNConservationStatusTypes.LeastConcern">
	<summary>Least Concern (LC)</summary>
</member><member name="F:EwEUtils.Core.eIUCNConservationStatusTypes.NearThreatened">
	<summary>Near Threatened (NT)</summary>
</member><member name="F:EwEUtils.Core.eIUCNConservationStatusTypes.Vulnerable">
	<summary>Vulnerable (VU)</summary>
</member><member name="F:EwEUtils.Core.eIUCNConservationStatusTypes.Endangered">
	<summary>Endangered (EN)</summary>
</member><member name="F:EwEUtils.Core.eIUCNConservationStatusTypes.CriticallyEndangered">
	<summary>Critically Endangered (CR)</summary>
</member><member name="F:EwEUtils.Core.eIUCNConservationStatusTypes.ExtinctInWild">
	<summary>Extinct in the Wild (EW)</summary>
</member><member name="F:EwEUtils.Core.eIUCNConservationStatusTypes.Extinct">
	<summary>Extinct (EX)</summary>
</member><member name="T:EwEUtils.Core.eIUCNConservationStatusTypes">
	<summary>
 IUCN Red List of Threatened Species conservation categories.
 </summary>
	<remarks>
 http://www.eoearth.org/article/IUCN_Red_List_Criteria_for_Endangered
 </remarks>
</member><member name="F:EwEUtils.Core.eEcologyTypes.NotSet">
	<summary>Ecology type has not been specified.</summary>
</member><member name="F:EwEUtils.Core.eEcologyTypes.LandBased">
	<summary>Taxon occurs on land.</summary>
	<remarks>To be specified further. Where on land? In a tree? A cave? A sub-urban dwelling made of clay?</remarks>
</member><member name="T:EwEUtils.Core.eEcologyTypes">
	<summary>
 Habitat classifications where taxa prefer to dwell. Not necessarily related to Ecospace habitats.
 </summary>
	<remarks>
 As defined in FishBase (http://www.fishbase.org)
 </remarks>
</member><member name="F:EwEUtils.Core.eOccurrenceStatusTypes.NotSet">
	<summary>Occurrence status has not been specified.</summary>
</member><member name="T:EwEUtils.Core.eOccurrenceStatusTypes">
	<summary>
 Occurrence classifications.
 </summary>
	<remarks>
 As defined in FishBase (http://www.fishbase.org)
 </remarks>
</member><member name="F:EwEUtils.Core.eOrganismTypes.NotSet">
	<summary>Organism type has not been specified.</summary>
</member><member name="F:EwEUtils.Core.eOrganismTypes.Other">
	<summary>Organism type does not fit existing classifications.</summary>
</member><member name="T:EwEUtils.Core.eOrganismTypes">
	<summary>
 Organism category types.
 </summary>
</member><member name="F:EwEUtils.Core.eAutoUpdateResultTypes.Success_NoActionRequired">
	<summary>All good. Blue skies, happy children, money in the bank; the works - no need to leave the couch.</summary>
</member><member name="F:EwEUtils.Core.eAutoUpdateResultTypes.Success_Updated">
	<summary>Component successfully updated.</summary>
</member><member name="F:EwEUtils.Core.eAutoUpdateResultTypes.Info_CanMigrate">
	<summary>A migration is available.</summary>
</member><member name="F:EwEUtils.Core.eAutoUpdateResultTypes.Info_CanUpdate">
	<summary>An update is available.</summary>
</member><member name="F:EwEUtils.Core.eAutoUpdateResultTypes.Error_Connection">
	<summary>Update webservice could not be connected.</summary>
</member><member name="F:EwEUtils.Core.eAutoUpdateResultTypes.Error_Download">
	<summary>File failed to download.</summary>
</member><member name="F:EwEUtils.Core.eAutoUpdateResultTypes.Error_Replace">
	<summary>Failed to replace a plug-in on the system.</summary>
</member><member name="F:EwEUtils.Core.eAutoUpdateResultTypes.Error_Generic">
	<summary>A generic error occurred.</summary>
</member><member name="T:EwEUtils.Core.eAutoUpdateResultTypes">
 -----------------------------------------------------------------------
 <summary>
 Enumerated type stating possible automated update results.
 </summary>
 -----------------------------------------------------------------------

</member><member name="M:EwEUtils.cEventLog.#ctor(System.String,System.String)">
	<summary>
 Create a n
 </summary>
	<param name="strAppName">Name of Client Application. Needed because before 
 writing to event log, you must have a named EventLog source.</param>
	<param name="strLogName">Name of Log (System, Application, Security is 
 read-only) If you specify a non-existent log, the log will be created</param>
	<remarks></remarks>
</member><member name="M:EwEUtils.cEventLog.WriteToEventLog(System.String,System.Diagnostics.EventLogEntryType)">
 -----------------------------------------------------------------------
 <summary>
 Write entry to the Windows Event log.
 </summary>
	<param name="strEntry">Value to write</param>
	<param name="eventlogentry"><see cref="T:System.Diagnostics.EventLogEntryType">Entry Type</see>.</param>
	<returns>True if succesful.</returns>
 -----------------------------------------------------------------------

</member><member name="T:EwEUtils.cEventLog">
 ---------------------------------------------------------------------------
 <summary>
 Utility class for writing entries to the Windows Event log.
 </summary>
 ---------------------------------------------------------------------------

</member><member name="T:EwEUtils.Core.INetworkAnalysisData">
 -----------------------------------------------------------------------
 <summary>
 Template for exchanging Network Analysis data.
 </summary>
 -----------------------------------------------------------------------

</member><member name="F:EwEUtils.Database.cEwEDatabase.cEwEDbWriter.m_db">
	<summary>Database to write to</summary>
</member><member name="F:EwEUtils.Database.cEwEDatabase.cEwEDbWriter.m_strTable">
	<summary>Table in the database to write to</summary>
</member><member name="F:EwEUtils.Database.cEwEDatabase.cEwEDbWriter.m_ds">
	<summary>DataSet contains a mirror of the indicated table</summary>
</member><member name="F:EwEUtils.Database.cEwEDatabase.cEwEDbWriter.m_dt">
	<summary>DataTable that mirrors the indicated table</summary>
</member><member name="F:EwEUtils.Database.cEwEDatabase.cEwEDbWriter.m_apt">
	<summary>Adapter to sync table content back and forth</summary>
</member><member name="M:EwEUtils.Database.cEwEDatabase.cEwEDbWriter.#ctor(EwEUtils.Database.cEwEDatabase@,System.String)">
 ---------------------------------------------------------------
 <summary>
		<para>Constructor, initializes a new instance of a cEwEDbWriter.</para>
	</summary>
	<param name="db">The <see cref="T:EwEUtils.Database.cEwEDatabase">cEwEDatabase</see> to read from.</param>
	<param name="strTable">The name of the table to link to.</param>
	<remarks>
		<para>This method will attempt to connect and read the table into its internal
 structures. It might be prudent to validate whether the instance is connected
 by calling <see cref="M:EwEUtils.Database.cEwEDatabase.cEwEDbWriter.IsConnected">IsConnected</see> prior to using it.</para>
	</remarks>
 ---------------------------------------------------------------

</member><member name="M:EwEUtils.Database.cEwEDatabase.cEwEDbWriter.Connect(EwEUtils.Database.cEwEDatabase@,System.String)">
 ---------------------------------------------------------------
 <summary>
 Attempts to connect to the database and read the table data.
 </summary>
	<param name="db">The <see cref="T:EwEUtils.Database.cEwEDatabase">cEwEDatabase</see> to read from.</param>
	<param name="strTable">The name of the table to link to.</param>
	<returns>True if connected.</returns>
 ---------------------------------------------------------------

</member><member name="M:EwEUtils.Database.cEwEDatabase.cEwEDbWriter.Commit">
 ---------------------------------------------------------------
 <summary>
 Commit all pending changes in the cEwEDBWriter without closing
 the writer; the writer is left open for further database operations.
 </summary>
 ---------------------------------------------------------------

</member><member name="M:EwEUtils.Database.cEwEDatabase.cEwEDbWriter.Disconnect(System.Boolean)">
 ---------------------------------------------------------------
 <summary>
 Disconnects the cEwEDBWriter from the database.
 </summary>
	<param name="bSaveChanges">States whether changes need to be saved (true)
 or discarded (false).</param>
 ---------------------------------------------------------------

</member><member name="M:EwEUtils.Database.cEwEDatabase.cEwEDbWriter.IsConnected">
 ---------------------------------------------------------------
 <summary>
 Returns whether the cEwEDBWriter is currently <see cref="M:EwEUtils.Database.cEwEDatabase.cEwEDbWriter.Connect(EwEUtils.Database.cEwEDatabase@,System.String)">connected</see>.
 </summary>
	<returns>True if connected.</returns>
 ---------------------------------------------------------------

</member><member name="M:EwEUtils.Database.cEwEDatabase.cEwEDbWriter.NewRow">
 ---------------------------------------------------------------
 <summary>
 Returns an empty row for the given table to populate values into.
 </summary>
	<returns>An empty row</returns>
	<remarks>Note that this empty row is not yet added to the table. 
 If the row is populated to satisfaction, call <see cref="M:EwEUtils.Database.cEwEDatabase.cEwEDbWriter.AddRow(System.Data.DataRow)">AddRow</see>
 to add it to the the list of rows waiting to be added to the database.</remarks>
 ---------------------------------------------------------------

</member><member name="M:EwEUtils.Database.cEwEDatabase.cEwEDbWriter.AddRow(System.Data.DataRow)">
 ---------------------------------------------------------------
 <summary>
 Adds a row previously obtained from <see cref="M:EwEUtils.Database.cEwEDatabase.cEwEDbWriter.NewRow">NewRow</see>
 to the list of rows waiting to be added to the database.
 </summary>
	<remarks>
		<para>This method will preserve and re-align a sequence field if specified
 in the <see cref="T:EwEUtils.Database.cEwEDatabase.cEwEDbWriter">Constructor</see>.</para>
		<para>Use <see cref="M:EwEUtils.Database.cEwEDatabase.cEwEDbWriter.RemoveRow(System.Data.DataRow)">RemoveRow</see> to protect the
 row sequence during deletes.</para>
	</remarks>
 ---------------------------------------------------------------

</member><member name="M:EwEUtils.Database.cEwEDatabase.cEwEDbWriter.RemoveRow(System.Data.DataRow)">
 ---------------------------------------------------------------
 <summary>
 Returns an arbitrary row maintained in the writer.
 </summary>
	<param name="drow">The datarow to delete.</param>
	<returns>The row.</returns>
	<remarks>
		<para>This method will preserve and re-align a sequence field if specified
 in the <see cref="T:EwEUtils.Database.cEwEDatabase.cEwEDbWriter">Constructor</see>.</para>
		<para>Use <see cref="M:EwEUtils.Database.cEwEDatabase.cEwEDbWriter.AddRow(System.Data.DataRow)">AddRow</see> to protect the
 row sequence during additions.</para>
	</remarks>
 ---------------------------------------------------------------

</member><member name="M:EwEUtils.Database.cEwEDatabase.cEwEDbWriter.GetRow(System.Int32)">
 ---------------------------------------------------------------
 <summary>
 Returns an arbitrary row maintained in the writer
 </summary>
	<param name="nRow">The row number to retrieve</param>
	<returns>The row</returns>
	<remarks>This method might not be necessary?</remarks>
 ---------------------------------------------------------------

</member><member name="M:EwEUtils.Database.cEwEDatabase.cEwEDbWriter.Finalize">
 ---------------------------------------------------------------
 <summary>
 Overridden to close the cEwEDbWriter if not already closed.
 </summary>
 ---------------------------------------------------------------

</member><member name="M:EwEUtils.Database.cEwEDatabase.cEwEDbWriter.GetDataTable">
 ---------------------------------------------------------------
 <summary>
 Get a reference to the DataTable for the current writer
 </summary>
	<returns></returns>
 ---------------------------------------------------------------

</member><member name="M:EwEUtils.Database.cEwEDatabase.cEwEDbWriter.FixUnwantedDBNulls(System.Data.DataRow@)">
 ---------------------------------------------------------------
 <summary>
 Helper method; replaces DBNull values that are specified as not 
 Nullable in the underlying Access database schema with the default 
 value in the schema.
 </summary>
	<param name="drow">The row to fix.</param>
 ---------------------------------------------------------------

</member><member name="T:EwEUtils.Database.cEwEDatabase.cEwEDbWriter">
 -------------------------------------------------------------------
 <summary>
 Helper class that eases the process of adding records to a table.
 </summary>
 -------------------------------------------------------------------

</member><member name="F:EwEUtils.Database.cEwEDatabase.m_sVersion">
	<summary>Current database version.</summary>
</member><member name="F:EwEUtils.Database.cEwEDatabase.m_bIsReadonly">
	<summary>Database read-only state.</summary>
</member><member name="F:EwEUtils.Database.cEwEDatabase.m_strDirectory">
	<summary>Directory associated with the database.</summary>
</member><member name="F:EwEUtils.Database.cEwEDatabase.cDBVERSION_EWE5_MIN">
	<summary>Oldest EwE5 version number supported</summary>
</member><member name="F:EwEUtils.Database.cEwEDatabase.cDBVERSION_EWE5_MAX">
	<summary>Newest EwE5 version number supported</summary>
</member><member name="F:EwEUtils.Database.cEwEDatabase.cDBVERSION_EWE6_MIN">
	<summary>Oldest EwE6 version number supported</summary>
</member><member name="M:EwEUtils.Database.cEwEDatabase.Create(System.String,System.String,System.Boolean,EwEUtils.Core.eDataSourceTypes)">
 -------------------------------------------------------------------
 <summary>
 Create a new database.
 </summary>
	<param name="strDatabase">The database to create.</param>
	<param name="strModelName">Name of the new model.</param>
	<param name="bOverwrite">States whether an existing database may be overwritten.</param>
	<returns>True of created succesfully.</returns>
	<remarks>Note that this will NOT open the newly created database.</remarks>
 -------------------------------------------------------------------

</member><member name="M:EwEUtils.Database.cEwEDatabase.Open(System.String,EwEUtils.Core.eDataSourceTypes,System.Boolean)">
 -------------------------------------------------------------------
 <summary>
 Open a connection to a database.
 </summary>
	<param name="strDatabase">The database to open.</param>
	<param name="databaseType">Type to use to open the database. Set this
 to 'NotSet' to auto-detect the database type.</param>
	<returns>True if connected succesfully.</returns>
 -------------------------------------------------------------------

</member><member name="M:EwEUtils.Database.cEwEDatabase.Close">
 -------------------------------------------------------------------
 <summary>
 Close an open connection.
 </summary>
 -------------------------------------------------------------------

</member><member name="P:EwEUtils.Database.cEwEDatabase.Name">
 -------------------------------------------------------------------
 <summary>
 Get the name of the connected database.
 </summary>
 -------------------------------------------------------------------

</member><member name="M:EwEUtils.Database.cEwEDatabase.SaveAs(System.String,System.String,System.Boolean,EwEUtils.Core.eDataSourceTypes)">
 -------------------------------------------------------------------
 <summary>
 Save a given database to a new destination, and open this new database.
 </summary>
	<param name="strDatabaseTo">Target database name.</param>
	<param name="strModelName">New name to assign to the model.</param>
	<param name="bOverwrite">States whether any model in the way will be obliterated.</param>
	<returns>True if succesful.</returns>
 -------------------------------------------------------------------

</member><member name="P:EwEUtils.Database.cEwEDatabase.IsReadOnly">
 -------------------------------------------------------------------
 <summary>
 Get/set whether the database is read-only.
 </summary>
 -------------------------------------------------------------------

</member><member name="F:EwEUtils.Database.cEwEDatabase.eCompatibilityTypes.Unknown">
	<summary>Combatibility unknown. Most likely the accessed file is not an EwE database.</summary>
</member><member name="F:EwEUtils.Database.cEwEDatabase.eCompatibilityTypes.EwE5TooOld">
	<summary>EwE5 database that is too old, and is not supported.</summary>
</member><member name="F:EwEUtils.Database.cEwEDatabase.eCompatibilityTypes.EwE5Supported">
	<summary>EwE5 database that is supported.</summary>
</member><member name="F:EwEUtils.Database.cEwEDatabase.eCompatibilityTypes.EwE5TooNew">
	<summary>EwE5 database that is too new, and is not supported.</summary>
</member><member name="F:EwEUtils.Database.cEwEDatabase.eCompatibilityTypes.EwE6">
	<summary>EwE6 database that is supported.</summary>
</member><member name="F:EwEUtils.Database.cEwEDatabase.eCompatibilityTypes.UnknownFuture">
	<summary>EwEX database that is of a newer format and is not supported.</summary>
</member><member name="T:EwEUtils.Database.cEwEDatabase.eCompatibilityTypes">
 -------------------------------------------------------------------
 <summary>
 Enumberated type, used to indicate database compatibility modes
 </summary>
 -------------------------------------------------------------------

</member><member name="M:EwEUtils.Database.cEwEDatabase.Compatibility">
 -------------------------------------------------------------------
 <summary>
 States the level of compatibility with the EwE code.
 </summary>
	<returns>A <see cref="T:EwEUtils.Database.cEwEDatabase.eCompatibilityTypes">database compatibility</see>
 indicator.</returns>
 -------------------------------------------------------------------

</member><member name="M:EwEUtils.Database.cEwEDatabase.Compact(System.String,System.String)">
 -------------------------------------------------------------------
 <summary>
 Compact an EwE database.
 </summary>
	<param name="strFileFrom">Source database to compact.</param>
	<param name="strFileTo">Target database to compact to. If left 
 blank, the source database is replaced with a compacted version.</param>
	<returns>True if succesful.</returns>
 -------------------------------------------------------------------

</member><member name="M:EwEUtils.Database.cEwEDatabase.CanCompact(System.String,System.String)">
 -------------------------------------------------------------------
 <summary>
 Returns if a compact engine is available for the underlying database.
 </summary>
	<param name="strConnectionFrom">Compact source.</param>
	<param name="strConnectionTo">Compact target.</param>
	<returns>True if a compact engine is available for the underlying 
 database.</returns>
 -------------------------------------------------------------------

</member><member name="M:EwEUtils.Database.cEwEDatabase.GetConnection">
 -------------------------------------------------------------------
 <summary>
 Returns the current database connection.
 </summary>
 -------------------------------------------------------------------

</member><member name="M:EwEUtils.Database.cEwEDatabase.IsConnected">
 -------------------------------------------------------------------
 <summary>
 States whether there is a database connection that is open.
 </summary>
 -------------------------------------------------------------------

</member><member name="M:EwEUtils.Database.cEwEDatabase.CanConnect(EwEUtils.Core.eDataSourceTypes)">
 -------------------------------------------------------------------
 <summary>
 Returns whether the database can connect to an indicated type.
 </summary>
	<param name="dst">The datasource type to test.</param>
	<returns>True if the OS can connect to a given datasource type.</returns>
 -------------------------------------------------------------------

</member><member name="P:EwEUtils.Database.cEwEDatabase.Directory">
 -------------------------------------------------------------------
 <summary>
 Get a directory associated with this database.
 </summary>
 -------------------------------------------------------------------

</member><member name="P:EwEUtils.Database.cEwEDatabase.FileName">
 -------------------------------------------------------------------
 <summary>
 Get a file name associated with this database.
 </summary>
 -------------------------------------------------------------------

</member><member name="P:EwEUtils.Database.cEwEDatabase.Extension">
 -------------------------------------------------------------------
 <summary>
 Get a file extension associated with this database.
 </summary>
 -------------------------------------------------------------------

</member><member name="F:EwEUtils.Database.cEwEDatabase.m_transaction">
	<summary>The current transaction, if any.</summary>
</member><member name="M:EwEUtils.Database.cEwEDatabase.BeginTransaction">
 -------------------------------------------------------------------
 <summary>
 Begins a transaction for the current <see cref="M:EwEUtils.Database.cEwEDatabase.GetConnection">Connection</see>.
 </summary>
	<returns>True if succesful.</returns>
	<remarks>19may07: status experimental</remarks>
 -------------------------------------------------------------------

</member><member name="M:EwEUtils.Database.cEwEDatabase.CommitTransaction(System.Boolean)">
 -------------------------------------------------------------------
 <summary>
 Commits a transaction previously initiated via <see cref="M:EwEUtils.Database.cEwEDatabase.BeginTransaction">BeginTransaction</see>.
 </summary>
	<param name="bRollbackOnError">Flag stating whether the transaction needs
 to automatically rollback when the commit process fails.</param>
	<returns>True if the commit operation succeeded.</returns>
 -------------------------------------------------------------------

</member><member name="M:EwEUtils.Database.cEwEDatabase.RollbackTransaction">
 -------------------------------------------------------------------
 <summary>
 Commits a transaction to the current <see cref="M:EwEUtils.Database.cEwEDatabase.GetConnection">Connection</see>.
 </summary>
	<returns></returns>
 -------------------------------------------------------------------

</member><member name="M:EwEUtils.Database.cEwEDatabase.Transaction">
 -------------------------------------------------------------------
 <summary>
 Helper method; internally exposes the current active transaction.
 </summary>
 -------------------------------------------------------------------

</member><member name="M:EwEUtils.Database.cEwEDatabase.CreateDBCommand(System.String)">
 -------------------------------------------------------------------
 <summary>
 Returns an <see cref="T:System.Data.IDbCommand">IDbCommand</see> for the current DBMS
 </summary>
	<param name="strSQL">Query to create the IDbCommand with.</param>
	<returns>Nothing if an error occurred.</returns>
 -------------------------------------------------------------------

</member><member name="M:EwEUtils.Database.cEwEDatabase.GetReader(System.String)">
 -------------------------------------------------------------------
 <summary>
 Returns a <see cref="T:System.Data.IDataReader">IDataReader</see> with a collection
 of readonly records from the currently open connection.
 </summary>
	<param name="strSQL">The query to obtain the records.</param>
	<returns></returns>
	<remarks>The obtained IDataReader should be released via <see cref="M:EwEUtils.Database.cEwEDatabase.ReleaseReader(System.Data.IDataReader)">ReleaseReader</see>.</remarks>
 -------------------------------------------------------------------

</member><member name="M:EwEUtils.Database.cEwEDatabase.ReleaseReader(System.Data.IDataReader)">
 -------------------------------------------------------------------
 <summary>
 Releases the set of readonly records previously obtained by calling
 <see cref="M:EwEUtils.Database.cEwEDatabase.GetReader(System.String)">GetReader</see>.
 </summary>
	<param name="reader">The <see cref="T:System.Data.IDataReader">IDataReader</see> to release.</param>
	<returns>True if succesful.</returns>
 -------------------------------------------------------------------

</member><member name="M:EwEUtils.Database.cEwEDatabase.GetWriter(System.String)">
 -------------------------------------------------------------------
 <summary>
 Returns a <see cref="T:EwEUtils.Database.cEwEDatabase.cEwEDbWriter">cEwEDbWriter</see> for
 the given table in the database.
 </summary>
	<param name="strTable">The table to connect the EwEDbWriter to.</param>
 -------------------------------------------------------------------

</member><member name="M:EwEUtils.Database.cEwEDatabase.ReleaseWriter(EwEUtils.Database.cEwEDatabase.cEwEDbWriter@,System.Boolean)">
 -------------------------------------------------------------------
 <summary>
 Releases a writer previously created via <see cref="M:EwEUtils.Database.cEwEDatabase.GetWriter(System.String)">GetWriter</see>.
 </summary>
	<param name="writer">The writer to release</param>
	<param name="bSaveChanges">States whether changes should be written (true) or discarded (false).</param>
	<returns>True if succesful.</returns>
 -------------------------------------------------------------------

</member><member name="M:EwEUtils.Database.cEwEDatabase.GetValue(System.String)">
 -------------------------------------------------------------------
 <summary>
 Returns a scalar value from the current open connection.
 </summary>
	<param name="strSQL">The query to execute.</param>
	<returns>The scalar value returned from the query.</returns>
 -------------------------------------------------------------------

</member><member name="M:EwEUtils.Database.cEwEDatabase.GetAdapter(System.String)">
 -------------------------------------------------------------------
 <summary>
 Obtains an <see cref="T:System.Data.IDataAdapter">IDataAdapter</see> for the
 current open connection.
 </summary>
	<param name="strSQL">The SQL query to obtain the adaper for.</param>
	<returns>An <see cref="T:System.Data.IDataAdapter">IDataAdapter</see> if
 successful, or Nothing when an error occurred.</returns>
	<remarks>
		<para>The obtained IDataAdapter should be released via 
 <see cref="M:EwEUtils.Database.cEwEDatabase.ReleaseAdapter(System.Data.IDataAdapter@)">ReleaseAdapter</see>.</para></remarks>
 -------------------------------------------------------------------

</member><member name="M:EwEUtils.Database.cEwEDatabase.ReleaseAdapter(System.Data.IDataAdapter@)">
 -------------------------------------------------------------------
 <summary>
 Releases an <see cref="T:System.Data.IDataAdapter">IDataAdapter</see> 
 previously obtained from <see cref="M:EwEUtils.Database.cEwEDatabase.GetAdapter(System.String)">GetAdapter</see>.
 </summary>
	<param name="adapter">The <see cref="T:System.Data.IDataAdapter">IDataAdapter</see> 
 to release.</param>
	<returns>True if succesful.</returns>
 -------------------------------------------------------------------

</member><member name="M:EwEUtils.Database.cEwEDatabase.Execute(System.String)">
 -------------------------------------------------------------------
 <summary>
 Executes a SQL command that does not return any information.
 </summary>
	<param name="strSQL">The query to execute.</param>
	<returns>True if succesful.</returns>
 -------------------------------------------------------------------

</member><member name="M:EwEUtils.Database.cEwEDatabase.GetPkKeyName(System.String)">
 -------------------------------------------------------------------
 <summary>
 Returns the name of a primary key of a table.
 </summary>
	<param name="strTable">The table name to obtain the primary key for.</param>
	<returns>A name, or an empty string when no primary key was found.</returns>
	<remarks>
 After http://www.koders.com/csharp/fidE6A0EFDE719732D025C3D41E95CC26214E50188C.aspx
 </remarks>
 -------------------------------------------------------------------

</member><member name="M:EwEUtils.Database.cEwEDatabase.GetFkKeyName(System.String,System.String,System.String)">
 -------------------------------------------------------------------
 <summary>
 Returns the name of a primary key of a table.
 </summary>
	<returns>A name, or an empty string when no primary key was found.</returns>
 -------------------------------------------------------------------

</member><member name="M:EwEUtils.Database.cEwEDatabase.ReadSafe(System.Data.IDataReader,System.String,System.Object,System.Object)">
 -----------------------------------------------------------------------
 <summary>
 Helper method, reads data from a column that may not exist. In that case,
 an optional default value is returned
 </summary>
	<param name="reader">The <see cref="T:System.Data.IDataReader">IDataReader</see> to read from.</param>
	<param name="strField">The name of the DB field (column) to read.</param>
	<param name="objValueDefault">A default value to return if the field could not be read.</param>
	<param name="objValueIgnore">Value to interpret as 'no value. When encountered, the default value will be returned.</param>
	<returns>The value of the requested column, or the provided default if an error occurred.</returns>
 -----------------------------------------------------------------------

</member><member name="M:EwEUtils.Database.cEwEDatabase.GetDataSet(System.Data.IDataAdapter,System.String)">
 -------------------------------------------------------------------
 <summary>
 Obtains a <see cref="T:System.Data.DataSet">DataSet</see> for modifying records.
 </summary>
	<param name="adapter">The <see cref="T:System.Data.IDataAdapter">IDataAdapter</see> to fill the <see cref="T:System.Data.DataSet">DataSet</see> from.</param>
	<param name="strTable">The name of the table to fill the <see cref="T:System.Data.DataSet">DataSet</see> from.</param>
	<returns>The <see cref="T:System.Data.DataSet">DataSet</see> if succesful, or Nothing if an error occurred.</returns>
	<remarks>The obtained <see cref="T:System.Data.DataSet">DataSet</see> should be released via <see cref="M:EwEUtils.Database.cEwEDatabase.ReleaseDataSet(System.Data.DataSet,System.Data.IDataAdapter,System.String)">ReleaseWriter</see>.
 </remarks>
 -------------------------------------------------------------------

</member><member name="M:EwEUtils.Database.cEwEDatabase.CommitDataSet(System.Data.DataSet,System.Data.IDataAdapter,System.String)">
 -------------------------------------------------------------------
 <summary>
 Commits all the pending changes in the <see cref="T:System.Data.DataSet">DataSet</see>. This will
 leave the DataSet open for further operations.
 </summary>
	<param name="dset">The <see cref="T:System.Data.DataSet">DataSet</see> to commit</param>
	<param name="adapter">The <see cref="T:System.Data.IDataAdapter">OleDbDataAdapter</see> to write to the database</param>
	<param name="strTable">The table to update</param>
	<returns>True if succesful</returns>
 -------------------------------------------------------------------

</member><member name="M:EwEUtils.Database.cEwEDatabase.ReleaseDataSet(System.Data.DataSet,System.Data.IDataAdapter,System.String)">
 -------------------------------------------------------------------
 <summary>
 Releases a <see cref="T:System.Data.DataSet">DataSet</see> previously obtained via 
 <see cref="M:EwEUtils.Database.cEwEDatabase.GetDataSet(System.Data.IDataAdapter,System.String)">GetDataSet</see>.
 </summary>
	<param name="dset">The writer to release.</param>
	<param name="adapter">The <see cref="T:System.Data.IDataAdapter">IDataAdapter</see>
 to commit any changes to. If this parameter is left blank, any changes made to
 the dataset and its data are discarded.</param>
	<param name="strTable">The name of the table to update.</param>
	<returns>True if succesful.</returns>
 -------------------------------------------------------------------

</member><member name="F:EwEUtils.Database.cEwEDatabase.cOOPStorable.m_iDBID">
	<summary>Unique ID of an instance of cOOPStorable</summary>
</member><member name="F:EwEUtils.Database.cEwEDatabase.cOOPStorable.m_bAllowEvents">
	<summary>Flag stating whether an cOOPStorabe instance is allowed to 
 broadcast <see cref="E:EwEUtils.Database.cEwEDatabase.cOOPStorable.OnChanged">OnChanged</see>events.</summary>
</member><member name="F:EwEUtils.Database.cEwEDatabase.cOOPStorable.m_bInUpdate">
	<summary>Flag preventing looped updates.</summary>
</member><member name="F:EwEUtils.Database.cEwEDatabase.cOOPStorable.m_bDeleted">
	<summary>Flag stating whether the object is deleted from the database.</summary>
	<remarks>This flag is deliberately only available at debug time.</remarks>
</member><member name="F:EwEUtils.Database.cEwEDatabase.cOOPStorable.cDBID_INVALID">
	<summary>Default ID for newly created cOOPStorable instances.</summary>
</member><member name="E:EwEUtils.Database.cEwEDatabase.cOOPStorable.OnChanged">
 ---------------------------------------------------------------
 <summary>
 Event to notify that instance unit has changed
 </summary>
	<param name="obj">The <see cref="T:EwEUtils.Database.cEwEDatabase.cOOPStorable">instance</see>
 that changed</param>
 ---------------------------------------------------------------

</member><member name="P:EwEUtils.Database.cEwEDatabase.cOOPStorable.DBID">
 ---------------------------------------------------------------
 <summary>
 The unique ID of any object in the database. The database
 manages this property exclusively although public read 
 access is allowed.
 </summary>
 ---------------------------------------------------------------

</member><member name="P:EwEUtils.Database.cEwEDatabase.cOOPStorable.AllowEvents">
 ---------------------------------------------------------------
 <summary>
 Get/set whether this instance is allowed to send
 <see cref="E:EwEUtils.Database.cEwEDatabase.cOOPStorable.OnChanged">change events</see>.
 </summary>
 ---------------------------------------------------------------

</member><member name="M:EwEUtils.Database.cEwEDatabase.cOOPStorable.CopyFrom(EwEUtils.Database.cEwEDatabase.cOOPStorable)">
 ---------------------------------------------------------------
 <summary>
 Copy the content of another instance of cOOPStorable.
 </summary>
	<param name="objSrc">The source ofject to copy content from.</param>
 ---------------------------------------------------------------

</member><member name="M:EwEUtils.Database.cEwEDatabase.cOOPStorable.SetChanged">
 ---------------------------------------------------------------
 <summary>
 Helper method, states whether the content of an instance has
 been modified externally.
 </summary>
 ---------------------------------------------------------------

</member><member name="P:EwEUtils.Database.cEwEDatabase.cOOPStorable.Deleted">
 ---------------------------------------------------------------
 <summary>
 Helper method, states whether the object has been deleted from 
 the database and thus cannot be saved.
 </summary>
	<remarks>
 This method is only available at debug time.
 </remarks>
 ---------------------------------------------------------------

</member><member name="T:EwEUtils.Database.cEwEDatabase.cOOPStorable">
 -------------------------------------------------------------------
 <summary>
 Base class for implementing objects that can be stored in this type
 of database.
 </summary>
 -------------------------------------------------------------------

</member><member name="M:EwEUtils.Database.cEwEDatabase.cOOPStorableList.Add(EwEUtils.Database.cEwEDatabase.cOOPStorable)">
 -------------------------------------------------------------------
 <summary>
 Add an <see cref="T:EwEUtils.Database.cEwEDatabase.cOOPStorable">object</see> to the list.
 </summary>
	<param name="item">The <see cref="T:EwEUtils.Database.cEwEDatabase.cOOPStorable">object</see> to add.</param>
 -------------------------------------------------------------------

</member><member name="M:EwEUtils.Database.cEwEDatabase.cOOPStorableList.Clear">
 -------------------------------------------------------------------
 <summary>
 Clear the list.
 </summary>
 -------------------------------------------------------------------

</member><member name="M:EwEUtils.Database.cEwEDatabase.cOOPStorableList.Contains(EwEUtils.Database.cEwEDatabase.cOOPStorable)">
 -------------------------------------------------------------------
 <summary>
 States whether the list contains a given <see cref="T:EwEUtils.Database.cEwEDatabase.cOOPStorable">object</see>.
 </summary>
	<param name="item">The <see cref="T:EwEUtils.Database.cEwEDatabase.cOOPStorable">object</see> to find.</param>
	<returns>True if the list contains this <see cref="T:EwEUtils.Database.cEwEDatabase.cOOPStorable">object</see>.</returns>
 -------------------------------------------------------------------

</member><member name="M:EwEUtils.Database.cEwEDatabase.cOOPStorableList.CopyTo(EwEUtils.Database.cEwEDatabase.cOOPStorable[],System.Int32)">
 -------------------------------------------------------------------
 <summary>
 Copy the list to an array, starting at a given array index.
 </summary>
	<param name="array">The array to copy <see cref="T:EwEUtils.Database.cEwEDatabase.cOOPStorable">object</see> into.</param>
	<param name="arrayIndex">Index of the list item to start copying from.</param>
	<remarks>Please make sure the receiving array is big enough 
 to hold the list items.</remarks>
 -------------------------------------------------------------------

</member><member name="P:EwEUtils.Database.cEwEDatabase.cOOPStorableList.Count">
 -------------------------------------------------------------------
 <summary>
 Get/set the number of <see cref="T:EwEUtils.Database.cEwEDatabase.cOOPStorable">objects</see> in the list.
 </summary>
 -------------------------------------------------------------------

</member><member name="P:EwEUtils.Database.cEwEDatabase.cOOPStorableList.IsReadOnly">
 -------------------------------------------------------------------
 <summary>
 Get whether the list can be modified.
 </summary>
 -------------------------------------------------------------------

</member><member name="M:EwEUtils.Database.cEwEDatabase.cOOPStorableList.Remove(EwEUtils.Database.cEwEDatabase.cOOPStorable)">
 -------------------------------------------------------------------
 <summary>
 Remove an <see cref="T:EwEUtils.Database.cEwEDatabase.cOOPStorable">object</see> from the list.
 </summary>
	<param name="item">The <see cref="T:EwEUtils.Database.cEwEDatabase.cOOPStorable">object</see> to remove.</param>
	<returns>True if successful.</returns>
 -------------------------------------------------------------------

</member><member name="M:EwEUtils.Database.cEwEDatabase.cOOPStorableList.GetEnumerator">
 -------------------------------------------------------------------
 <summary>
 Returns an enumerator for cartwheeling though this list.
 </summary>
 -------------------------------------------------------------------

</member><member name="M:EwEUtils.Database.cEwEDatabase.cOOPStorableList.IndexOf(EwEUtils.Database.cEwEDatabase.cOOPStorable)">
 -------------------------------------------------------------------
 <summary>
 Returns the list index of a given <see cref="T:EwEUtils.Database.cEwEDatabase.cOOPStorable">object</see>.
 </summary>
	<param name="item">The <see cref="T:EwEUtils.Database.cEwEDatabase.cOOPStorable">object</see> to locate.</param>
	<returns>An integer value representing the index of the 
 <see cref="T:EwEUtils.Database.cEwEDatabase.cOOPStorable">object</see> in the list, or -1 if this item
 was not found.</returns>
 -------------------------------------------------------------------

</member><member name="M:EwEUtils.Database.cEwEDatabase.cOOPStorableList.Insert(System.Int32,EwEUtils.Database.cEwEDatabase.cOOPStorable)">
 -------------------------------------------------------------------
 <summary>
 Insert an <see cref="T:EwEUtils.Database.cEwEDatabase.cOOPStorable">object</see> at a given position in the list.
 </summary>
	<param name="index">The list position to insert the item at.</param>
	<param name="item">The <see cref="T:EwEUtils.Database.cEwEDatabase.cOOPStorable">object</see> to insert.</param>
 -------------------------------------------------------------------

</member><member name="P:EwEUtils.Database.cEwEDatabase.cOOPStorableList.Item(System.Int32)">
 -------------------------------------------------------------------
 <summary>
 Get the <see cref="T:EwEUtils.Database.cEwEDatabase.cOOPStorable">object</see> at a given position in the list.
 </summary>
	<param name="index">The list index of the <see cref="T:EwEUtils.Database.cEwEDatabase.cOOPStorable">object</see> to retrieve.</param>
 -------------------------------------------------------------------

</member><member name="M:EwEUtils.Database.cEwEDatabase.cOOPStorableList.RemoveAt(System.Int32)">
 -------------------------------------------------------------------
 <summary>
 Remove an <see cref="T:EwEUtils.Database.cEwEDatabase.cOOPStorable">object</see> at a given position in the list.
 </summary>
	<param name="index">The position of the <see cref="T:EwEUtils.Database.cEwEDatabase.cOOPStorable">object</see> to remove.</param>
 -------------------------------------------------------------------

</member><member name="M:EwEUtils.Database.cEwEDatabase.cOOPStorableList.GetEnumaarghAarghAargh">
 -------------------------------------------------------------------
 <summary>
 Neh
 </summary>
 -------------------------------------------------------------------

</member><member name="T:EwEUtils.Database.cEwEDatabase.cOOPStorableList">
 -------------------------------------------------------------------
 <summary>
 Strong-typed list for cOOPStorable instances.
 </summary>
 -------------------------------------------------------------------

</member><member name="F:EwEUtils.Database.cEwEDatabase.cOOPKey.m_iDBID">
	<summary>The ID for an object in the database</summary>
</member><member name="F:EwEUtils.Database.cEwEDatabase.cOOPKey.m_tOriginating">
	<summary>The runtime type that was used to write the
 record in the database with this ID.</summary>
</member><member name="M:EwEUtils.Database.cEwEDatabase.cOOPKey.#ctor(System.Type,System.Int32)">
 ---------------------------------------------------------------
 <summary>
 Construct a new cOOPKey instance.
 </summary>
	<param name="t">The runtime type to generate the key for.</param>
	<param name="iDBID">The unique ID that this key is generated for.</param>
 ---------------------------------------------------------------

</member><member name="P:EwEUtils.Database.cEwEDatabase.cOOPKey.DBID">
 ---------------------------------------------------------------
 <summary>
 Get the unique ID for the key.
 </summary>
 ---------------------------------------------------------------

</member><member name="P:EwEUtils.Database.cEwEDatabase.cOOPKey.OriginatingType">
 ---------------------------------------------------------------
 <summary>
 Get the runtime type for the key.
 </summary>
 ---------------------------------------------------------------

</member><member name="T:EwEUtils.Database.cEwEDatabase.cOOPKey">
 -------------------------------------------------------------------
 <summary>
 Class for querying if cOOPStorable instances are stored in the 
 database.
 </summary>
 -------------------------------------------------------------------

</member><member name="M:EwEUtils.Database.cEwEDatabase.ReadObjectKey(System.Int32)">
 -------------------------------------------------------------------
 <summary>
 Read an cOOPKey for a ID in the database. If all goes well a 
 <see cref="T:EwEUtils.Database.cEwEDatabase.cOOPKey">object key</see> is returned, which links the
 ID value to the originating runtime type.
 </summary>
	<param name="iDBID">
 The ID to retrieve an <see cref="T:EwEUtils.Database.cEwEDatabase.cOOPKey">object key</see> for.
 </param>
	<returns>
 A <see cref="T:EwEUtils.Database.cEwEDatabase.cOOPKey">object key</see> instance, or null if the ID 
 was not present in the database, or if the originating runtime
 type was not present in the current loaded set of assemblies.
 </returns>
 -------------------------------------------------------------------

</member><member name="M:EwEUtils.Database.cEwEDatabase.ReadObjectKeys(System.Type,System.Boolean)">
 -------------------------------------------------------------------
 <summary>
 Read keys for all objects of a given type from the database.
 </summary>
	<param name="t">Type to filter by.</param>
	<param name="bIncludeInherited">Flag indicating whether objects 
 inherited from <paramref name="t">t</paramref> are allowed to be 
 returned as well.</param>
	<returns>An array of <see cref="T:EwEUtils.Database.cEwEDatabase.cOOPKey">object keys</see>.</returns>
 -------------------------------------------------------------------

</member><member name="M:EwEUtils.Database.cEwEDatabase.ReadObject(EwEUtils.Database.cEwEDatabase.cOOPKey)">
 -------------------------------------------------------------------
 <summary>
 Reads an object from the database.
 </summary>
	<param name="key"><see cref="T:EwEUtils.Database.cEwEDatabase.cOOPKey">Object key</see> to read the 
 object for.</param>
	<returns>A <see cref="T:EwEUtils.Database.cEwEDatabase.cOOPStorable">cOOPStorable</see>-derived 
 instance, or null if an error occurred.</returns>
 -------------------------------------------------------------------

</member><member name="M:EwEUtils.Database.cEwEDatabase.ReadObject(System.Type,System.Int32)">
 -------------------------------------------------------------------
 <summary>
 Reads an object from the database.
 </summary>
	<param name="t">The type of the object to read.</param>
	<param name="iDBID">The ID of the object to read.</param>
	<returns>A <see cref="T:EwEUtils.Database.cEwEDatabase.cOOPStorable">cOOPStorable</see>-derived 
 instance, or null if an error occurred.</returns>
 -------------------------------------------------------------------

</member><member name="M:EwEUtils.Database.cEwEDatabase.ReadObjects(System.Type,System.Boolean)">
 -------------------------------------------------------------------
 <summary>
 Reads all objects of a given type from the database.
 </summary>
	<param name="t">The type to read objects for.</param>
	<param name="bIncludeInherited">Flag indicating whether objects 
 inherited from <paramref name="t">t</paramref> are allowed to be 
 read as well.</param>
	<returns>
 An array of <see cref="T:EwEUtils.Database.cEwEDatabase.cOOPStorable">cOOPStorable</see>-derived 
 instances.
 </returns>
 -------------------------------------------------------------------

</member><member name="M:EwEUtils.Database.cEwEDatabase.WriteObject(EwEUtils.Database.cEwEDatabase.cOOPStorable)">
 -------------------------------------------------------------------
 <summary>
 Write an <see cref="T:EwEUtils.Database.cEwEDatabase.cOOPStorable">OOPstorable-derived</see> instance 
 to the database.
 </summary>
	<param name="obj">The object to save.</param>
	<remarks>
 This method will verifuy - and update if  necessary - the database
 schema for this class of object and its base classes. This check 
 is performed only the very first time a particular object is written 
 to the database; consecutive save attempts will bypass the check for
 performance reasons.
 </remarks>
 -------------------------------------------------------------------

</member><member name="M:EwEUtils.Database.cEwEDatabase.DeleteObject(EwEUtils.Database.cEwEDatabase.cOOPStorable)">
 -------------------------------------------------------------------
 <summary>
 Delete an <see cref="T:EwEUtils.Database.cEwEDatabase.cOOPStorable">cOOPStorable-derived</see> 
 instance from the database.
 </summary>
	<param name="obj">The object to delete.</param>
	<returns>True if succesful.</returns>
 -------------------------------------------------------------------

</member><member name="M:EwEUtils.Database.cEwEDatabase.DeleteObjectRecursive(EwEUtils.Database.cEwEDatabase.cOOPStorable,System.Type)">
 -------------------------------------------------------------------
 <summary>
 Delete an cOOPStorable-derived instance from the database, starting
 at the given class level, and recursively deleting the direct
 base class instance if applicable.
 </summary>
	<param name="obj">The object to delete.</param>
	<param name="t">The class level to delete from the database.</param>
	<returns>True if succesful.</returns>
 -------------------------------------------------------------------

</member><member name="F:EwEUtils.Database.cEwEDatabase.m_bOOPEnabled">
	<summary>Flag stating whether the database has been prepared 
 for OOP object access. To prepare the database for OOP access
 refer to <see cref="P:EwEUtils.Database.cEwEDatabase.OOPEnabled">OOPEnabled</see>.</summary>
</member><member name="F:EwEUtils.Database.cEwEDatabase.m_iNextDBID">
	<summary>The unique ID to assigne to new cOOPStorable instances
 in the database.</summary>
</member><member name="F:EwEUtils.Database.cEwEDatabase.m_OOPObjectCache">
	<summary>Cache of all objects already saved into the database.
 Keeping a cache is much faster than having to query the database
 for every potential save.</summary>
</member><member name="F:EwEUtils.Database.cEwEDatabase.m_OOPObjectSchemaVerified">
	<summary>Cache of all object for which the database schema has
 already been verifyfied during since the last time the database
 was opened.</summary>
</member><member name="P:EwEUtils.Database.cEwEDatabase.OOPEnabled">
 -------------------------------------------------------------------
 <summary>
 Turn on or off OOP capabilities
 </summary>
 -------------------------------------------------------------------

</member><member name="M:EwEUtils.Database.cEwEDatabase.OOPFlushObjectCache">
 -------------------------------------------------------------------
 <summary>
 Internal admin helper; clear the saved object cache.
 </summary>
 -------------------------------------------------------------------

</member><member name="M:EwEUtils.Database.cEwEDatabase.OOPFlushSchemaCache">
 -------------------------------------------------------------------
 <summary>
 Internal admin helper; clear the verified schema cache.
 </summary>
 -------------------------------------------------------------------

</member><member name="F:EwEUtils.Database.cEwEDatabase.cOOPObjectCache.m_dtObjectCache">
	<summary>The cache.</summary>
</member><member name="M:EwEUtils.Database.cEwEDatabase.cOOPObjectCache.AddObject(EwEUtils.Database.cEwEDatabase.cOOPStorable)">
 ---------------------------------------------------------------
 <summary>Add an object to the cache.</summary>
	<param name="obj">The object to add.</param>
 ---------------------------------------------------------------

</member><member name="M:EwEUtils.Database.cEwEDatabase.cOOPObjectCache.RemoveObject(EwEUtils.Database.cEwEDatabase.cOOPStorable)">
 ---------------------------------------------------------------
 <summary>
 Remove an object from the cache.
 </summary>
	<param name="obj">The object to remove.</param>
 ---------------------------------------------------------------

</member><member name="M:EwEUtils.Database.cEwEDatabase.cOOPObjectCache.GetObject(System.Int32)">
 ---------------------------------------------------------------
 <summary>
 Retrieves an object from the cache.
 </summary>
	<param name="iDBID">The ID of the object to retrieve.</param>
	<returns>An object, or nothing if the object is not present
 in the cache.</returns>
 ---------------------------------------------------------------

</member><member name="M:EwEUtils.Database.cEwEDatabase.cOOPObjectCache.HasObject(System.Int32)">
 ---------------------------------------------------------------
 <summary>
 States whether an object with a given database ID is present
 in the cache.
 </summary>
	<param name="iDBID">The ID of the object to find.</param>
	<returns>True if the object is present in the cache.</returns>
 ---------------------------------------------------------------

</member><member name="M:EwEUtils.Database.cEwEDatabase.cOOPObjectCache.Clear">
 ---------------------------------------------------------------
 <summary>
 Clears the object cache.
 </summary>
 ---------------------------------------------------------------

</member><member name="T:EwEUtils.Database.cEwEDatabase.cOOPObjectCache">
 -------------------------------------------------------------------
 <summary>
 Helper class, maintains a dictionary of processed 
 <see cref="T:EwEUtils.Database.cEwEDatabase.cOOPStorable">objects</see> for reassembling item links.
 </summary>
 -------------------------------------------------------------------

</member><member name="T:EwEUtils.Database.cEwEDatabase.OOP_sFKInfo">
 ---------------------------------------------------------------
 <summary>
 OOP foreign key
 </summary>
 ---------------------------------------------------------------

</member><member name="M:EwEUtils.Database.cEwEDatabase.OOPCreateObjectTable(System.Type)">
 -------------------------------------------------------------------
 <summary>
 Create a table for a <see cref="T:EwEUtils.Database.cEwEDatabase.cOOPStorable">cOOPStorable</see>-derived class 
 </summary>
	<param name="t">The <see cref="T:System.Type">type</see> to build the table for.</param>
	<returns>True if succesful.</returns>
 -------------------------------------------------------------------

</member><member name="M:EwEUtils.Database.cEwEDatabase.OOPUpdateObjectTable(System.Type,System.Data.OleDb.OleDbConnection)">
 -------------------------------------------------------------------
 <summary>
 Update column definitions for a single given cOOPStorable-derived 
 type within an existing table.
 </summary>
	<param name="t">The type to update the database schema for.</param>
	<param name="conn">The database connection to update the database
 schema.</param>
	<returns>True if succesful.</returns>
	<remarks>
		<para>This method does not recurse; a single type is processed for a 
 single table. To process an enitre object inheritance tree, use
 <see cref="M:EwEUtils.Database.cEwEDatabase.OOPUpdateObjectSchema(System.Type)">OOPUpdateObjectSchema</see>.</para>
		<para>Note that this method does not handle column datatype 
 conversions; only mssing columns are added.</para>
	</remarks>
 -------------------------------------------------------------------

</member><member name="M:EwEUtils.Database.cEwEDatabase.OOPUpdateObjectSchema(System.Type)">
 -------------------------------------------------------------------
 <summary>
 Update the database schema for storing a class of a given type. The
 entire inheritance tree of the given type is processed, new tables
 are created and table columns are added when necessary.
 </summary>
	<param name="t">The type to update the database schema for.</param>
	<returns>
 True if succesful.
 </returns>
 -------------------------------------------------------------------

</member><member name="F:EwEUtils.Database.cEwEDatabase.cOOPAdapterCacheEntry.m_strTable">
	<summary>Name of the table that an adapter references to.</summary>
</member><member name="F:EwEUtils.Database.cEwEDatabase.cOOPAdapterCacheEntry.m_adapter">
	<summary>The cached adapter.</summary>
</member><member name="F:EwEUtils.Database.cEwEDatabase.cOOPAdapterCacheEntry.m_iRefCount">
	<summary>Number of references to a cached adapater.</summary>
</member><member name="M:EwEUtils.Database.cEwEDatabase.cOOPAdapterCacheEntry.#ctor(System.String,System.Data.IDataAdapter)">
 ---------------------------------------------------------------
 <summary>
 Contructs a new cache entry.
 </summary>
	<param name="strTable">The table the adapter was obtained for.</param>
	<param name="adapter">The database adapter that was returned for
 this table.</param>
 ---------------------------------------------------------------

</member><member name="M:EwEUtils.Database.cEwEDatabase.cOOPAdapterCacheEntry.AddRef">
 ---------------------------------------------------------------
 <summary>
 Increase adapter usage count.
 </summary>
 ---------------------------------------------------------------

</member><member name="M:EwEUtils.Database.cEwEDatabase.cOOPAdapterCacheEntry.RemoveRef">
 ---------------------------------------------------------------
 <summary>
 Decrease adapter usage count.
 </summary>
 ---------------------------------------------------------------

</member><member name="M:EwEUtils.Database.cEwEDatabase.cOOPAdapterCacheEntry.Released">
 ---------------------------------------------------------------
 <summary>
 States if the adapter is no longer used.
 </summary>
	<returns>
 True if released.
 </returns>
 ---------------------------------------------------------------

</member><member name="P:EwEUtils.Database.cEwEDatabase.cOOPAdapterCacheEntry.Adapter">
 ---------------------------------------------------------------
 <summary>
 Returns the referenced adapter.
 </summary>
 ---------------------------------------------------------------

</member><member name="P:EwEUtils.Database.cEwEDatabase.cOOPAdapterCacheEntry.Table">
 ---------------------------------------------------------------
 <summary>
 Returns the name of the referenced table.
 </summary>
 ---------------------------------------------------------------

</member><member name="T:EwEUtils.Database.cEwEDatabase.cOOPAdapterCacheEntry">
 -------------------------------------------------------------------
 <summary>
 Single adapter entry in the 
 <see cref="F:EwEUtils.Database.cEwEDatabase.m_dtOOPAdapterCache">adapter cache</see>.
 </summary>
	<remarks>
 The adapter cache is meant to speed up object access during a single
 database transaction while writing nested classes to the OOP database.
 </remarks>
 -------------------------------------------------------------------

</member><member name="F:EwEUtils.Database.cEwEDatabase.m_dtOOPAdapterCache">
 -------------------------------------------------------------------
 <summary>
 Cache of open database adapters.
 </summary>
	<remarks>
		<para>When writing an OOP class structure, objects are written recursively
 to the database, ensuring that baseclass information is written first. Linked
 objects are written whenever a reference is encountered. Due to this unpredictable
 flow, chances are that database tables need to accessed for writing several
 times when writing a single object instance.</para>
		<para>A database will deny multiple adapter request for writing. To overcome this
 problem, the adapter cache maintains a list of open adapters available while saving
 OOP data which can be reused until the entire write operation is done.</para>
		<para>Adapters are obtained via <see cref="M:EwEUtils.Database.cEwEDatabase.OOPGetAdapter(System.String)">OOPGetAdapter</see>,
 and are released via <see cref="M:EwEUtils.Database.cEwEDatabase.OOPReleaseAdapter(System.String)">OOPReleaseAdapter</see>.</para>
	</remarks>
 ------------------------------------------------------------------- 

</member><member name="M:EwEUtils.Database.cEwEDatabase.OOPGetAdapter(System.String)">
 -------------------------------------------------------------------
 <summary>
 Obtain a database adapter from the adapter cache.
 </summary>
	<param name="strTable">Table name to obtain the adapter for.</param>
	<returns>A database adapter if succesful, or Nothing if an error occurred.</returns>
	<remarks>
 An adapter obtained via this method must be released via 
 <see cref="M:EwEUtils.Database.cEwEDatabase.OOPReleaseAdapter(System.String)">OOPReleaseAdapter</see>
	</remarks>
 -------------------------------------------------------------------

</member><member name="M:EwEUtils.Database.cEwEDatabase.OOPReleaseAdapter(System.String)">
 -------------------------------------------------------------------
 <summary>
 Release a database adapter from the adapter cache that was previously
 obtained via <see cref="M:EwEUtils.Database.cEwEDatabase.OOPGetAdapter(System.String)">OOPGetAdapter</see>.
 </summary>
	<param name="strTable">Table name to release the adapter for.</param>
	<returns>True if the adapter was released succesfully, or False 
 if an error occurred.</returns>
 -------------------------------------------------------------------

</member><member name="M:EwEUtils.Database.cEwEDatabase.OOPHasOpenAdapters">
 -------------------------------------------------------------------
 <summary>
 Helper method, states if there are open adapters left in the adapter cache.
 </summary>
	<returns>True if there are any open adapters left in the cache.</returns>
	<remarks>There should be no more open adapters left when a write
 operation is complete.</remarks>
 -------------------------------------------------------------------

</member><member name="F:EwEUtils.Database.cEwEDatabase.OOP_CLASSNAMECOL">
	<summary>
 Reserved column name for storing class names in the OOP database schema
 </summary>
</member><member name="M:EwEUtils.Database.cEwEDatabase.OOPGetTableName(System.Type)">
 -------------------------------------------------------------------
 <summary>
 Helper method, returns a SQL table name for a given class/type.
 </summary>
	<param name="t">The class to return the table name for.</param>
	<returns>A table name for the given class.</returns>
	<remarks>
 This method will convert invalid namespace characters into
 valid SQL table name characters.
 </remarks>
 -------------------------------------------------------------------

</member><member name="M:EwEUtils.Database.cEwEDatabase.OOPGetColumnName(System.Reflection.PropertyInfo)">
 -------------------------------------------------------------------
 <summary>
 Helper method, returns a SQL column name for a given property.
 </summary>
	<param name="pi">The property info instance to obtain a column
 name for.</param>
	<returns>A column name.</returns>
 -------------------------------------------------------------------

</member><member name="M:EwEUtils.Database.cEwEDatabase.OOPIsBaseClass(System.Type)">
 -------------------------------------------------------------------
 <summary>
 Helper method, states whether a given class is inherited directly 
 from Object.
 </summary>
	<param name="t">The class to test.</param>
	<returns>True if class <paramref name="t">t</paramref> is directly
 inherited from Object.</returns>
 -------------------------------------------------------------------

</member><member name="M:EwEUtils.Database.cEwEDatabase.OOPGetKeyProperty(System.Type)">
 -------------------------------------------------------------------
 <summary>
 Get the property that holds the primary key for a 
 <see cref="T:EwEUtils.Database.cEwEDatabase.cOOPStorable">cOOPStorable</see>-derived <see cref="T:System.Type">Type</see>.
 </summary>
	<param name="t">The <see cref="T:EwEUtils.Database.cEwEDatabase.cOOPStorable">cOOPStorable</see>-derived 
 <see cref="T:System.Type">Type</see> to get the primary key for.</param>
	<returns>A <see cref="T:System.Reflection.PropertyInfo">PropertyInfo</see> instance, or
 nothing if the primary key property was not found. Which is not good;
 this will probably only occur when the class was not properly derived.</returns>
 -------------------------------------------------------------------

</member><member name="M:EwEUtils.Database.cEwEDatabase.OOPGetStorableProperties(System.Type)">
 -------------------------------------------------------------------
 <summary>
 Helper method; returns all writable public properties that are either
 directly declared by a provided <paramref name="t">class</paramref>,
 or that serves as the primary key to the class structure. Only
 properties of classes derived from <see cref="T:EwEUtils.Database.cEwEDatabase.cOOPStorable">cOOPStorable</see>
 are returned.
 </summary>
	<param name="t">The <see cref="T:EwEUtils.Database.cEwEDatabase.cOOPStorable">cOOPStorable</see>-derived
 <see cref="T:System.Type">Type</see> to find storable properties for.</param>
	<returns>An array of <see cref="T:System.Reflection.PropertyInfo">PropertyInfo</see> instances.</returns>
 -------------------------------------------------------------------

</member><member name="M:EwEUtils.Database.cEwEDatabase.OOPGetColumnType(System.Reflection.PropertyInfo)">
 -------------------------------------------------------------------
 <summary>
 Helper method, returns the SQL data type for a given property.
 </summary>
	<param name="pi">The property to obtain the SQL data type for.</param>
	<returns>
 An SQL data type name, or an empty string if the property value type
 was not supported. The list of supported data types can easily be 
 extended.
 </returns>
 -------------------------------------------------------------------

</member><member name="M:EwEUtils.Database.cEwEDatabase.OOPGetPropertyDefaultValue(System.Reflection.PropertyInfo)">
 -------------------------------------------------------------------
 <summary>
 Get the default value for a property.
 </summary>
	<param name="pi">The property info to get the default value for.</param>
	<returns>
	</returns>
	<remarks>
 JS 06Mar09: not implemented yet; need to figure out how to get to
 the actual 'Default' attribute.
 </remarks>
 -------------------------------------------------------------------

</member><member name="F:EwEUtils.Database.cEwEDatabase.m_dtAssemblyNames">
 -------------------------------------------------------------------
 <summary>
 Assembly name cache, added to optimize the process of relocating types
 </summary>
 -------------------------------------------------------------------

</member><member name="M:EwEUtils.Database.cEwEDatabase.OOPTypeToString(System.Type)">
 -------------------------------------------------------------------
 <summary>
 Helper method, translats a class/type to a unique string.
 </summary>
	<param name="t">The class to convert.</param>
	<returns></returns>
	<remarks>
 The counterpart of this method, <see cref="M:EwEUtils.Database.cEwEDatabase.OOPStringToType(System.String)">OOPStringToType</see>,
 can be used to find the originating type from a string.
 </remarks>
 -------------------------------------------------------------------

</member><member name="M:EwEUtils.Database.cEwEDatabase.OOPStringToType(System.String)">
 -------------------------------------------------------------------
 <summary>
 Helper method, locates the originating type from a type string.
 </summary>
	<param name="strType">The type name to locate the originating type
 for.</param>
	<returns></returns>
	<remarks>
 The counterpart of this method, <see cref="M:EwEUtils.Database.cEwEDatabase.OOPTypeToString(System.Type)">OOPTypeToString</see>,
 can be used to create the string for a type.
 </remarks>
 -------------------------------------------------------------------

</member><member name="M:EwEUtils.Database.cEwEDatabase.OOPIsForeignKeyProperty(System.Reflection.PropertyInfo)">
 -------------------------------------------------------------------
 <summary>
 Helper method, determines if the value type of a given property 
 is, or is inherited from, cOOPStorable.
 </summary>
	<param name="pi">The property info instance to test.</param>
	<returns>
 True if the value type of a given property is, or is inherited from,
 cOOPStorable.
 </returns>
 -------------------------------------------------------------------

</member><member name="M:EwEUtils.Database.cEwEDatabase.OOPReadObject(System.Type,System.Int32,System.Reflection.PropertyInfo)">
 -------------------------------------------------------------------
 <summary>
 Read a single cOOPStorable-derived instance from the database.
 </summary>
	<param name="t">The class/type of the object to read.</param>
	<param name="iDBID">The database ID of the object to read.</param>
	<param name="piKey">The property in the <paramref name="t">given type</paramref> 
 where the <paramref name="iDBID">database ID</paramref> should be stored.</param>
	<returns>
 A cOOPStorable-derived instance, or nothing if an error occurred.
 </returns>
 -------------------------------------------------------------------

</member><member name="M:EwEUtils.Database.cEwEDatabase.OOPReadObjectRecursive(System.Type,EwEUtils.Database.cEwEDatabase.cOOPStorable,System.Reflection.PropertyInfo,System.Int32)">
 -------------------------------------------------------------------
 <summary>
 Recursively read a single cOOPStorable-derived instance from the 
 database along the inheritance tree.
 </summary>
	<param name="t">The type in the class hierarchy of instance 
 <paramref name="objRead">objRead</paramref> to read.</param>
	<param name="objRead">Object to read.</param>
	<param name="piKey">Property in the object that holds the database
 ID.</param>
	<param name="iDBID">Database ID value of the object being read.</param>
	<returns></returns>
 -------------------------------------------------------------------

</member><member name="M:EwEUtils.Database.cEwEDatabase.OOPReadListItems(EwEUtils.Database.cEwEDatabase.cOOPStorableList)">
	<summary>
 Helper method, write contents of list 
 </summary>
	<param name="list"></param>
	<returns></returns>
	<remarks></remarks>
</member><member name="M:EwEUtils.Database.cEwEDatabase.OOPWriteListItems(EwEUtils.Database.cEwEDatabase.cOOPStorableList)">
 -------------------------------------------------------------------
 <summary>
 Helper method, write contents of a list.
 </summary>
	<param name="list"></param>
	<returns></returns>
	<remarks></remarks>
 -------------------------------------------------------------------

</member><member name="M:EwEUtils.Database.cEwEDatabase.OOPWriteObjectRecursive(System.Type,EwEUtils.Database.cEwEDatabase.cOOPStorable,System.Reflection.PropertyInfo)">
	<summary>
	</summary>
	<param name="t"></param>
	<param name="obj"></param>
	<param name="piKey"></param>
	<returns></returns>
</member><member name="M:EwEUtils.Database.cEwEDatabase.GetVersion">
 -------------------------------------------------------------------
 <summary>
 Returns the current version of the connected EwE database.
 </summary>
	<returns>
 A Single value with the version latest version number of the connected database.
 </returns>
 -------------------------------------------------------------------

</member><member name="M:EwEUtils.Database.cEwEDatabase.SetVersion(System.Single,System.String)">
 -------------------------------------------------------------------
 <summary>
 Updates the version of the database
 </summary>
	<param name="sVersion">The version to set</param>
	<param name="strComments">The description to use</param>
	<returns>True if succesful</returns>
	<remarks>This method only allows setting the version on an EwE6 database.</remarks>
 -------------------------------------------------------------------

</member><member name="M:EwEUtils.Database.cEwEDatabase.GetMajorVersion(System.Single)">
 -------------------------------------------------------------------
 <summary>
 Extract the major version number from a given version number.
 </summary>
	<param name="sVersion">The version number to examine.</param>
	<returns>The major version number of the given version number.</returns>
	<remarks>
		<para>'6.0' returns '6'</para>
		<para>'2.93' returns '2'</para>
		<para>'-4.4' returns '4'</para>
	</remarks>
 -------------------------------------------------------------------

</member><member name="M:EwEUtils.Database.cEwEDatabase.GetMinorVersion(System.Single)">
 -------------------------------------------------------------------
 <summary>
 Extract the minor version number from a given version number.
 </summary>
	<param name="sVersion">The version number to examine.</param>
	<returns>The minor version number of the given version number.</returns>
	<remarks>
		<para>'6.0' returns '0.0'</para>
		<para>'2.93' returns '0.93'</para>
		<para>'-4.4' returns '0.4'</para>
	</remarks>
 -------------------------------------------------------------------

</member><member name="M:EwEUtils.Database.cEwEDatabase.cHistoryItem.#ctor(System.String,System.String,System.String)">
	<summary>
	</summary>
	<param name="strVersion"></param>
	<param name="strComments"></param>
	<param name="strDate"></param>
	<remarks></remarks>
</member><member name="P:EwEUtils.Database.cEwEDatabase.cHistoryItem.Version">
 -------------------------------------------------------------------
 <summary>
 Get the version number of a particular history item.
 </summary>
 -------------------------------------------------------------------

</member><member name="P:EwEUtils.Database.cEwEDatabase.cHistoryItem.Comments">
 -------------------------------------------------------------------
 <summary>
 Get the comments to a particular history item.
 </summary>
 -------------------------------------------------------------------

</member><member name="P:EwEUtils.Database.cEwEDatabase.cHistoryItem.Date">
 -------------------------------------------------------------------
 <summary>
 Get the date of a particular history item.
 </summary>
 -------------------------------------------------------------------

</member><member name="T:EwEUtils.Database.cEwEDatabase.cHistoryItem">
 -------------------------------------------------------------------
 <summary>
 Database change log item.
 </summary>
 -------------------------------------------------------------------

</member><member name="M:EwEUtils.Database.cEwEDatabase.GetHistory">
 -------------------------------------------------------------------
 <summary>
 Returns the change log of the database.
 </summary>
	<returns></returns>
 -------------------------------------------------------------------

</member><member name="T:EwEUtils.Database.cEwEDatabase">
 -----------------------------------------------------------------------
 <summary>
 Generic base class for implementing a DBMS-specific EwE database
 </summary>
 -----------------------------------------------------------------------

</member><member name="T:EwEUtils.Utilities.cRegistryUtils">
 =======================================================================
 <summary>
 Helper class providing standardized access to the Windows registry.
 </summary>
 =======================================================================

</member><member name="T:EwEUtils.Core.IRunType">
 -----------------------------------------------------------------------
 <summary>
 Template for defining the type of run/computation that exchanged data
 derives from.
 </summary>
 -----------------------------------------------------------------------

</member><member name="P:EwEUtils.My.Resources.Resources.ResourceManager">
	<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member><member name="P:EwEUtils.My.Resources.Resources.Culture">
	<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member><member name="T:EwEUtils.My.Resources.Resources">
	<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member><member name="F:EwEUtils.Utilities.cPropertySorter.PropertyOrderAttribute.m_iOrder">
	<summary>Simple attribute to allow the order of a property to be specified.</summary>
</member><member name="M:EwEUtils.Utilities.cPropertySorter.PropertyOrderComparer.#ctor(System.String,System.String,System.String,System.Int32)">
 ---------------------------------------------------------------
 <summary>
	</summary>
	<param name="strPropertyName">Property name</param>
	<param name="strCategory">Category attribute</param>
	<param name="strDisplayName">Name attribute</param>
	<param name="iOrder">Order attribute</param>
 ---------------------------------------------------------------

</member><member name="M:EwEUtils.Utilities.cPropertySorter.GetProperties(System.ComponentModel.ITypeDescriptorContext,System.Object,System.Attribute[])">
	<summary>
 This override returns a list of properties in order.
 </summary>
	<param name="context"></param>
	<param name="value"></param>
	<param name="attributes"></param>
	<returns></returns>
</member><member name="T:EwEUtils.Utilities.cPropertySorter">
 ===========================================================================
 <summary>
 Code taken from "Ordering Items in the Property Grid" by
 Paul T (http://www.codeproject.com/script/Articles/MemberArticles.aspx?amid=126190)
 url: http://www.codeproject.com/KB/cpp/orderedpropertygrid.aspx
 </summary>
	<remarks>
 Usage:
 
 [TypeConverter(TypeOf(PropertySorter))]
 [DefaultProperty("Name")]
 Public Class Person
 {
     [cPropertySorter.PropertyOrder(1)}
     Public Property Test
     ..
 }
 </remarks>
 ===========================================================================

</member><member name="M:EwEUtils.Utilities.cPropertyConverter.FindOrigPropertyDescriptor(System.Reflection.PropertyInfo)">
 -------------------------------------------------------------------
 <summary>
 Find a <see cref="T:System.ComponentModel.PropertyDescriptor">PropertyDescriptor</see> for
 a given <see cref="T:System.Reflection.PropertyInfo">PropertyInfo</see> instance.
 </summary>
	<param name="pi">The property info instance to find a 
 property descriptor for.</param>
	<returns>A <see cref="T:System.ComponentModel.PropertyDescriptor">PropertyDescriptor</see>
 instance, or nothing if an error occurred.</returns>
 -------------------------------------------------------------------

</member><member name="M:EwEUtils.Utilities.cPropertyConverter.FindOrigPropertyInfo(System.Type,System.ComponentModel.PropertyDescriptor)">
 -------------------------------------------------------------------
 <summary>
 Find a  for <see cref="T:System.Reflection.PropertyInfo">PropertyInfo</see> a given 
 <see cref="T:System.ComponentModel.PropertyDescriptor">PropertyDescriptor</see> instance.
 </summary>
	<param name="t">The type to search.</param>
	<param name="pd">The property descriptor instance to find a 
 property descriptor for.</param>
	<returns>A <see cref="T:System.Reflection.PropertyInfo">PropertyInfo</see> instance,
 or nothing if an error occurred.</returns>
 -------------------------------------------------------------------

</member><member name="T:EwEUtils.Utilities.cPropertyConverter">
 =======================================================================
 <summary>
 Property conversion utility class.
 </summary>
 =======================================================================

</member><member name="T:EwEUtils.Win32Api.Kernel32">
	<summary>
 Helper class providing access to a selection of Win32 kernel32 API calls.
 </summary>
</member><member name="M:EwEUtils.Utilities.cColorUtils.GetVariant(System.Drawing.Color,System.Int32)">
 -------------------------------------------------------------------
 <summary>
 Obtain a lighter variant of a <see cref="T:System.Drawing.Color">color</see>.
 </summary>
	<param name="clr">The colour to obtain a variant colour for.</param>
	<param name="iVariant">The zero-based numbered variant to obtain.</param>
	<returns>A lighter colour variant.</returns>
 -------------------------------------------------------------------

</member><member name="M:EwEUtils.Utilities.cColorUtils.IntToColor(System.Int32)">
 -------------------------------------------------------------------
 <summary>
 Convert a integer of format AARRGGBB to a <see cref="T:System.Drawing.Color">color</see> value.
 </summary>
	<param name="iColor">The integer to convert.</param>
	<returns>A color.</returns>
 -------------------------------------------------------------------

</member><member name="M:EwEUtils.Utilities.cColorUtils.ColorToInt(System.Drawing.Color)">
 -------------------------------------------------------------------
 <summary>
 Convert a <see cref="T:System.Drawing.Color">color</see> to an integer of format AARRGGBB.
 </summary>
	<param name="clr">The <see cref="T:System.Drawing.Color">color</see> to convert.</param>
	<returns>An integer of the format AARRGGBB.</returns>
 -------------------------------------------------------------------

</member><member name="T:EwEUtils.Utilities.cColorUtils">
 -----------------------------------------------------------------------
 <summary>
 Class providing a collection of <see cref="T:System.DateTime">date</see>-related utility methods.
 </summary>
 -----------------------------------------------------------------------

</member><member name="M:EwEUtils.Utilities.cFileUtils.ToValidFileName(System.String,System.Boolean)">
 -------------------------------------------------------------------
 <summary>
 Convert a text into a string that would be accepted by the OS as a
 valid file name.
 </summary>
	<param name="strText">Text to convert into a file name.</param>
	<param name="bProtectPath">Flag stating whether any path information
 included in <paramref name="strText">strText</paramref> should be
 preserved. If False, an path information is stripped off.</param>
	<returns></returns>
 -------------------------------------------------------------------

</member><member name="M:EwEUtils.Utilities.cFileUtils.FindFile(System.String,System.String,System.Boolean)">
 -------------------------------------------------------------------
 <summary>
 Find a file in a directory.
 </summary>
	<param name="strFile">Name of the file to locate.</param>
	<param name="strStartDir">Directory to search.</param>
	<param name="bRecursive">Flag stating if subdirectories should be searched recursively.</param>
	<returns>The full path to the file if found, or an empty string if the file could not be located.</returns>
 -------------------------------------------------------------------

</member><member name="M:EwEUtils.Utilities.cFileUtils.CreateBackup(System.String,System.String@,System.IO.FileAttributes)">
 -----------------------------------------------------------------------
 <summary>
 Create a backup copy of a file.
 </summary>
	<param name="strSrc">Source file to copy.</param>
	<param name="strDest">Destination to copy file to. Leave this destination empty 
 to backup to a default location. This parameter will return the backup 
 destination file name.</param>
	<param name="attributes"><see cref="T:System.IO.FileAttributes">Attributes</see> to
 assign to the backup file.</param>
	<returns>True if successful.</returns>
	<remarks>
 If <paramref name="strDest"/> is left empty, a backup file name will be
 created that looks like '[original name].[original ext].[short date]'.
 </remarks>
 -----------------------------------------------------------------------

</member><member name="M:EwEUtils.Utilities.cFileUtils.MakeTempFile(System.String)">
 -----------------------------------------------------------------------
 <summary>
 Create a zero-byte file in the %TEMP% folder, and return the path to the file.
 </summary>
	<param name="strFileName">An optional file name to use.</param>
	<returns>The full path to the file.</returns>
 -----------------------------------------------------------------------

</member><member name="M:EwEUtils.Utilities.cFileUtils.ReadNumber(System.IO.TextReader@)">
 -----------------------------------------------------------------------
 <summary>
 Read a number from a <see cref="T:System.IO.TextReader"/> and advances the read pointer.
 </summary>
	<param name="reader">The reader to read the number from.</param>
	<returns>The read number in the form of a <see cref="T:System.Single"/></returns>
 -----------------------------------------------------------------------

</member><member name="M:EwEUtils.Utilities.cFileUtils.IsDirectoryAvailable(System.String,System.Boolean)">
 -----------------------------------------------------------------------
 <summary>
 Checks if a directory is available, and optionally tries to create the directory if missing.
 </summary>
	<param name="strDirectory">The directory to check.</param>
	<param name="bCreate">Optional flag, stating whether the directory 
 should be created if it does not exist yet.</param>
	<returns>True if the directory is available.</returns>
 -----------------------------------------------------------------------

</member><member name="M:EwEUtils.Utilities.cFileUtils.ToOutputFilename(System.String,System.String,System.String,System.String,System.String)">
 -----------------------------------------------------------------------
 <summary>
 Creates a standard file name for EwE output files.
 </summary>
	<param name="ModelName">Name of the model for which the output file is created.</param>
	<param name="ComponentName">Name of the component for which the output file is created.</param>
	<param name="Filter">Optional filter to specify an optional subcomponent for which the file is created.</param>
	<param name="ScenarioName">Optional scenario name for which the file is created.</param>
	<param name="Ext">Optional extension to add.</param>
	<returns>A file name of the form {<paramref name="ModelName"/>}-{<paramref name="ComponentName"/>}[-{<paramref name="Scenario"/>}][-{<paramref name="Filter"/>}][.{<paramref name="Ext"/>}].</returns>
 -----------------------------------------------------------------------

</member><member name="T:EwEUtils.Utilities.cFileUtils">
 =======================================================================
 <summary>
 Helper class offering miscellaneous file-related functionalities.
 </summary>
 =======================================================================

</member><member name="F:EwEUtils.Utilities.cSoundUtilities.sSystemSounds.Asterisk">
	<summary>SystemAsterisk</summary>
</member><member name="F:EwEUtils.Utilities.cSoundUtilities.sSystemSounds.Exclamation">
	<summary>SystemExclamation</summary>
</member><member name="F:EwEUtils.Utilities.cSoundUtilities.sSystemSounds.Hand">
	<summary>SystemHand</summary>
</member><member name="F:EwEUtils.Utilities.cSoundUtilities.sSystemSounds.Notification">
	<summary>SystemNotification</summary>
</member><member name="F:EwEUtils.Utilities.cSoundUtilities.sSystemSounds.Question">
	<summary>SystemQuestion</summary>
</member><member name="F:EwEUtils.Utilities.cSoundUtilities.sSystemSounds.Default">
	<summary>A default sound</summary>
</member><member name="T:EwEUtils.Utilities.cSoundUtilities">
 =======================================================================
 <summary>
 Helper class offering miscellaneous sound-related functionalities.
 </summary>
 =======================================================================

</member><member name="P:EwEUtils.Core.ICoreGroupFilter.Group">
 -----------------------------------------------------------------------
 <summary>
 Get/set the group to filter by.
 </summary>
 -----------------------------------------------------------------------

</member><member name="T:EwEUtils.Core.ICoreGroupFilter">
	<summary>
 Interface for objects that can be filtered by group.
 </summary>
</member><member name="P:EwEUtils.Core.ICoreFleetFilter.Fleet">
 -----------------------------------------------------------------------
 <summary>
 Get/set the fleet to filter by.
 </summary>
 -----------------------------------------------------------------------

</member><member name="T:EwEUtils.Core.ICoreFleetFilter">
	<summary>
 Interface for objects that can be filtered by fleet.
 </summary>
</member>
</members>
</doc>